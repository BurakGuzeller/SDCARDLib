
SD_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08008b8c  08008b8c  00009b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009340  08009340  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009340  08009340  0000a340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009348  08009348  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009348  08009348  0000a348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800934c  0800934c  0000a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009350  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025d4  2000007c  080093cc  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002650  080093cc  0000b650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebd8  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285e  00000000  00000000  00019c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  0001c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3d  00000000  00000000  0001d248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023711  00000000  00000000  0001dc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134dd  00000000  00000000  00041396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc237  00000000  00000000  00054873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120aaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be8  00000000  00000000  00120af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001246d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b74 	.word	0x08008b74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08008b74 	.word	0x08008b74

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008e0:	f000 b96a 	b.w	8000bb8 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	460c      	mov	r4, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14e      	bne.n	80009a6 <__udivmoddi4+0xaa>
 8000908:	4694      	mov	ip, r2
 800090a:	458c      	cmp	ip, r1
 800090c:	4686      	mov	lr, r0
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	d962      	bls.n	80009da <__udivmoddi4+0xde>
 8000914:	b14a      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000916:	f1c2 0320 	rsb	r3, r2, #32
 800091a:	4091      	lsls	r1, r2
 800091c:	fa20 f303 	lsr.w	r3, r0, r3
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	4319      	orrs	r1, r3
 8000926:	fa00 fe02 	lsl.w	lr, r0, r2
 800092a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092e:	fa1f f68c 	uxth.w	r6, ip
 8000932:	fbb1 f4f7 	udiv	r4, r1, r7
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb07 1114 	mls	r1, r7, r4, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb04 f106 	mul.w	r1, r4, r6
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000952:	f080 8112 	bcs.w	8000b7a <__udivmoddi4+0x27e>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 810f 	bls.w	8000b7a <__udivmoddi4+0x27e>
 800095c:	3c02      	subs	r4, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a59      	subs	r1, r3, r1
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb1 f0f7 	udiv	r0, r1, r7
 800096a:	fb07 1110 	mls	r1, r7, r0, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb00 f606 	mul.w	r6, r0, r6
 8000976:	429e      	cmp	r6, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x94>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000982:	f080 80fc 	bcs.w	8000b7e <__udivmoddi4+0x282>
 8000986:	429e      	cmp	r6, r3
 8000988:	f240 80f9 	bls.w	8000b7e <__udivmoddi4+0x282>
 800098c:	4463      	add	r3, ip
 800098e:	3802      	subs	r0, #2
 8000990:	1b9b      	subs	r3, r3, r6
 8000992:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000996:	2100      	movs	r1, #0
 8000998:	b11d      	cbz	r5, 80009a2 <__udivmoddi4+0xa6>
 800099a:	40d3      	lsrs	r3, r2
 800099c:	2200      	movs	r2, #0
 800099e:	e9c5 3200 	strd	r3, r2, [r5]
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d905      	bls.n	80009b6 <__udivmoddi4+0xba>
 80009aa:	b10d      	cbz	r5, 80009b0 <__udivmoddi4+0xb4>
 80009ac:	e9c5 0100 	strd	r0, r1, [r5]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4608      	mov	r0, r1
 80009b4:	e7f5      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009b6:	fab3 f183 	clz	r1, r3
 80009ba:	2900      	cmp	r1, #0
 80009bc:	d146      	bne.n	8000a4c <__udivmoddi4+0x150>
 80009be:	42a3      	cmp	r3, r4
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0xcc>
 80009c2:	4290      	cmp	r0, r2
 80009c4:	f0c0 80f0 	bcc.w	8000ba8 <__udivmoddi4+0x2ac>
 80009c8:	1a86      	subs	r6, r0, r2
 80009ca:	eb64 0303 	sbc.w	r3, r4, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	d0e6      	beq.n	80009a2 <__udivmoddi4+0xa6>
 80009d4:	e9c5 6300 	strd	r6, r3, [r5]
 80009d8:	e7e3      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009da:	2a00      	cmp	r2, #0
 80009dc:	f040 8090 	bne.w	8000b00 <__udivmoddi4+0x204>
 80009e0:	eba1 040c 	sub.w	r4, r1, ip
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	2101      	movs	r1, #1
 80009ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80009f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f6:	fb08 4416 	mls	r4, r8, r6, r4
 80009fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fe:	fb07 f006 	mul.w	r0, r7, r6
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x11c>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x11a>
 8000a10:	4298      	cmp	r0, r3
 8000a12:	f200 80cd 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 8000a16:	4626      	mov	r6, r4
 8000a18:	1a1c      	subs	r4, r3, r0
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a22:	fb08 4410 	mls	r4, r8, r0, r4
 8000a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2a:	fb00 f707 	mul.w	r7, r0, r7
 8000a2e:	429f      	cmp	r7, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x148>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a3a:	d202      	bcs.n	8000a42 <__udivmoddi4+0x146>
 8000a3c:	429f      	cmp	r7, r3
 8000a3e:	f200 80b0 	bhi.w	8000ba2 <__udivmoddi4+0x2a6>
 8000a42:	4620      	mov	r0, r4
 8000a44:	1bdb      	subs	r3, r3, r7
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	e7a5      	b.n	8000998 <__udivmoddi4+0x9c>
 8000a4c:	f1c1 0620 	rsb	r6, r1, #32
 8000a50:	408b      	lsls	r3, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	431f      	orrs	r7, r3
 8000a58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	40f4      	lsrs	r4, r6
 8000a66:	fa00 f801 	lsl.w	r8, r0, r1
 8000a6a:	0c38      	lsrs	r0, r7, #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fbb4 fef0 	udiv	lr, r4, r0
 8000a74:	fa1f fc87 	uxth.w	ip, r7
 8000a78:	fb00 441e 	mls	r4, r0, lr, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb0e f90c 	mul.w	r9, lr, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x1a6>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a92:	f080 8084 	bcs.w	8000b9e <__udivmoddi4+0x2a2>
 8000a96:	45a1      	cmp	r9, r4
 8000a98:	f240 8081 	bls.w	8000b9e <__udivmoddi4+0x2a2>
 8000a9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aa0:	443c      	add	r4, r7
 8000aa2:	eba4 0409 	sub.w	r4, r4, r9
 8000aa6:	fa1f f983 	uxth.w	r9, r3
 8000aaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aae:	fb00 4413 	mls	r4, r0, r3, r4
 8000ab2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	45a4      	cmp	ip, r4
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x1d2>
 8000abe:	193c      	adds	r4, r7, r4
 8000ac0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ac4:	d267      	bcs.n	8000b96 <__udivmoddi4+0x29a>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	d965      	bls.n	8000b96 <__udivmoddi4+0x29a>
 8000aca:	3b02      	subs	r3, #2
 8000acc:	443c      	add	r4, r7
 8000ace:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ad2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad6:	eba4 040c 	sub.w	r4, r4, ip
 8000ada:	429c      	cmp	r4, r3
 8000adc:	46ce      	mov	lr, r9
 8000ade:	469c      	mov	ip, r3
 8000ae0:	d351      	bcc.n	8000b86 <__udivmoddi4+0x28a>
 8000ae2:	d04e      	beq.n	8000b82 <__udivmoddi4+0x286>
 8000ae4:	b155      	cbz	r5, 8000afc <__udivmoddi4+0x200>
 8000ae6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aea:	eb64 040c 	sbc.w	r4, r4, ip
 8000aee:	fa04 f606 	lsl.w	r6, r4, r6
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	431e      	orrs	r6, r3
 8000af6:	40cc      	lsrs	r4, r1
 8000af8:	e9c5 6400 	strd	r6, r4, [r5]
 8000afc:	2100      	movs	r1, #0
 8000afe:	e750      	b.n	80009a2 <__udivmoddi4+0xa6>
 8000b00:	f1c2 0320 	rsb	r3, r2, #32
 8000b04:	fa20 f103 	lsr.w	r1, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b10:	4094      	lsls	r4, r2
 8000b12:	430c      	orrs	r4, r1
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b24:	fb08 3110 	mls	r1, r8, r0, r3
 8000b28:	0c23      	lsrs	r3, r4, #16
 8000b2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2e:	fb00 f107 	mul.w	r1, r0, r7
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x24c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b3e:	d22c      	bcs.n	8000b9a <__udivmoddi4+0x29e>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d92a      	bls.n	8000b9a <__udivmoddi4+0x29e>
 8000b44:	3802      	subs	r0, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b50:	fb08 3311 	mls	r3, r8, r1, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb01 f307 	mul.w	r3, r1, r7
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x276>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b68:	d213      	bcs.n	8000b92 <__udivmoddi4+0x296>
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	d911      	bls.n	8000b92 <__udivmoddi4+0x296>
 8000b6e:	3902      	subs	r1, #2
 8000b70:	4464      	add	r4, ip
 8000b72:	1ae4      	subs	r4, r4, r3
 8000b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b78:	e739      	b.n	80009ee <__udivmoddi4+0xf2>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	e6f0      	b.n	8000960 <__udivmoddi4+0x64>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e706      	b.n	8000990 <__udivmoddi4+0x94>
 8000b82:	45c8      	cmp	r8, r9
 8000b84:	d2ae      	bcs.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7a8      	b.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b92:	4631      	mov	r1, r6
 8000b94:	e7ed      	b.n	8000b72 <__udivmoddi4+0x276>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e799      	b.n	8000ace <__udivmoddi4+0x1d2>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e7d4      	b.n	8000b48 <__udivmoddi4+0x24c>
 8000b9e:	46d6      	mov	lr, sl
 8000ba0:	e77f      	b.n	8000aa2 <__udivmoddi4+0x1a6>
 8000ba2:	4463      	add	r3, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	e74d      	b.n	8000a44 <__udivmoddi4+0x148>
 8000ba8:	4606      	mov	r6, r0
 8000baa:	4623      	mov	r3, r4
 8000bac:	4608      	mov	r0, r1
 8000bae:	e70f      	b.n	80009d0 <__udivmoddi4+0xd4>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	e730      	b.n	8000a18 <__udivmoddi4+0x11c>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_idiv0>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <mountSDCard>:

/*
 * @brief : SD karta baglanma kontrolu saglar.
 *
 */
bool mountSDCard(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	490b      	ldr	r1, [pc, #44]	@ (8000bf0 <mountSDCard+0x34>)
 8000bc4:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <mountSDCard+0x38>)
 8000bc6:	f006 f82b 	bl	8006c20 <f_mount>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <mountSDCard+0x3c>)
 8000bd0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <mountSDCard+0x3c>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d004      	beq.n	8000be4 <mountSDCard+0x28>
		debugMessage (SD_CARD_MOUNT_ERROR);
 8000bda:	4808      	ldr	r0, [pc, #32]	@ (8000bfc <mountSDCard+0x40>)
 8000bdc:	f000 ff6c 	bl	8001ab8 <debugMessage>
		return false;
 8000be0:	2300      	movs	r3, #0
 8000be2:	e003      	b.n	8000bec <mountSDCard+0x30>
	}
	else {
		debugMessage(SD_CARD_MOUNT_SUCCESS);
 8000be4:	4806      	ldr	r0, [pc, #24]	@ (8000c00 <mountSDCard+0x44>)
 8000be6:	f000 ff67 	bl	8001ab8 <debugMessage>
		return true;
 8000bea:	2301      	movs	r3, #1
	}
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	08008b8c 	.word	0x08008b8c
 8000bf4:	20000098 	.word	0x20000098
 8000bf8:	20002100 	.word	0x20002100
 8000bfc:	08008b90 	.word	0x08008b90
 8000c00:	08008bb0 	.word	0x08008bb0

08000c04 <SDCardIsCapacity>:

/*
 * @brief : SD kart kapasite hesabi yapar.
 *
 */
void SDCardIsCapacity(void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
	uint32_t total, free_space;
	memset(buffer,0,sizeof(buffer));
 8000c0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c0e:	2100      	movs	r1, #0
 8000c10:	482e      	ldr	r0, [pc, #184]	@ (8000ccc <SDCardIsCapacity+0xc8>)
 8000c12:	f007 fb2f 	bl	8008274 <memset>
	if(mountSDCard()) {
 8000c16:	f7ff ffd1 	bl	8000bbc <mountSDCard>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d051      	beq.n	8000cc4 <SDCardIsCapacity+0xc0>
		f_getfree("", &fre_clust, &pfs);
 8000c20:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd0 <SDCardIsCapacity+0xcc>)
 8000c22:	492c      	ldr	r1, [pc, #176]	@ (8000cd4 <SDCardIsCapacity+0xd0>)
 8000c24:	482c      	ldr	r0, [pc, #176]	@ (8000cd8 <SDCardIsCapacity+0xd4>)
 8000c26:	f006 ffc8 	bl	8007bba <f_getfree>
		 total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000c2a:	4b29      	ldr	r3, [pc, #164]	@ (8000cd0 <SDCardIsCapacity+0xcc>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	3b02      	subs	r3, #2
 8000c32:	4a27      	ldr	r2, [pc, #156]	@ (8000cd0 <SDCardIsCapacity+0xcc>)
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	8952      	ldrh	r2, [r2, #10]
 8000c38:	fb02 f303 	mul.w	r3, r2, r3
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fdab 	bl	8000798 <__aeabi_ui2d>
 8000c42:	f04f 0200 	mov.w	r2, #0
 8000c46:	4b25      	ldr	r3, [pc, #148]	@ (8000cdc <SDCardIsCapacity+0xd8>)
 8000c48:	f7ff fb3a 	bl	80002c0 <__aeabi_dmul>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	f7ff fe1a 	bl	800088c <__aeabi_d2uiz>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	607b      	str	r3, [r7, #4]
		sprintf(buffer, "SD CARD Total Size: \t%lu\r\n",total);
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4920      	ldr	r1, [pc, #128]	@ (8000ce0 <SDCardIsCapacity+0xdc>)
 8000c60:	481a      	ldr	r0, [pc, #104]	@ (8000ccc <SDCardIsCapacity+0xc8>)
 8000c62:	f007 fac7 	bl	80081f4 <siprintf>
		debugMessage(buffer);
 8000c66:	4819      	ldr	r0, [pc, #100]	@ (8000ccc <SDCardIsCapacity+0xc8>)
 8000c68:	f000 ff26 	bl	8001ab8 <debugMessage>
		memset(buffer,0,sizeof(buffer));
 8000c6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c70:	2100      	movs	r1, #0
 8000c72:	4816      	ldr	r0, [pc, #88]	@ (8000ccc <SDCardIsCapacity+0xc8>)
 8000c74:	f007 fafe 	bl	8008274 <memset>
		free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <SDCardIsCapacity+0xcc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	895b      	ldrh	r3, [r3, #10]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <SDCardIsCapacity+0xd0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	fb02 f303 	mul.w	r3, r2, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fd85 	bl	8000798 <__aeabi_ui2d>
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <SDCardIsCapacity+0xd8>)
 8000c94:	f7ff fb14 	bl	80002c0 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f7ff fdf4 	bl	800088c <__aeabi_d2uiz>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	603b      	str	r3, [r7, #0]
		sprintf(buffer,"SD CARD Free Space: \t%lu\r\n", free_space);
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	490e      	ldr	r1, [pc, #56]	@ (8000ce4 <SDCardIsCapacity+0xe0>)
 8000cac:	4807      	ldr	r0, [pc, #28]	@ (8000ccc <SDCardIsCapacity+0xc8>)
 8000cae:	f007 faa1 	bl	80081f4 <siprintf>
		debugMessage(buffer);
 8000cb2:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <SDCardIsCapacity+0xc8>)
 8000cb4:	f000 ff00 	bl	8001ab8 <debugMessage>
		memset(buffer,0,sizeof(buffer));
 8000cb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <SDCardIsCapacity+0xc8>)
 8000cc0:	f007 fad8 	bl	8008274 <memset>
	}
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20002104 	.word	0x20002104
 8000cd0:	2000220c 	.word	0x2000220c
 8000cd4:	20002210 	.word	0x20002210
 8000cd8:	08008bd0 	.word	0x08008bd0
 8000cdc:	3fe00000 	.word	0x3fe00000
 8000ce0:	08008bd4 	.word	0x08008bd4
 8000ce4:	08008bf0 	.word	0x08008bf0

08000ce8 <createSDFile>:
 *
 * @param  : fileName - Oluşturulacak dosyanın ismi (const char*).
 *
 * @return : bool - Dosya oluşturulursa true, aksi takdirde false döner.
 */
bool createSDFile(const char *fileName) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
    if (!mountSDCard()) {
 8000cf0:	f7ff ff64 	bl	8000bbc <mountSDCard>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f083 0301 	eor.w	r3, r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <createSDFile+0x1c>
        return false;
 8000d00:	2300      	movs	r3, #0
 8000d02:	e028      	b.n	8000d56 <createSDFile+0x6e>
    }

    fresult = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8000d04:	2213      	movs	r2, #19
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	4815      	ldr	r0, [pc, #84]	@ (8000d60 <createSDFile+0x78>)
 8000d0a:	f005 ffcf 	bl	8006cac <f_open>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <createSDFile+0x7c>)
 8000d14:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 8000d16:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <createSDFile+0x7c>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d007      	beq.n	8000d2e <createSDFile+0x46>
        debugMessage("FILE CREATION FAILED. ERROR CODE: %d\r\n", fresult);
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <createSDFile+0x7c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4810      	ldr	r0, [pc, #64]	@ (8000d68 <createSDFile+0x80>)
 8000d26:	f000 fec7 	bl	8001ab8 <debugMessage>
        return false;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e013      	b.n	8000d56 <createSDFile+0x6e>
    }

    fresult = f_close(&fil);
 8000d2e:	480c      	ldr	r0, [pc, #48]	@ (8000d60 <createSDFile+0x78>)
 8000d30:	f006 fcf5 	bl	800771e <f_close>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <createSDFile+0x7c>)
 8000d3a:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <createSDFile+0x7c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d007      	beq.n	8000d54 <createSDFile+0x6c>
        debugMessage("FILE CLOSE FAILED. ERROR CODE: %d\r\n", fresult);
 8000d44:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <createSDFile+0x7c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4808      	ldr	r0, [pc, #32]	@ (8000d6c <createSDFile+0x84>)
 8000d4c:	f000 feb4 	bl	8001ab8 <debugMessage>
        return false;
 8000d50:	2300      	movs	r3, #0
 8000d52:	e000      	b.n	8000d56 <createSDFile+0x6e>
    }

    return true;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200010d0 	.word	0x200010d0
 8000d64:	20002100 	.word	0x20002100
 8000d68:	08008c0c 	.word	0x08008c0c
 8000d6c:	08008c34 	.word	0x08008c34

08000d70 <createAndWriteSDFile>:
 * yazilmasi gerektiginde kullanilir.
 *
 * @param : const char turunden olusturulacak dosya ismi.
 * @param : fileName dosyasi icerisine yazilacak veri.
 */
void createAndWriteSDFile(const char *fileName, const char *data) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
	if(mountSDCard()) {
 8000d7a:	f7ff ff1f 	bl	8000bbc <mountSDCard>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d021      	beq.n	8000dc8 <createAndWriteSDFile+0x58>
		fresult = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8000d84:	2213      	movs	r2, #19
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	4811      	ldr	r0, [pc, #68]	@ (8000dd0 <createAndWriteSDFile+0x60>)
 8000d8a:	f005 ff8f 	bl	8006cac <f_open>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <createAndWriteSDFile+0x64>)
 8000d94:	701a      	strb	r2, [r3, #0]
	  	f_puts(data, &fil);
 8000d96:	490e      	ldr	r1, [pc, #56]	@ (8000dd0 <createAndWriteSDFile+0x60>)
 8000d98:	6838      	ldr	r0, [r7, #0]
 8000d9a:	f007 f8e5 	bl	8007f68 <f_puts>
	  	fresult = f_close(&fil);
 8000d9e:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <createAndWriteSDFile+0x60>)
 8000da0:	f006 fcbd 	bl	800771e <f_close>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <createAndWriteSDFile+0x64>)
 8000daa:	701a      	strb	r2, [r3, #0]
	  	if(fresult == FR_OK) {
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <createAndWriteSDFile+0x64>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d103      	bne.n	8000dbc <createAndWriteSDFile+0x4c>
	  		debugMessage("FILE IS SUCCES CREATE AND WRITE\r\n");
 8000db4:	4808      	ldr	r0, [pc, #32]	@ (8000dd8 <createAndWriteSDFile+0x68>)
 8000db6:	f000 fe7f 	bl	8001ab8 <debugMessage>
	  	}
	  	else {
	        debugMessage("FILE IS NOT CREATE AND WROTE, ERROR CODE : %d\r\n", fresult);
	  	}
	}
}
 8000dba:	e005      	b.n	8000dc8 <createAndWriteSDFile+0x58>
	        debugMessage("FILE IS NOT CREATE AND WROTE, ERROR CODE : %d\r\n", fresult);
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <createAndWriteSDFile+0x64>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <createAndWriteSDFile+0x6c>)
 8000dc4:	f000 fe78 	bl	8001ab8 <debugMessage>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200010d0 	.word	0x200010d0
 8000dd4:	20002100 	.word	0x20002100
 8000dd8:	08008c58 	.word	0x08008c58
 8000ddc:	08008c7c 	.word	0x08008c7c

08000de0 <LoggerSDFile>:
 * her veri eklenende dosyanin souna ekler.
 *
 * @param : const char turunden dosya ismi.
 * @param : const char turunden log verisi.
 */
void LoggerSDFile(const char *fileName, const char *data) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
    if (!mountSDCard()) {
 8000dea:	f7ff fee7 	bl	8000bbc <mountSDCard>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f083 0301 	eor.w	r3, r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d159      	bne.n	8000eae <LoggerSDFile+0xce>
        return;
    }

    fresult = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8000dfa:	2213      	movs	r2, #19
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	482f      	ldr	r0, [pc, #188]	@ (8000ebc <LoggerSDFile+0xdc>)
 8000e00:	f005 ff54 	bl	8006cac <f_open>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <LoggerSDFile+0xe0>)
 8000e0a:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec0 <LoggerSDFile+0xe0>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d14e      	bne.n	8000eb2 <LoggerSDFile+0xd2>
        return;
    }

    // Dosya sonuna git
    fresult = f_lseek(&fil, f_size(&fil));
 8000e14:	4b29      	ldr	r3, [pc, #164]	@ (8000ebc <LoggerSDFile+0xdc>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4828      	ldr	r0, [pc, #160]	@ (8000ebc <LoggerSDFile+0xdc>)
 8000e1c:	f006 fca9 	bl	8007772 <f_lseek>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b26      	ldr	r3, [pc, #152]	@ (8000ec0 <LoggerSDFile+0xe0>)
 8000e26:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 8000e28:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <LoggerSDFile+0xe0>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d009      	beq.n	8000e44 <LoggerSDFile+0x64>
        debugMessage("FILE COULD NOT BE LOCATED. ERROR CODE: %d\r\n", fresult);
 8000e30:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <LoggerSDFile+0xe0>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	4823      	ldr	r0, [pc, #140]	@ (8000ec4 <LoggerSDFile+0xe4>)
 8000e38:	f000 fe3e 	bl	8001ab8 <debugMessage>
        f_close(&fil);
 8000e3c:	481f      	ldr	r0, [pc, #124]	@ (8000ebc <LoggerSDFile+0xdc>)
 8000e3e:	f006 fc6e 	bl	800771e <f_close>
        return;
 8000e42:	e037      	b.n	8000eb4 <LoggerSDFile+0xd4>
    }

    fresult = f_write(&fil, data, strlen(data), &bw);
 8000e44:	6838      	ldr	r0, [r7, #0]
 8000e46:	f7ff f9e3 	bl	8000210 <strlen>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <LoggerSDFile+0xe8>)
 8000e4e:	6839      	ldr	r1, [r7, #0]
 8000e50:	481a      	ldr	r0, [pc, #104]	@ (8000ebc <LoggerSDFile+0xdc>)
 8000e52:	f006 fa52 	bl	80072fa <f_write>
 8000e56:	4603      	mov	r3, r0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <LoggerSDFile+0xe0>)
 8000e5c:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK && bw == strlen(data)) {
 8000e5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <LoggerSDFile+0xe0>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10b      	bne.n	8000e7e <LoggerSDFile+0x9e>
 8000e66:	6838      	ldr	r0, [r7, #0]
 8000e68:	f7ff f9d2 	bl	8000210 <strlen>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <LoggerSDFile+0xe8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d103      	bne.n	8000e7e <LoggerSDFile+0x9e>
        debugMessage("FILE IS SUCCESFULLY WRITEN.\r\n");
 8000e76:	4815      	ldr	r0, [pc, #84]	@ (8000ecc <LoggerSDFile+0xec>)
 8000e78:	f000 fe1e 	bl	8001ab8 <debugMessage>
 8000e7c:	e005      	b.n	8000e8a <LoggerSDFile+0xaa>
    } else {
        debugMessage("FILE IS NOT WRITEN, ERROR CODE: %d\r\n", fresult);
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <LoggerSDFile+0xe0>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	4812      	ldr	r0, [pc, #72]	@ (8000ed0 <LoggerSDFile+0xf0>)
 8000e86:	f000 fe17 	bl	8001ab8 <debugMessage>
    }
    fresult = f_close(&fil);
 8000e8a:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <LoggerSDFile+0xdc>)
 8000e8c:	f006 fc47 	bl	800771e <f_close>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <LoggerSDFile+0xe0>)
 8000e96:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <LoggerSDFile+0xe0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d009      	beq.n	8000eb4 <LoggerSDFile+0xd4>
        debugMessage("FILE IS NOT CLOSED, ERROR CODE: %d\r\n", fresult);
 8000ea0:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <LoggerSDFile+0xe0>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <LoggerSDFile+0xf4>)
 8000ea8:	f000 fe06 	bl	8001ab8 <debugMessage>
 8000eac:	e002      	b.n	8000eb4 <LoggerSDFile+0xd4>
        return;
 8000eae:	bf00      	nop
 8000eb0:	e000      	b.n	8000eb4 <LoggerSDFile+0xd4>
        return;
 8000eb2:	bf00      	nop
    }
}
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200010d0 	.word	0x200010d0
 8000ec0:	20002100 	.word	0x20002100
 8000ec4:	08008cac 	.word	0x08008cac
 8000ec8:	20002208 	.word	0x20002208
 8000ecc:	08008cd8 	.word	0x08008cd8
 8000ed0:	08008cf8 	.word	0x08008cf8
 8000ed4:	08008d20 	.word	0x08008d20

08000ed8 <readSDFileData>:
 *
 * @param  : fileName - Okunması istenilen dosyanın ismi (const char*).
 *
 * @return : void
 */
void readSDFileData(const char *fileName) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    if (!mountSDCard()) {
 8000ee0:	f7ff fe6c 	bl	8000bbc <mountSDCard>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f083 0301 	eor.w	r3, r3, #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d154      	bne.n	8000f9a <readSDFileData+0xc2>
        return;
    }

    fresult = f_open(&fil, fileName, FA_READ);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	482b      	ldr	r0, [pc, #172]	@ (8000fa4 <readSDFileData+0xcc>)
 8000ef6:	f005 fed9 	bl	8006cac <f_open>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <readSDFileData+0xd0>)
 8000f00:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_NO_FILE) {
 8000f02:	4b29      	ldr	r3, [pc, #164]	@ (8000fa8 <readSDFileData+0xd0>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d104      	bne.n	8000f14 <readSDFileData+0x3c>
        debugMessage("%s THERE IS NO FILE NAMED\r\n", fileName);
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	4827      	ldr	r0, [pc, #156]	@ (8000fac <readSDFileData+0xd4>)
 8000f0e:	f000 fdd3 	bl	8001ab8 <debugMessage>
        return;
 8000f12:	e043      	b.n	8000f9c <readSDFileData+0xc4>
    } else if (fresult != FR_OK) {
 8000f14:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <readSDFileData+0xd0>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d006      	beq.n	8000f2a <readSDFileData+0x52>
        debugMessage("FILE IS NOT OPEN. ERROR CODE: %d\r\n", fresult);
 8000f1c:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <readSDFileData+0xd0>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4823      	ldr	r0, [pc, #140]	@ (8000fb0 <readSDFileData+0xd8>)
 8000f24:	f000 fdc8 	bl	8001ab8 <debugMessage>
        return;
 8000f28:	e038      	b.n	8000f9c <readSDFileData+0xc4>
    }

    // Dosya boyutunu al
    UINT fileSize = f_size(&fil);
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <readSDFileData+0xcc>)
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	60fb      	str	r3, [r7, #12]
    if (fileSize == 0) {
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d103      	bne.n	8000f3e <readSDFileData+0x66>
        debugMessage("FILE IS EMPTY\r\n");
 8000f36:	481f      	ldr	r0, [pc, #124]	@ (8000fb4 <readSDFileData+0xdc>)
 8000f38:	f000 fdbe 	bl	8001ab8 <debugMessage>
 8000f3c:	e029      	b.n	8000f92 <readSDFileData+0xba>
    }
    else if (fileSize <= sizeof(buffer)) {
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f44:	d822      	bhi.n	8000f8c <readSDFileData+0xb4>
        memset(buffer, 0, sizeof(buffer));
 8000f46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	481a      	ldr	r0, [pc, #104]	@ (8000fb8 <readSDFileData+0xe0>)
 8000f4e:	f007 f991 	bl	8008274 <memset>
        fresult = f_read(&fil, buffer, fileSize, &br);
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <readSDFileData+0xe4>)
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	4918      	ldr	r1, [pc, #96]	@ (8000fb8 <readSDFileData+0xe0>)
 8000f58:	4812      	ldr	r0, [pc, #72]	@ (8000fa4 <readSDFileData+0xcc>)
 8000f5a:	f006 f86f 	bl	800703c <f_read>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <readSDFileData+0xd0>)
 8000f64:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK || br == 0) {
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <readSDFileData+0xd0>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d103      	bne.n	8000f76 <readSDFileData+0x9e>
 8000f6e:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <readSDFileData+0xe4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d106      	bne.n	8000f84 <readSDFileData+0xac>
            debugMessage("DATA FROM FILE COULD NOT BE READ. ERROR CODE: %d\r\n", fresult);
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <readSDFileData+0xd0>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4810      	ldr	r0, [pc, #64]	@ (8000fc0 <readSDFileData+0xe8>)
 8000f7e:	f000 fd9b 	bl	8001ab8 <debugMessage>
 8000f82:	e006      	b.n	8000f92 <readSDFileData+0xba>
        }
        else {
            debugMessage(buffer);
 8000f84:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <readSDFileData+0xe0>)
 8000f86:	f000 fd97 	bl	8001ab8 <debugMessage>
 8000f8a:	e002      	b.n	8000f92 <readSDFileData+0xba>
        }
    }
    else {
        readLargeSDFile(fileName);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f819 	bl	8000fc4 <readLargeSDFile>
    }

    f_close(&fil);
 8000f92:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <readSDFileData+0xcc>)
 8000f94:	f006 fbc3 	bl	800771e <f_close>
 8000f98:	e000      	b.n	8000f9c <readSDFileData+0xc4>
        return;
 8000f9a:	bf00      	nop
}
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200010d0 	.word	0x200010d0
 8000fa8:	20002100 	.word	0x20002100
 8000fac:	08008d48 	.word	0x08008d48
 8000fb0:	08008d64 	.word	0x08008d64
 8000fb4:	08008d88 	.word	0x08008d88
 8000fb8:	20002104 	.word	0x20002104
 8000fbc:	20002204 	.word	0x20002204
 8000fc0:	08008d98 	.word	0x08008d98

08000fc4 <readLargeSDFile>:
 *
 * Dosya, SD karttan okunmaya başlanır ve dosya boyutuna göre veriler buffer'a
 * bölünerek okunur. Dosya başarıyla okunursa, buffer içeriği her okuma işleminde
 * debugMessage ile yazdırılır. Dosya sonunda, SD kart dosyası kapanır.
 */
void readLargeSDFile(const char *fileName) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    if (!mountSDCard()) {
 8000fcc:	f7ff fdf6 	bl	8000bbc <mountSDCard>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f083 0301 	eor.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d153      	bne.n	8001084 <readLargeSDFile+0xc0>
        return;
    }

    fresult = f_open(&fil, fileName, FA_READ);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	482a      	ldr	r0, [pc, #168]	@ (800108c <readLargeSDFile+0xc8>)
 8000fe2:	f005 fe63 	bl	8006cac <f_open>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <readLargeSDFile+0xcc>)
 8000fec:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <readLargeSDFile+0xcc>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <readLargeSDFile+0x40>
        debugMessage("FILE IS NOT OPEN. ERROR CODE: %d\r\n", fresult);
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <readLargeSDFile+0xcc>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4825      	ldr	r0, [pc, #148]	@ (8001094 <readLargeSDFile+0xd0>)
 8000ffe:	f000 fd5b 	bl	8001ab8 <debugMessage>
        return;
 8001002:	e040      	b.n	8001086 <readLargeSDFile+0xc2>
    }

    uint32_t fileSize = f_size(&fil); // Dosya boyutunu al
 8001004:	4b21      	ldr	r3, [pc, #132]	@ (800108c <readLargeSDFile+0xc8>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	613b      	str	r3, [r7, #16]
    uint32_t bytesRead = 0;           // Okunan toplam bayt sayısı
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
    UINT toRead = 0;                  // O an okunacak bayt sayısı
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]

    while (fileSize > bytesRead) {
 8001012:	e02f      	b.n	8001074 <readLargeSDFile+0xb0>
        // Kalan dosya boyutunu kontrol et ve okuma boyutunu belirle
        toRead = (fileSize - bytesRead > sizeof(buffer)) ? sizeof(buffer) : (fileSize - bytesRead);
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800101e:	bf28      	it	cs
 8001020:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8001024:	60fb      	str	r3, [r7, #12]

        memset(buffer, 0, sizeof(buffer));
 8001026:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800102a:	2100      	movs	r1, #0
 800102c:	481a      	ldr	r0, [pc, #104]	@ (8001098 <readLargeSDFile+0xd4>)
 800102e:	f007 f921 	bl	8008274 <memset>
        fresult = f_read(&fil, buffer , toRead, &br); // Dosyadan buffer boyutunda veri oku
 8001032:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <readLargeSDFile+0xd8>)
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	4918      	ldr	r1, [pc, #96]	@ (8001098 <readLargeSDFile+0xd4>)
 8001038:	4814      	ldr	r0, [pc, #80]	@ (800108c <readLargeSDFile+0xc8>)
 800103a:	f005 ffff 	bl	800703c <f_read>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <readLargeSDFile+0xcc>)
 8001044:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) {
 8001046:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <readLargeSDFile+0xcc>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <readLargeSDFile+0x98>
            debugMessage("FILE READING ERROR, ERROR CODE %d\r\n", fresult);
 800104e:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <readLargeSDFile+0xcc>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	4812      	ldr	r0, [pc, #72]	@ (80010a0 <readLargeSDFile+0xdc>)
 8001056:	f000 fd2f 	bl	8001ab8 <debugMessage>
            break;
 800105a:	e00f      	b.n	800107c <readLargeSDFile+0xb8>
        }

        if (sizeof(buffer) > MAX_SIZE - 1) {
            buffer[MAX_SIZE - 1] = '\0';
 800105c:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <readLargeSDFile+0xd4>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
        }

        debugMessage(buffer);
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <readLargeSDFile+0xd4>)
 8001066:	f000 fd27 	bl	8001ab8 <debugMessage>
        bytesRead += br;
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <readLargeSDFile+0xd8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4413      	add	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
    while (fileSize > bytesRead) {
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8cb      	bhi.n	8001014 <readLargeSDFile+0x50>
    }

    f_close(&fil);
 800107c:	4803      	ldr	r0, [pc, #12]	@ (800108c <readLargeSDFile+0xc8>)
 800107e:	f006 fb4e 	bl	800771e <f_close>
 8001082:	e000      	b.n	8001086 <readLargeSDFile+0xc2>
        return;
 8001084:	bf00      	nop
}
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200010d0 	.word	0x200010d0
 8001090:	20002100 	.word	0x20002100
 8001094:	08008d64 	.word	0x08008d64
 8001098:	20002104 	.word	0x20002104
 800109c:	20002204 	.word	0x20002204
 80010a0:	08008dcc 	.word	0x08008dcc

080010a4 <removingSDFile>:
 * @brief : SD karttan dosya silinmesini saglar.
 *
 * @param : const char turunden silinmesi istenilen dosya ismi.
 *
 */
void removingSDFile(const char* fileName) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b090      	sub	sp, #64	@ 0x40
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    char removingFileName[50] = { 0 };
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	222e      	movs	r2, #46	@ 0x2e
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f007 f8db 	bl	8008274 <memset>
    sprintf(removingFileName, "%s", fileName); // Dosya adı formatı tutarlı
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4910      	ldr	r1, [pc, #64]	@ (8001108 <removingSDFile+0x64>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f007 f894 	bl	80081f4 <siprintf>

    fresult = f_unlink(removingFileName);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4618      	mov	r0, r3
 80010d2:	f006 fe27 	bl	8007d24 <f_unlink>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <removingSDFile+0x68>)
 80010dc:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK) {
 80010de:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <removingSDFile+0x68>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d104      	bne.n	80010f0 <removingSDFile+0x4c>
        debugMessage("%s FILE SUCCESSFULLY DELETED.\r\n", fileName);
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4809      	ldr	r0, [pc, #36]	@ (8001110 <removingSDFile+0x6c>)
 80010ea:	f000 fce5 	bl	8001ab8 <debugMessage>
    } else {
        debugMessage("%s FILE IS NOT DELETED, ERROR CODE: %d\r\n", fileName, fresult);
    }
}
 80010ee:	e006      	b.n	80010fe <removingSDFile+0x5a>
        debugMessage("%s FILE IS NOT DELETED, ERROR CODE: %d\r\n", fileName, fresult);
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <removingSDFile+0x68>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4806      	ldr	r0, [pc, #24]	@ (8001114 <removingSDFile+0x70>)
 80010fa:	f000 fcdd 	bl	8001ab8 <debugMessage>
}
 80010fe:	bf00      	nop
 8001100:	3740      	adds	r7, #64	@ 0x40
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	08008df0 	.word	0x08008df0
 800110c:	20002100 	.word	0x20002100
 8001110:	08008df4 	.word	0x08008df4
 8001114:	08008e14 	.word	0x08008e14

08001118 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2110      	movs	r1, #16
 8001120:	4803      	ldr	r0, [pc, #12]	@ (8001130 <SELECT+0x18>)
 8001122:	f001 fb2d 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f001 f88c 	bl	8002244 <HAL_Delay>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40020800 	.word	0x40020800

08001134 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2110      	movs	r1, #16
 800113c:	4803      	ldr	r0, [pc, #12]	@ (800114c <DESELECT+0x18>)
 800113e:	f001 fb1f 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001142:	2001      	movs	r0, #1
 8001144:	f001 f87e 	bl	8002244 <HAL_Delay>
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40020800 	.word	0x40020800

08001150 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800115a:	bf00      	nop
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <SPI_TxByte+0x30>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b02      	cmp	r3, #2
 8001168:	d1f8      	bne.n	800115c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800116a:	1df9      	adds	r1, r7, #7
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	2201      	movs	r2, #1
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <SPI_TxByte+0x30>)
 8001172:	f002 f9e0 	bl	8003536 <HAL_SPI_Transmit>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20002220 	.word	0x20002220

08001184 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001190:	bf00      	nop
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <SPI_TxBuffer+0x30>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b02      	cmp	r3, #2
 800119e:	d1f8      	bne.n	8001192 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80011a0:	887a      	ldrh	r2, [r7, #2]
 80011a2:	2364      	movs	r3, #100	@ 0x64
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <SPI_TxBuffer+0x30>)
 80011a8:	f002 f9c5 	bl	8003536 <HAL_SPI_Transmit>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20002220 	.word	0x20002220

080011b8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80011be:	23ff      	movs	r3, #255	@ 0xff
 80011c0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80011c2:	bf00      	nop
 80011c4:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <SPI_RxByte+0x34>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d1f8      	bne.n	80011c4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80011d2:	1dba      	adds	r2, r7, #6
 80011d4:	1df9      	adds	r1, r7, #7
 80011d6:	2364      	movs	r3, #100	@ 0x64
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	4803      	ldr	r0, [pc, #12]	@ (80011ec <SPI_RxByte+0x34>)
 80011de:	f002 faee 	bl	80037be <HAL_SPI_TransmitReceive>

	return data;
 80011e2:	79bb      	ldrb	r3, [r7, #6]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20002220 	.word	0x20002220

080011f0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80011f8:	f7ff ffde 	bl	80011b8 <SPI_RxByte>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	701a      	strb	r2, [r3, #0]
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <SD_ReadyWait+0x30>)
 8001214:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001218:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800121a:	f7ff ffcd 	bl	80011b8 <SPI_RxByte>
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2bff      	cmp	r3, #255	@ 0xff
 8001226:	d004      	beq.n	8001232 <SD_ReadyWait+0x26>
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <SD_ReadyWait+0x30>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f3      	bne.n	800121a <SD_ReadyWait+0xe>

	return res;
 8001232:	79fb      	ldrb	r3, [r7, #7]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200022c2 	.word	0x200022c2

08001240 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001246:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800124a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800124c:	f7ff ff72 	bl	8001134 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	e005      	b.n	8001262 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001256:	20ff      	movs	r0, #255	@ 0xff
 8001258:	f7ff ff7a 	bl	8001150 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3301      	adds	r3, #1
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b09      	cmp	r3, #9
 8001266:	ddf6      	ble.n	8001256 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001268:	f7ff ff56 	bl	8001118 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800126c:	2340      	movs	r3, #64	@ 0x40
 800126e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001280:	2395      	movs	r3, #149	@ 0x95
 8001282:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001284:	463b      	mov	r3, r7
 8001286:	2106      	movs	r1, #6
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff7b 	bl	8001184 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800128e:	e002      	b.n	8001296 <SD_PowerOn+0x56>
	{
		cnt--;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	3b01      	subs	r3, #1
 8001294:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001296:	f7ff ff8f 	bl	80011b8 <SPI_RxByte>
 800129a:	4603      	mov	r3, r0
 800129c:	2b01      	cmp	r3, #1
 800129e:	d002      	beq.n	80012a6 <SD_PowerOn+0x66>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f4      	bne.n	8001290 <SD_PowerOn+0x50>
	}

	DESELECT();
 80012a6:	f7ff ff45 	bl	8001134 <DESELECT>
	SPI_TxByte(0XFF);
 80012aa:	20ff      	movs	r0, #255	@ 0xff
 80012ac:	f7ff ff50 	bl	8001150 <SPI_TxByte>

	PowerFlag = 1;
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <SD_PowerOn+0x80>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20002215 	.word	0x20002215

080012c4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <SD_PowerOff+0x14>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	20002215 	.word	0x20002215

080012dc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	return PowerFlag;
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <SD_CheckPower+0x14>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20002215 	.word	0x20002215

080012f4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80012fe:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <SD_RxDataBlock+0x5c>)
 8001300:	22c8      	movs	r2, #200	@ 0xc8
 8001302:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001304:	f7ff ff58 	bl	80011b8 <SPI_RxByte>
 8001308:	4603      	mov	r3, r0
 800130a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	2bff      	cmp	r3, #255	@ 0xff
 8001310:	d104      	bne.n	800131c <SD_RxDataBlock+0x28>
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <SD_RxDataBlock+0x5c>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	b29b      	uxth	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f3      	bne.n	8001304 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001320:	d001      	beq.n	8001326 <SD_RxDataBlock+0x32>
 8001322:	2300      	movs	r3, #0
 8001324:	e00f      	b.n	8001346 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5f 	bl	80011f0 <SPI_RxBytePtr>
	} while(len--);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	603a      	str	r2, [r7, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f4      	bne.n	8001326 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800133c:	f7ff ff3c 	bl	80011b8 <SPI_RxByte>
	SPI_RxByte();
 8001340:	f7ff ff3a 	bl	80011b8 <SPI_RxByte>

	return TRUE;
 8001344:	2301      	movs	r3, #1
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200022c1 	.word	0x200022c1

08001354 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001364:	f7ff ff52 	bl	800120c <SD_ReadyWait>
 8001368:	4603      	mov	r3, r0
 800136a:	2bff      	cmp	r3, #255	@ 0xff
 800136c:	d001      	beq.n	8001372 <SD_TxDataBlock+0x1e>
 800136e:	2300      	movs	r3, #0
 8001370:	e02f      	b.n	80013d2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff feeb 	bl	8001150 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	2bfd      	cmp	r3, #253	@ 0xfd
 800137e:	d020      	beq.n	80013c2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001380:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fefd 	bl	8001184 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800138a:	f7ff ff15 	bl	80011b8 <SPI_RxByte>
		SPI_RxByte();
 800138e:	f7ff ff13 	bl	80011b8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001392:	e00b      	b.n	80013ac <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001394:	f7ff ff10 	bl	80011b8 <SPI_RxByte>
 8001398:	4603      	mov	r3, r0
 800139a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	f003 031f 	and.w	r3, r3, #31
 80013a2:	2b05      	cmp	r3, #5
 80013a4:	d006      	beq.n	80013b4 <SD_TxDataBlock+0x60>
			i++;
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	3301      	adds	r3, #1
 80013aa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80013ac:	7bbb      	ldrb	r3, [r7, #14]
 80013ae:	2b40      	cmp	r3, #64	@ 0x40
 80013b0:	d9f0      	bls.n	8001394 <SD_TxDataBlock+0x40>
 80013b2:	e000      	b.n	80013b6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80013b4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80013b6:	bf00      	nop
 80013b8:	f7ff fefe 	bl	80011b8 <SPI_RxByte>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0fa      	beq.n	80013b8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d101      	bne.n	80013d0 <SD_TxDataBlock+0x7c>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	6039      	str	r1, [r7, #0]
 80013e4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80013e6:	f7ff ff11 	bl	800120c <SD_ReadyWait>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2bff      	cmp	r3, #255	@ 0xff
 80013ee:	d001      	beq.n	80013f4 <SD_SendCmd+0x1a>
 80013f0:	23ff      	movs	r3, #255	@ 0xff
 80013f2:	e042      	b.n	800147a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff feaa 	bl	8001150 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	0e1b      	lsrs	r3, r3, #24
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fea4 	bl	8001150 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	0c1b      	lsrs	r3, r3, #16
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fe9e 	bl	8001150 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fe98 	bl	8001150 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe93 	bl	8001150 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b40      	cmp	r3, #64	@ 0x40
 800142e:	d102      	bne.n	8001436 <SD_SendCmd+0x5c>
 8001430:	2395      	movs	r3, #149	@ 0x95
 8001432:	73fb      	strb	r3, [r7, #15]
 8001434:	e007      	b.n	8001446 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b48      	cmp	r3, #72	@ 0x48
 800143a:	d102      	bne.n	8001442 <SD_SendCmd+0x68>
 800143c:	2387      	movs	r3, #135	@ 0x87
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e001      	b.n	8001446 <SD_SendCmd+0x6c>
	else crc = 1;
 8001442:	2301      	movs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe81 	bl	8001150 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b4c      	cmp	r3, #76	@ 0x4c
 8001452:	d101      	bne.n	8001458 <SD_SendCmd+0x7e>
 8001454:	f7ff feb0 	bl	80011b8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001458:	230a      	movs	r3, #10
 800145a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800145c:	f7ff feac 	bl	80011b8 <SPI_RxByte>
 8001460:	4603      	mov	r3, r0
 8001462:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001464:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001468:	2b00      	cmp	r3, #0
 800146a:	da05      	bge.n	8001478 <SD_SendCmd+0x9e>
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	3b01      	subs	r3, #1
 8001470:	73bb      	strb	r3, [r7, #14]
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f1      	bne.n	800145c <SD_SendCmd+0x82>

	return res;
 8001478:	7b7b      	ldrb	r3, [r7, #13]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SD_disk_initialize+0x14>
 8001494:	2301      	movs	r3, #1
 8001496:	e0d6      	b.n	8001646 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001498:	4b6d      	ldr	r3, [pc, #436]	@ (8001650 <SD_disk_initialize+0x1cc>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <SD_disk_initialize+0x2a>
 80014a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001650 <SD_disk_initialize+0x1cc>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	e0cb      	b.n	8001646 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80014ae:	f7ff fec7 	bl	8001240 <SD_PowerOn>

	/* slave select */
	SELECT();
 80014b2:	f7ff fe31 	bl	8001118 <SELECT>

	/* check disk type */
	type = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80014ba:	2100      	movs	r1, #0
 80014bc:	2040      	movs	r0, #64	@ 0x40
 80014be:	f7ff ff8c 	bl	80013da <SD_SendCmd>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	f040 80a6 	bne.w	8001616 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80014ca:	4b62      	ldr	r3, [pc, #392]	@ (8001654 <SD_disk_initialize+0x1d0>)
 80014cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014d0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80014d2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80014d6:	2048      	movs	r0, #72	@ 0x48
 80014d8:	f7ff ff7f 	bl	80013da <SD_SendCmd>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d158      	bne.n	8001594 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
 80014e6:	e00c      	b.n	8001502 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80014e8:	7bfc      	ldrb	r4, [r7, #15]
 80014ea:	f7ff fe65 	bl	80011b8 <SPI_RxByte>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	f104 0310 	add.w	r3, r4, #16
 80014f6:	443b      	add	r3, r7
 80014f8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	3301      	adds	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d9ef      	bls.n	80014e8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001508:	7abb      	ldrb	r3, [r7, #10]
 800150a:	2b01      	cmp	r3, #1
 800150c:	f040 8083 	bne.w	8001616 <SD_disk_initialize+0x192>
 8001510:	7afb      	ldrb	r3, [r7, #11]
 8001512:	2baa      	cmp	r3, #170	@ 0xaa
 8001514:	d17f      	bne.n	8001616 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001516:	2100      	movs	r1, #0
 8001518:	2077      	movs	r0, #119	@ 0x77
 800151a:	f7ff ff5e 	bl	80013da <SD_SendCmd>
 800151e:	4603      	mov	r3, r0
 8001520:	2b01      	cmp	r3, #1
 8001522:	d807      	bhi.n	8001534 <SD_disk_initialize+0xb0>
 8001524:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001528:	2069      	movs	r0, #105	@ 0x69
 800152a:	f7ff ff56 	bl	80013da <SD_SendCmd>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001534:	4b47      	ldr	r3, [pc, #284]	@ (8001654 <SD_disk_initialize+0x1d0>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1eb      	bne.n	8001516 <SD_disk_initialize+0x92>
 800153e:	e000      	b.n	8001542 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001540:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001542:	4b44      	ldr	r3, [pc, #272]	@ (8001654 <SD_disk_initialize+0x1d0>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d064      	beq.n	8001616 <SD_disk_initialize+0x192>
 800154c:	2100      	movs	r1, #0
 800154e:	207a      	movs	r0, #122	@ 0x7a
 8001550:	f7ff ff43 	bl	80013da <SD_SendCmd>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d15d      	bne.n	8001616 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	e00c      	b.n	800157a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001560:	7bfc      	ldrb	r4, [r7, #15]
 8001562:	f7ff fe29 	bl	80011b8 <SPI_RxByte>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	f104 0310 	add.w	r3, r4, #16
 800156e:	443b      	add	r3, r7
 8001570:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	3301      	adds	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d9ef      	bls.n	8001560 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001580:	7a3b      	ldrb	r3, [r7, #8]
 8001582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SD_disk_initialize+0x10a>
 800158a:	230c      	movs	r3, #12
 800158c:	e000      	b.n	8001590 <SD_disk_initialize+0x10c>
 800158e:	2304      	movs	r3, #4
 8001590:	73bb      	strb	r3, [r7, #14]
 8001592:	e040      	b.n	8001616 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001594:	2100      	movs	r1, #0
 8001596:	2077      	movs	r0, #119	@ 0x77
 8001598:	f7ff ff1f 	bl	80013da <SD_SendCmd>
 800159c:	4603      	mov	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d808      	bhi.n	80015b4 <SD_disk_initialize+0x130>
 80015a2:	2100      	movs	r1, #0
 80015a4:	2069      	movs	r0, #105	@ 0x69
 80015a6:	f7ff ff18 	bl	80013da <SD_SendCmd>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d801      	bhi.n	80015b4 <SD_disk_initialize+0x130>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e000      	b.n	80015b6 <SD_disk_initialize+0x132>
 80015b4:	2301      	movs	r3, #1
 80015b6:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80015b8:	7bbb      	ldrb	r3, [r7, #14]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d10e      	bne.n	80015dc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80015be:	2100      	movs	r1, #0
 80015c0:	2077      	movs	r0, #119	@ 0x77
 80015c2:	f7ff ff0a 	bl	80013da <SD_SendCmd>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d80e      	bhi.n	80015ea <SD_disk_initialize+0x166>
 80015cc:	2100      	movs	r1, #0
 80015ce:	2069      	movs	r0, #105	@ 0x69
 80015d0:	f7ff ff03 	bl	80013da <SD_SendCmd>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d107      	bne.n	80015ea <SD_disk_initialize+0x166>
 80015da:	e00d      	b.n	80015f8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80015dc:	2100      	movs	r1, #0
 80015de:	2041      	movs	r0, #65	@ 0x41
 80015e0:	f7ff fefb 	bl	80013da <SD_SendCmd>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80015ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <SD_disk_initialize+0x1d0>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1e1      	bne.n	80015b8 <SD_disk_initialize+0x134>
 80015f4:	e000      	b.n	80015f8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80015f6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80015f8:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <SD_disk_initialize+0x1d0>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <SD_disk_initialize+0x18e>
 8001602:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001606:	2050      	movs	r0, #80	@ 0x50
 8001608:	f7ff fee7 	bl	80013da <SD_SendCmd>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SD_disk_initialize+0x192>
 8001612:	2300      	movs	r3, #0
 8001614:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001616:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <SD_disk_initialize+0x1d4>)
 8001618:	7bbb      	ldrb	r3, [r7, #14]
 800161a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800161c:	f7ff fd8a 	bl	8001134 <DESELECT>
	SPI_RxByte();
 8001620:	f7ff fdca 	bl	80011b8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <SD_disk_initialize+0x1cc>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <SD_disk_initialize+0x1cc>)
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e001      	b.n	8001640 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800163c:	f7ff fe42 	bl	80012c4 <SD_PowerOff>
	}

	return Stat;
 8001640:	4b03      	ldr	r3, [pc, #12]	@ (8001650 <SD_disk_initialize+0x1cc>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b2db      	uxtb	r3, r3
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}
 800164e:	bf00      	nop
 8001650:	20000000 	.word	0x20000000
 8001654:	200022c1 	.word	0x200022c1
 8001658:	20002214 	.word	0x20002214

0800165c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SD_disk_status+0x14>
 800166c:	2301      	movs	r3, #1
 800166e:	e002      	b.n	8001676 <SD_disk_status+0x1a>
	return Stat;
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <SD_disk_status+0x28>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000000 	.word	0x20000000

08001688 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	4603      	mov	r3, r0
 8001696:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <SD_disk_read+0x1c>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <SD_disk_read+0x20>
 80016a4:	2304      	movs	r3, #4
 80016a6:	e051      	b.n	800174c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <SD_disk_read+0xcc>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SD_disk_read+0x32>
 80016b6:	2303      	movs	r3, #3
 80016b8:	e048      	b.n	800174c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80016ba:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <SD_disk_read+0xd0>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <SD_disk_read+0x44>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	025b      	lsls	r3, r3, #9
 80016ca:	607b      	str	r3, [r7, #4]

	SELECT();
 80016cc:	f7ff fd24 	bl	8001118 <SELECT>

	if (count == 1)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d111      	bne.n	80016fa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	2051      	movs	r0, #81	@ 0x51
 80016da:	f7ff fe7e 	bl	80013da <SD_SendCmd>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d129      	bne.n	8001738 <SD_disk_read+0xb0>
 80016e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016e8:	68b8      	ldr	r0, [r7, #8]
 80016ea:	f7ff fe03 	bl	80012f4 <SD_RxDataBlock>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d021      	beq.n	8001738 <SD_disk_read+0xb0>
 80016f4:	2300      	movs	r3, #0
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	e01e      	b.n	8001738 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	2052      	movs	r0, #82	@ 0x52
 80016fe:	f7ff fe6c 	bl	80013da <SD_SendCmd>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d117      	bne.n	8001738 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001708:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	f7ff fdf1 	bl	80012f4 <SD_RxDataBlock>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00a      	beq.n	800172e <SD_disk_read+0xa6>
				buff += 512;
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800171e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	3b01      	subs	r3, #1
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ed      	bne.n	8001708 <SD_disk_read+0x80>
 800172c:	e000      	b.n	8001730 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800172e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001730:	2100      	movs	r1, #0
 8001732:	204c      	movs	r0, #76	@ 0x4c
 8001734:	f7ff fe51 	bl	80013da <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001738:	f7ff fcfc 	bl	8001134 <DESELECT>
	SPI_RxByte();
 800173c:	f7ff fd3c 	bl	80011b8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	bf14      	ite	ne
 8001746:	2301      	movne	r3, #1
 8001748:	2300      	moveq	r3, #0
 800174a:	b2db      	uxtb	r3, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000000 	.word	0x20000000
 8001758:	20002214 	.word	0x20002214

0800175c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <SD_disk_write+0x1c>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <SD_disk_write+0x20>
 8001778:	2304      	movs	r3, #4
 800177a:	e06b      	b.n	8001854 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800177c:	4b37      	ldr	r3, [pc, #220]	@ (800185c <SD_disk_write+0x100>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SD_disk_write+0x32>
 800178a:	2303      	movs	r3, #3
 800178c:	e062      	b.n	8001854 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800178e:	4b33      	ldr	r3, [pc, #204]	@ (800185c <SD_disk_write+0x100>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SD_disk_write+0x44>
 800179c:	2302      	movs	r3, #2
 800179e:	e059      	b.n	8001854 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80017a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001860 <SD_disk_write+0x104>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <SD_disk_write+0x56>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	025b      	lsls	r3, r3, #9
 80017b0:	607b      	str	r3, [r7, #4]

	SELECT();
 80017b2:	f7ff fcb1 	bl	8001118 <SELECT>

	if (count == 1)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d110      	bne.n	80017de <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	2058      	movs	r0, #88	@ 0x58
 80017c0:	f7ff fe0b 	bl	80013da <SD_SendCmd>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d13a      	bne.n	8001840 <SD_disk_write+0xe4>
 80017ca:	21fe      	movs	r1, #254	@ 0xfe
 80017cc:	68b8      	ldr	r0, [r7, #8]
 80017ce:	f7ff fdc1 	bl	8001354 <SD_TxDataBlock>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d033      	beq.n	8001840 <SD_disk_write+0xe4>
			count = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	e030      	b.n	8001840 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <SD_disk_write+0x104>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80017ea:	2100      	movs	r1, #0
 80017ec:	2077      	movs	r0, #119	@ 0x77
 80017ee:	f7ff fdf4 	bl	80013da <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80017f2:	6839      	ldr	r1, [r7, #0]
 80017f4:	2057      	movs	r0, #87	@ 0x57
 80017f6:	f7ff fdf0 	bl	80013da <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	2059      	movs	r0, #89	@ 0x59
 80017fe:	f7ff fdec 	bl	80013da <SD_SendCmd>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d11b      	bne.n	8001840 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001808:	21fc      	movs	r1, #252	@ 0xfc
 800180a:	68b8      	ldr	r0, [r7, #8]
 800180c:	f7ff fda2 	bl	8001354 <SD_TxDataBlock>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00a      	beq.n	800182c <SD_disk_write+0xd0>
				buff += 512;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800181c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ee      	bne.n	8001808 <SD_disk_write+0xac>
 800182a:	e000      	b.n	800182e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800182c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800182e:	21fd      	movs	r1, #253	@ 0xfd
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff fd8f 	bl	8001354 <SD_TxDataBlock>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <SD_disk_write+0xe4>
			{
				count = 1;
 800183c:	2301      	movs	r3, #1
 800183e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001840:	f7ff fc78 	bl	8001134 <DESELECT>
	SPI_RxByte();
 8001844:	f7ff fcb8 	bl	80011b8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf14      	ite	ne
 800184e:	2301      	movne	r3, #1
 8001850:	2300      	moveq	r3, #0
 8001852:	b2db      	uxtb	r3, r3
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000000 	.word	0x20000000
 8001860:	20002214 	.word	0x20002214

08001864 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b08b      	sub	sp, #44	@ 0x2c
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	603a      	str	r2, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
 8001870:	460b      	mov	r3, r1
 8001872:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SD_disk_ioctl+0x1e>
 800187e:	2304      	movs	r3, #4
 8001880:	e113      	b.n	8001aaa <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001888:	79bb      	ldrb	r3, [r7, #6]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d124      	bne.n	80018d8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d012      	beq.n	80018bc <SD_disk_ioctl+0x58>
 8001896:	2b02      	cmp	r3, #2
 8001898:	dc1a      	bgt.n	80018d0 <SD_disk_ioctl+0x6c>
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <SD_disk_ioctl+0x40>
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d006      	beq.n	80018b0 <SD_disk_ioctl+0x4c>
 80018a2:	e015      	b.n	80018d0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80018a4:	f7ff fd0e 	bl	80012c4 <SD_PowerOff>
			res = RES_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80018ae:	e0fa      	b.n	8001aa6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80018b0:	f7ff fcc6 	bl	8001240 <SD_PowerOn>
			res = RES_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80018ba:	e0f4      	b.n	8001aa6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	1c5c      	adds	r4, r3, #1
 80018c0:	f7ff fd0c 	bl	80012dc <SD_CheckPower>
 80018c4:	4603      	mov	r3, r0
 80018c6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80018ce:	e0ea      	b.n	8001aa6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80018d0:	2304      	movs	r3, #4
 80018d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80018d6:	e0e6      	b.n	8001aa6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80018d8:	4b76      	ldr	r3, [pc, #472]	@ (8001ab4 <SD_disk_ioctl+0x250>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SD_disk_ioctl+0x86>
 80018e6:	2303      	movs	r3, #3
 80018e8:	e0df      	b.n	8001aaa <SD_disk_ioctl+0x246>

		SELECT();
 80018ea:	f7ff fc15 	bl	8001118 <SELECT>

		switch (ctrl)
 80018ee:	79bb      	ldrb	r3, [r7, #6]
 80018f0:	2b0d      	cmp	r3, #13
 80018f2:	f200 80c9 	bhi.w	8001a88 <SD_disk_ioctl+0x224>
 80018f6:	a201      	add	r2, pc, #4	@ (adr r2, 80018fc <SD_disk_ioctl+0x98>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	080019f3 	.word	0x080019f3
 8001900:	08001935 	.word	0x08001935
 8001904:	080019e3 	.word	0x080019e3
 8001908:	08001a89 	.word	0x08001a89
 800190c:	08001a89 	.word	0x08001a89
 8001910:	08001a89 	.word	0x08001a89
 8001914:	08001a89 	.word	0x08001a89
 8001918:	08001a89 	.word	0x08001a89
 800191c:	08001a89 	.word	0x08001a89
 8001920:	08001a89 	.word	0x08001a89
 8001924:	08001a89 	.word	0x08001a89
 8001928:	08001a05 	.word	0x08001a05
 800192c:	08001a29 	.word	0x08001a29
 8001930:	08001a4d 	.word	0x08001a4d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001934:	2100      	movs	r1, #0
 8001936:	2049      	movs	r0, #73	@ 0x49
 8001938:	f7ff fd4f 	bl	80013da <SD_SendCmd>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 80a6 	bne.w	8001a90 <SD_disk_ioctl+0x22c>
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2110      	movs	r1, #16
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fcd2 	bl	80012f4 <SD_RxDataBlock>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 809c 	beq.w	8001a90 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001958:	7b3b      	ldrb	r3, [r7, #12]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d10d      	bne.n	800197e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001962:	7d7b      	ldrb	r3, [r7, #21]
 8001964:	461a      	mov	r2, r3
 8001966:	7d3b      	ldrb	r3, [r7, #20]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b29b      	uxth	r3, r3
 800196c:	4413      	add	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	3301      	adds	r3, #1
 8001972:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001974:	8bfb      	ldrh	r3, [r7, #30]
 8001976:	029a      	lsls	r2, r3, #10
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e02d      	b.n	80019da <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800197e:	7c7b      	ldrb	r3, [r7, #17]
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	b2da      	uxtb	r2, r3
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	09db      	lsrs	r3, r3, #7
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4413      	add	r3, r2
 800198e:	b2da      	uxtb	r2, r3
 8001990:	7d7b      	ldrb	r3, [r7, #21]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	f003 0306 	and.w	r3, r3, #6
 800199a:	b2db      	uxtb	r3, r3
 800199c:	4413      	add	r3, r2
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	3302      	adds	r3, #2
 80019a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80019a6:	7d3b      	ldrb	r3, [r7, #20]
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	7cfb      	ldrb	r3, [r7, #19]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	7cbb      	ldrb	r3, [r7, #18]
 80019ba:	029b      	lsls	r3, r3, #10
 80019bc:	b29b      	uxth	r3, r3
 80019be:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3301      	adds	r3, #1
 80019ca:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80019cc:	8bfa      	ldrh	r2, [r7, #30]
 80019ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80019d2:	3b09      	subs	r3, #9
 80019d4:	409a      	lsls	r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80019e0:	e056      	b.n	8001a90 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80019f0:	e055      	b.n	8001a9e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80019f2:	f7ff fc0b 	bl	800120c <SD_ReadyWait>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2bff      	cmp	r3, #255	@ 0xff
 80019fa:	d14b      	bne.n	8001a94 <SD_disk_ioctl+0x230>
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a02:	e047      	b.n	8001a94 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a04:	2100      	movs	r1, #0
 8001a06:	2049      	movs	r0, #73	@ 0x49
 8001a08:	f7ff fce7 	bl	80013da <SD_SendCmd>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d142      	bne.n	8001a98 <SD_disk_ioctl+0x234>
 8001a12:	2110      	movs	r1, #16
 8001a14:	6a38      	ldr	r0, [r7, #32]
 8001a16:	f7ff fc6d 	bl	80012f4 <SD_RxDataBlock>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d03b      	beq.n	8001a98 <SD_disk_ioctl+0x234>
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a26:	e037      	b.n	8001a98 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a28:	2100      	movs	r1, #0
 8001a2a:	204a      	movs	r0, #74	@ 0x4a
 8001a2c:	f7ff fcd5 	bl	80013da <SD_SendCmd>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d132      	bne.n	8001a9c <SD_disk_ioctl+0x238>
 8001a36:	2110      	movs	r1, #16
 8001a38:	6a38      	ldr	r0, [r7, #32]
 8001a3a:	f7ff fc5b 	bl	80012f4 <SD_RxDataBlock>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d02b      	beq.n	8001a9c <SD_disk_ioctl+0x238>
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a4a:	e027      	b.n	8001a9c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	207a      	movs	r0, #122	@ 0x7a
 8001a50:	f7ff fcc3 	bl	80013da <SD_SendCmd>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d116      	bne.n	8001a88 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001a60:	e00b      	b.n	8001a7a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001a62:	6a3c      	ldr	r4, [r7, #32]
 8001a64:	1c63      	adds	r3, r4, #1
 8001a66:	623b      	str	r3, [r7, #32]
 8001a68:	f7ff fba6 	bl	80011b8 <SPI_RxByte>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001a70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a74:	3301      	adds	r3, #1
 8001a76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001a7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d9ef      	bls.n	8001a62 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001a88:	2304      	movs	r3, #4
 8001a8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001a8e:	e006      	b.n	8001a9e <SD_disk_ioctl+0x23a>
			break;
 8001a90:	bf00      	nop
 8001a92:	e004      	b.n	8001a9e <SD_disk_ioctl+0x23a>
			break;
 8001a94:	bf00      	nop
 8001a96:	e002      	b.n	8001a9e <SD_disk_ioctl+0x23a>
			break;
 8001a98:	bf00      	nop
 8001a9a:	e000      	b.n	8001a9e <SD_disk_ioctl+0x23a>
			break;
 8001a9c:	bf00      	nop
		}

		DESELECT();
 8001a9e:	f7ff fb49 	bl	8001134 <DESELECT>
		SPI_RxByte();
 8001aa2:	f7ff fb89 	bl	80011b8 <SPI_RxByte>
	}

	return res;
 8001aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	372c      	adds	r7, #44	@ 0x2c
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000000 	.word	0x20000000

08001ab8 <debugMessage>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void debugMessage(char *format,...)
{
 8001ab8:	b40f      	push	{r0, r1, r2, r3}
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b0cc      	sub	sp, #304	@ 0x130
 8001abe:	af00      	add	r7, sp, #0
	char str[300];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8001ac0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001ac4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ac8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001acc:	601a      	str	r2, [r3, #0]
	vsprintf(str, format,args);
 8001ace:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ad2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ad6:	1d38      	adds	r0, r7, #4
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8001ade:	f006 fbbf 	bl	8008260 <vsiprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fb93 	bl	8000210 <strlen>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	1d39      	adds	r1, r7, #4
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001af4:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <debugMessage+0x54>)
 8001af6:	f002 f937 	bl	8003d68 <HAL_UART_Transmit>
	va_end(args);

}
 8001afa:	bf00      	nop
 8001afc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001b00:	46bd      	mov	sp, r7
 8001b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b06:	b004      	add	sp, #16
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20002278 	.word	0x20002278

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b14:	f000 fb24 	bl	8002160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b18:	f000 f868 	bl	8001bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1c:	f000 f938 	bl	8001d90 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b20:	f000 f8d6 	bl	8001cd0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001b24:	f000 f90a 	bl	8001d3c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001b28:	f002 fcda 	bl	80044e0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SDCardIsCapacity();
 8001b2c:	f7ff f86a 	bl	8000c04 <SDCardIsCapacity>
	HAL_Delay(100);
 8001b30:	2064      	movs	r0, #100	@ 0x64
 8001b32:	f000 fb87 	bl	8002244 <HAL_Delay>

  createSDFile(file);
 8001b36:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <main+0xc8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f8d4 	bl	8000ce8 <createSDFile>
	HAL_Delay(100);
 8001b40:	2064      	movs	r0, #100	@ 0x64
 8001b42:	f000 fb7f 	bl	8002244 <HAL_Delay>

  createAndWriteSDFile(file,data);
 8001b46:	4b24      	ldr	r3, [pc, #144]	@ (8001bd8 <main+0xc8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a24      	ldr	r2, [pc, #144]	@ (8001bdc <main+0xcc>)
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff f90d 	bl	8000d70 <createAndWriteSDFile>
	HAL_Delay(100);
 8001b56:	2064      	movs	r0, #100	@ 0x64
 8001b58:	f000 fb74 	bl	8002244 <HAL_Delay>



  //LoggerSDFile(file2, datas);
  createAndWriteSDFile(file2,datas);
 8001b5c:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <main+0xd0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a20      	ldr	r2, [pc, #128]	@ (8001be4 <main+0xd4>)
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f902 	bl	8000d70 <createAndWriteSDFile>
	HAL_Delay(100);
 8001b6c:	2064      	movs	r0, #100	@ 0x64
 8001b6e:	f000 fb69 	bl	8002244 <HAL_Delay>

  LoggerSDFile("fileName.txt", datas);
 8001b72:	4b1c      	ldr	r3, [pc, #112]	@ (8001be4 <main+0xd4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	481b      	ldr	r0, [pc, #108]	@ (8001be8 <main+0xd8>)
 8001b7a:	f7ff f931 	bl	8000de0 <LoggerSDFile>
	HAL_Delay(100);
 8001b7e:	2064      	movs	r0, #100	@ 0x64
 8001b80:	f000 fb60 	bl	8002244 <HAL_Delay>

  readSDFileData("fileName.txt");
 8001b84:	4818      	ldr	r0, [pc, #96]	@ (8001be8 <main+0xd8>)
 8001b86:	f7ff f9a7 	bl	8000ed8 <readSDFileData>
	HAL_Delay(100);
 8001b8a:	2064      	movs	r0, #100	@ 0x64
 8001b8c:	f000 fb5a 	bl	8002244 <HAL_Delay>

  readSDFileData(file2);
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <main+0xd0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f99f 	bl	8000ed8 <readSDFileData>
	HAL_Delay(100);
 8001b9a:	2064      	movs	r0, #100	@ 0x64
 8001b9c:	f000 fb52 	bl	8002244 <HAL_Delay>

  SDCardIsCapacity();
 8001ba0:	f7ff f830 	bl	8000c04 <SDCardIsCapacity>
	HAL_Delay(100);
 8001ba4:	2064      	movs	r0, #100	@ 0x64
 8001ba6:	f000 fb4d 	bl	8002244 <HAL_Delay>

  removingSDFile(file);
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <main+0xc8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fa78 	bl	80010a4 <removingSDFile>
	HAL_Delay(100);
 8001bb4:	2064      	movs	r0, #100	@ 0x64
 8001bb6:	f000 fb45 	bl	8002244 <HAL_Delay>

  removingSDFile(file2);
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <main+0xd0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fa70 	bl	80010a4 <removingSDFile>
	HAL_Delay(100);
 8001bc4:	2064      	movs	r0, #100	@ 0x64
 8001bc6:	f000 fb3d 	bl	8002244 <HAL_Delay>

  SDCardIsCapacity();
 8001bca:	f7ff f81b 	bl	8000c04 <SDCardIsCapacity>

	HAL_Delay(100);
 8001bce:	2064      	movs	r0, #100	@ 0x64
 8001bd0:	f000 fb38 	bl	8002244 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <main+0xc4>
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	20002218 	.word	0x20002218
 8001be0:	20000008 	.word	0x20000008
 8001be4:	2000221c 	.word	0x2000221c
 8001be8:	08008e5c 	.word	0x08008e5c

08001bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b094      	sub	sp, #80	@ 0x50
 8001bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	2234      	movs	r2, #52	@ 0x34
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f006 fb3a 	bl	8008274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c00:	f107 0308 	add.w	r3, r7, #8
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc8 <SystemClock_Config+0xdc>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc8 <SystemClock_Config+0xdc>)
 8001c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c20:	4b29      	ldr	r3, [pc, #164]	@ (8001cc8 <SystemClock_Config+0xdc>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4b26      	ldr	r3, [pc, #152]	@ (8001ccc <SystemClock_Config+0xe0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a25      	ldr	r2, [pc, #148]	@ (8001ccc <SystemClock_Config+0xe0>)
 8001c36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <SystemClock_Config+0xe0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c52:	2302      	movs	r3, #2
 8001c54:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c60:	23b4      	movs	r3, #180	@ 0xb4
 8001c62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c64:	2302      	movs	r3, #2
 8001c66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 f937 	bl	8002ee8 <HAL_RCC_OscConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c80:	f000 f8d6 	bl	8001e30 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c84:	f000 fd96 	bl	80027b4 <HAL_PWREx_EnableOverDrive>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c8e:	f000 f8cf 	bl	8001e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c92:	230f      	movs	r3, #15
 8001c94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c96:	2302      	movs	r3, #2
 8001c98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c9e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	2105      	movs	r1, #5
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fdcf 	bl	8002854 <HAL_RCC_ClockConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001cbc:	f000 f8b8 	bl	8001e30 <Error_Handler>
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3750      	adds	r7, #80	@ 0x50
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40007000 	.word	0x40007000

08001cd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001cd6:	4a18      	ldr	r2, [pc, #96]	@ (8001d38 <MX_SPI1_Init+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cda:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001cdc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ce0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d02:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001d04:	2218      	movs	r2, #24
 8001d06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d08:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d0e:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d14:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001d1c:	220a      	movs	r2, #10
 8001d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d20:	4804      	ldr	r0, [pc, #16]	@ (8001d34 <MX_SPI1_Init+0x64>)
 8001d22:	f001 fb7f 	bl	8003424 <HAL_SPI_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d2c:	f000 f880 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20002220 	.word	0x20002220
 8001d38:	40013000 	.word	0x40013000

08001d3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	@ (8001d8c <MX_USART1_UART_Init+0x50>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d74:	f001 ffa8 	bl	8003cc8 <HAL_UART_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d7e:	f000 f857 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20002278 	.word	0x20002278
 8001d8c:	40011000 	.word	0x40011000

08001d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	4b1f      	ldr	r3, [pc, #124]	@ (8001e28 <MX_GPIO_Init+0x98>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a1e      	ldr	r2, [pc, #120]	@ (8001e28 <MX_GPIO_Init+0x98>)
 8001db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <MX_GPIO_Init+0x98>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <MX_GPIO_Init+0x98>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	4a17      	ldr	r2, [pc, #92]	@ (8001e28 <MX_GPIO_Init+0x98>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <MX_GPIO_Init+0x98>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <MX_GPIO_Init+0x98>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a10      	ldr	r2, [pc, #64]	@ (8001e28 <MX_GPIO_Init+0x98>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <MX_GPIO_Init+0x98>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	480b      	ldr	r0, [pc, #44]	@ (8001e2c <MX_GPIO_Init+0x9c>)
 8001e00:	f000 fcbe 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001e04:	2310      	movs	r3, #16
 8001e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4804      	ldr	r0, [pc, #16]	@ (8001e2c <MX_GPIO_Init+0x9c>)
 8001e1c:	f000 fb1c 	bl	8002458 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020800 	.word	0x40020800

08001e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
}
 8001e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <Error_Handler+0x8>

08001e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e52:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	4a08      	ldr	r2, [pc, #32]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800

08001e8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	@ 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	@ (8001f10 <HAL_SPI_MspInit+0x84>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d12b      	bne.n	8001f06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <HAL_SPI_MspInit+0x88>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	4a17      	ldr	r2, [pc, #92]	@ (8001f14 <HAL_SPI_MspInit+0x88>)
 8001eb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_SPI_MspInit+0x88>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <HAL_SPI_MspInit+0x88>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	4a10      	ldr	r2, [pc, #64]	@ (8001f14 <HAL_SPI_MspInit+0x88>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eda:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <HAL_SPI_MspInit+0x88>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ee6:	23e0      	movs	r3, #224	@ 0xe0
 8001ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <HAL_SPI_MspInit+0x8c>)
 8001f02:	f000 faa9 	bl	8002458 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	@ 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40013000 	.word	0x40013000
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020000 	.word	0x40020000

08001f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	@ 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a19      	ldr	r2, [pc, #100]	@ (8001fa0 <HAL_UART_MspInit+0x84>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d12c      	bne.n	8001f98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	4b18      	ldr	r3, [pc, #96]	@ (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	4a17      	ldr	r2, [pc, #92]	@ (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f48:	f043 0310 	orr.w	r3, r3, #16
 8001f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	4a10      	ldr	r2, [pc, #64]	@ (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	4805      	ldr	r0, [pc, #20]	@ (8001fa8 <HAL_UART_MspInit+0x8c>)
 8001f94:	f000 fa60 	bl	8002458 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	@ 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40011000 	.word	0x40011000
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020000 	.word	0x40020000

08001fac <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <SDTimer_Handler+0x40>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d006      	beq.n	8001fc8 <SDTimer_Handler+0x1c>
    Timer1--;
 8001fba:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <SDTimer_Handler+0x40>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <SDTimer_Handler+0x40>)
 8001fc6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <SDTimer_Handler+0x44>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <SDTimer_Handler+0x34>
    Timer2--;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <SDTimer_Handler+0x44>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <SDTimer_Handler+0x44>)
 8001fde:	701a      	strb	r2, [r3, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	200022c1 	.word	0x200022c1
 8001ff0:	200022c2 	.word	0x200022c2

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <NMI_Handler+0x4>

08001ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <MemManage_Handler+0x4>

0800200c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <UsageFault_Handler+0x4>

0800201c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 800204c:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <SysTick_Handler+0x30>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	3301      	adds	r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <SysTick_Handler+0x30>)
 8002058:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800205a:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <SysTick_Handler+0x30>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b09      	cmp	r3, #9
 8002062:	d904      	bls.n	800206e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002064:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <SysTick_Handler+0x30>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800206a:	f7ff ff9f 	bl	8001fac <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206e:	f000 f8c9 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200022c0 	.word	0x200022c0

0800207c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002084:	4a14      	ldr	r2, [pc, #80]	@ (80020d8 <_sbrk+0x5c>)
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <_sbrk+0x60>)
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002090:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <_sbrk+0x64>)
 800209a:	4a12      	ldr	r2, [pc, #72]	@ (80020e4 <_sbrk+0x68>)
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209e:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d207      	bcs.n	80020bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ac:	f006 f8ea 	bl	8008284 <__errno>
 80020b0:	4603      	mov	r3, r0
 80020b2:	220c      	movs	r2, #12
 80020b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020ba:	e009      	b.n	80020d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c2:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	4a05      	ldr	r2, [pc, #20]	@ (80020e0 <_sbrk+0x64>)
 80020cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20020000 	.word	0x20020000
 80020dc:	00000400 	.word	0x00000400
 80020e0:	200022c4 	.word	0x200022c4
 80020e4:	20002650 	.word	0x20002650

080020e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ec:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <SystemInit+0x20>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f2:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <SystemInit+0x20>)
 80020f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800210c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002144 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002110:	f7ff ffea 	bl	80020e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002114:	480c      	ldr	r0, [pc, #48]	@ (8002148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002116:	490d      	ldr	r1, [pc, #52]	@ (800214c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002118:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800211c:	e002      	b.n	8002124 <LoopCopyDataInit>

0800211e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002122:	3304      	adds	r3, #4

08002124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002128:	d3f9      	bcc.n	800211e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800212c:	4c0a      	ldr	r4, [pc, #40]	@ (8002158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002130:	e001      	b.n	8002136 <LoopFillZerobss>

08002132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002134:	3204      	adds	r2, #4

08002136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002138:	d3fb      	bcc.n	8002132 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800213a:	f006 f8a9 	bl	8008290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213e:	f7ff fce7 	bl	8001b10 <main>
  bx  lr    
 8002142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800214c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002150:	08009350 	.word	0x08009350
  ldr r2, =_sbss
 8002154:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002158:	20002650 	.word	0x20002650

0800215c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800215c:	e7fe      	b.n	800215c <ADC_IRQHandler>
	...

08002160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002164:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0d      	ldr	r2, [pc, #52]	@ (80021a0 <HAL_Init+0x40>)
 800216a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800216e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <HAL_Init+0x40>)
 8002176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800217a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a07      	ldr	r2, [pc, #28]	@ (80021a0 <HAL_Init+0x40>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002188:	2003      	movs	r0, #3
 800218a:	f000 f931 	bl	80023f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218e:	200f      	movs	r0, #15
 8002190:	f000 f808 	bl	80021a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002194:	f7ff fe52 	bl	8001e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40023c00 	.word	0x40023c00

080021a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <HAL_InitTick+0x54>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_InitTick+0x58>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f93b 	bl	800243e <HAL_SYSTICK_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00e      	b.n	80021f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d80a      	bhi.n	80021ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021e0:	f000 f911 	bl	8002406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e4:	4a06      	ldr	r2, [pc, #24]	@ (8002200 <HAL_InitTick+0x5c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000000c 	.word	0x2000000c
 80021fc:	20000014 	.word	0x20000014
 8002200:	20000010 	.word	0x20000010

08002204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_IncTick+0x20>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_IncTick+0x24>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <HAL_IncTick+0x24>)
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000014 	.word	0x20000014
 8002228:	200022c8 	.word	0x200022c8

0800222c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b03      	ldr	r3, [pc, #12]	@ (8002240 <HAL_GetTick+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	200022c8 	.word	0x200022c8

08002244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff ffee 	bl	800222c <HAL_GetTick>
 8002250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800225c:	d005      	beq.n	800226a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_Delay+0x44>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800226a:	bf00      	nop
 800226c:	f7ff ffde 	bl	800222c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	429a      	cmp	r2, r3
 800227a:	d8f7      	bhi.n	800226c <HAL_Delay+0x28>
  {
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000014 	.word	0x20000014

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	@ (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db0a      	blt.n	800231a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	490c      	ldr	r1, [pc, #48]	@ (800233c <__NVIC_SetPriority+0x4c>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	440b      	add	r3, r1
 8002314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002318:	e00a      	b.n	8002330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4908      	ldr	r1, [pc, #32]	@ (8002340 <__NVIC_SetPriority+0x50>)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3b04      	subs	r3, #4
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	440b      	add	r3, r1
 800232e:	761a      	strb	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000e100 	.word	0xe000e100
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	@ 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf28      	it	cs
 8002362:	2304      	movcs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3304      	adds	r3, #4
 800236a:	2b06      	cmp	r3, #6
 800236c:	d902      	bls.n	8002374 <NVIC_EncodePriority+0x30>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3b03      	subs	r3, #3
 8002372:	e000      	b.n	8002376 <NVIC_EncodePriority+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43d9      	mvns	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	4313      	orrs	r3, r2
         );
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	@ 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023bc:	d301      	bcc.n	80023c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023be:	2301      	movs	r3, #1
 80023c0:	e00f      	b.n	80023e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <SysTick_Config+0x40>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ca:	210f      	movs	r1, #15
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023d0:	f7ff ff8e 	bl	80022f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <SysTick_Config+0x40>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023da:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <SysTick_Config+0x40>)
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	e000e010 	.word	0xe000e010

080023f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ff47 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002418:	f7ff ff5c 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 800241c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	6978      	ldr	r0, [r7, #20]
 8002424:	f7ff ff8e 	bl	8002344 <NVIC_EncodePriority>
 8002428:	4602      	mov	r2, r0
 800242a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff5d 	bl	80022f0 <__NVIC_SetPriority>
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ffb0 	bl	80023ac <SysTick_Config>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	@ 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e165      	b.n	8002740 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	f040 8154 	bne.w	800273a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d005      	beq.n	80024aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d130      	bne.n	800250c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 0201 	and.w	r2, r3, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b03      	cmp	r3, #3
 8002516:	d017      	beq.n	8002548 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d123      	bne.n	800259c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	08da      	lsrs	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220f      	movs	r2, #15
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80ae 	beq.w	800273a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002758 <HAL_GPIO_Init+0x300>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002758 <HAL_GPIO_Init+0x300>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002758 <HAL_GPIO_Init+0x300>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025fa:	4a58      	ldr	r2, [pc, #352]	@ (800275c <HAL_GPIO_Init+0x304>)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	220f      	movs	r2, #15
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4f      	ldr	r2, [pc, #316]	@ (8002760 <HAL_GPIO_Init+0x308>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d025      	beq.n	8002672 <HAL_GPIO_Init+0x21a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4e      	ldr	r2, [pc, #312]	@ (8002764 <HAL_GPIO_Init+0x30c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01f      	beq.n	800266e <HAL_GPIO_Init+0x216>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4d      	ldr	r2, [pc, #308]	@ (8002768 <HAL_GPIO_Init+0x310>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d019      	beq.n	800266a <HAL_GPIO_Init+0x212>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4c      	ldr	r2, [pc, #304]	@ (800276c <HAL_GPIO_Init+0x314>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_GPIO_Init+0x20e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4b      	ldr	r2, [pc, #300]	@ (8002770 <HAL_GPIO_Init+0x318>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00d      	beq.n	8002662 <HAL_GPIO_Init+0x20a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4a      	ldr	r2, [pc, #296]	@ (8002774 <HAL_GPIO_Init+0x31c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x206>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a49      	ldr	r2, [pc, #292]	@ (8002778 <HAL_GPIO_Init+0x320>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_GPIO_Init+0x202>
 8002656:	2306      	movs	r3, #6
 8002658:	e00c      	b.n	8002674 <HAL_GPIO_Init+0x21c>
 800265a:	2307      	movs	r3, #7
 800265c:	e00a      	b.n	8002674 <HAL_GPIO_Init+0x21c>
 800265e:	2305      	movs	r3, #5
 8002660:	e008      	b.n	8002674 <HAL_GPIO_Init+0x21c>
 8002662:	2304      	movs	r3, #4
 8002664:	e006      	b.n	8002674 <HAL_GPIO_Init+0x21c>
 8002666:	2303      	movs	r3, #3
 8002668:	e004      	b.n	8002674 <HAL_GPIO_Init+0x21c>
 800266a:	2302      	movs	r3, #2
 800266c:	e002      	b.n	8002674 <HAL_GPIO_Init+0x21c>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_GPIO_Init+0x21c>
 8002672:	2300      	movs	r3, #0
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	f002 0203 	and.w	r2, r2, #3
 800267a:	0092      	lsls	r2, r2, #2
 800267c:	4093      	lsls	r3, r2
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002684:	4935      	ldr	r1, [pc, #212]	@ (800275c <HAL_GPIO_Init+0x304>)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	3302      	adds	r3, #2
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002692:	4b3a      	ldr	r3, [pc, #232]	@ (800277c <HAL_GPIO_Init+0x324>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026b6:	4a31      	ldr	r2, [pc, #196]	@ (800277c <HAL_GPIO_Init+0x324>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026bc:	4b2f      	ldr	r3, [pc, #188]	@ (800277c <HAL_GPIO_Init+0x324>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e0:	4a26      	ldr	r2, [pc, #152]	@ (800277c <HAL_GPIO_Init+0x324>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026e6:	4b25      	ldr	r3, [pc, #148]	@ (800277c <HAL_GPIO_Init+0x324>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800270a:	4a1c      	ldr	r2, [pc, #112]	@ (800277c <HAL_GPIO_Init+0x324>)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002710:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <HAL_GPIO_Init+0x324>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002734:	4a11      	ldr	r2, [pc, #68]	@ (800277c <HAL_GPIO_Init+0x324>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3301      	adds	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b0f      	cmp	r3, #15
 8002744:	f67f ae96 	bls.w	8002474 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3724      	adds	r7, #36	@ 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	40013800 	.word	0x40013800
 8002760:	40020000 	.word	0x40020000
 8002764:	40020400 	.word	0x40020400
 8002768:	40020800 	.word	0x40020800
 800276c:	40020c00 	.word	0x40020c00
 8002770:	40021000 	.word	0x40021000
 8002774:	40021400 	.word	0x40021400
 8002778:	40021800 	.word	0x40021800
 800277c:	40013c00 	.word	0x40013c00

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800279c:	e003      	b.n	80027a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	041a      	lsls	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	619a      	str	r2, [r3, #24]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	4b20      	ldr	r3, [pc, #128]	@ (8002844 <HAL_PWREx_EnableOverDrive+0x90>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002844 <HAL_PWREx_EnableOverDrive+0x90>)
 80027c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <HAL_PWREx_EnableOverDrive+0x90>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027da:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_PWREx_EnableOverDrive+0x94>)
 80027dc:	2201      	movs	r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e0:	f7ff fd24 	bl	800222c <HAL_GetTick>
 80027e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027e6:	e009      	b.n	80027fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027e8:	f7ff fd20 	bl	800222c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027f6:	d901      	bls.n	80027fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e01f      	b.n	800283c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027fc:	4b13      	ldr	r3, [pc, #76]	@ (800284c <HAL_PWREx_EnableOverDrive+0x98>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002808:	d1ee      	bne.n	80027e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800280a:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <HAL_PWREx_EnableOverDrive+0x9c>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002810:	f7ff fd0c 	bl	800222c <HAL_GetTick>
 8002814:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002816:	e009      	b.n	800282c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002818:	f7ff fd08 	bl	800222c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002826:	d901      	bls.n	800282c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e007      	b.n	800283c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800282c:	4b07      	ldr	r3, [pc, #28]	@ (800284c <HAL_PWREx_EnableOverDrive+0x98>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002834:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002838:	d1ee      	bne.n	8002818 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	420e0040 	.word	0x420e0040
 800284c:	40007000 	.word	0x40007000
 8002850:	420e0044 	.word	0x420e0044

08002854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0cc      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b68      	ldr	r3, [pc, #416]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d90c      	bls.n	8002890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b65      	ldr	r3, [pc, #404]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b63      	ldr	r3, [pc, #396]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b8      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a8:	4b59      	ldr	r3, [pc, #356]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a58      	ldr	r2, [pc, #352]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c0:	4b53      	ldr	r3, [pc, #332]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a52      	ldr	r2, [pc, #328]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4b50      	ldr	r3, [pc, #320]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	494d      	ldr	r1, [pc, #308]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d044      	beq.n	8002974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b47      	ldr	r3, [pc, #284]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d119      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d003      	beq.n	8002912 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	2b03      	cmp	r3, #3
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b3f      	ldr	r3, [pc, #252]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	4b3b      	ldr	r3, [pc, #236]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e067      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002932:	4b37      	ldr	r3, [pc, #220]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 0203 	bic.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4934      	ldr	r1, [pc, #208]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002944:	f7ff fc72 	bl	800222c <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7ff fc6e 	bl	800222c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e04f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 020c 	and.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d1eb      	bne.n	800294c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002974:	4b25      	ldr	r3, [pc, #148]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d20c      	bcs.n	800299c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b22      	ldr	r3, [pc, #136]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b20      	ldr	r3, [pc, #128]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e032      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4916      	ldr	r1, [pc, #88]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c6:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	490e      	ldr	r1, [pc, #56]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f855 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	490a      	ldr	r1, [pc, #40]	@ (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	fa22 f303 	lsr.w	r3, r2, r3
 80029f2:	4a09      	ldr	r2, [pc, #36]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029f6:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fbd2 	bl	80021a4 <HAL_InitTick>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023c00 	.word	0x40023c00
 8002a10:	40023800 	.word	0x40023800
 8002a14:	08008eb4 	.word	0x08008eb4
 8002a18:	2000000c 	.word	0x2000000c
 8002a1c:	20000010 	.word	0x20000010

08002a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a24:	4b03      	ldr	r3, [pc, #12]	@ (8002a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	2000000c 	.word	0x2000000c

08002a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a3c:	f7ff fff0 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	0a9b      	lsrs	r3, r3, #10
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4903      	ldr	r1, [pc, #12]	@ (8002a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	08008ec4 	.word	0x08008ec4

08002a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a64:	f7ff ffdc 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	0b5b      	lsrs	r3, r3, #13
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4903      	ldr	r1, [pc, #12]	@ (8002a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a76:	5ccb      	ldrb	r3, [r1, r3]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40023800 	.word	0x40023800
 8002a84:	08008ec4 	.word	0x08008ec4

08002a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a8c:	b0ae      	sub	sp, #184	@ 0xb8
 8002a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aae:	4bcb      	ldr	r3, [pc, #812]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	f200 8206 	bhi.w	8002ec8 <HAL_RCC_GetSysClockFreq+0x440>
 8002abc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002af9 	.word	0x08002af9
 8002ac8:	08002ec9 	.word	0x08002ec9
 8002acc:	08002ec9 	.word	0x08002ec9
 8002ad0:	08002ec9 	.word	0x08002ec9
 8002ad4:	08002b01 	.word	0x08002b01
 8002ad8:	08002ec9 	.word	0x08002ec9
 8002adc:	08002ec9 	.word	0x08002ec9
 8002ae0:	08002ec9 	.word	0x08002ec9
 8002ae4:	08002b09 	.word	0x08002b09
 8002ae8:	08002ec9 	.word	0x08002ec9
 8002aec:	08002ec9 	.word	0x08002ec9
 8002af0:	08002ec9 	.word	0x08002ec9
 8002af4:	08002cf9 	.word	0x08002cf9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4bb9      	ldr	r3, [pc, #740]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002afa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002afe:	e1e7      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b00:	4bb8      	ldr	r3, [pc, #736]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b06:	e1e3      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b08:	4bb4      	ldr	r3, [pc, #720]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b14:	4bb1      	ldr	r3, [pc, #708]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d071      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b20:	4bae      	ldr	r3, [pc, #696]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b2c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b46:	4622      	mov	r2, r4
 8002b48:	462b      	mov	r3, r5
 8002b4a:	f04f 0000 	mov.w	r0, #0
 8002b4e:	f04f 0100 	mov.w	r1, #0
 8002b52:	0159      	lsls	r1, r3, #5
 8002b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b58:	0150      	lsls	r0, r2, #5
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4621      	mov	r1, r4
 8002b60:	1a51      	subs	r1, r2, r1
 8002b62:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b64:	4629      	mov	r1, r5
 8002b66:	eb63 0301 	sbc.w	r3, r3, r1
 8002b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b78:	4649      	mov	r1, r9
 8002b7a:	018b      	lsls	r3, r1, #6
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b82:	4641      	mov	r1, r8
 8002b84:	018a      	lsls	r2, r1, #6
 8002b86:	4641      	mov	r1, r8
 8002b88:	1a51      	subs	r1, r2, r1
 8002b8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b8c:	4649      	mov	r1, r9
 8002b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	00cb      	lsls	r3, r1, #3
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002baa:	4641      	mov	r1, r8
 8002bac:	00ca      	lsls	r2, r1, #3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4622      	mov	r2, r4
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bba:	462b      	mov	r3, r5
 8002bbc:	460a      	mov	r2, r1
 8002bbe:	eb42 0303 	adc.w	r3, r2, r3
 8002bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	024b      	lsls	r3, r1, #9
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bda:	4621      	mov	r1, r4
 8002bdc:	024a      	lsls	r2, r1, #9
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bf0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002bf4:	f7fd fe6a 	bl	80008cc <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c02:	e067      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c04:	4b75      	ldr	r3, [pc, #468]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c10:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002c14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c1e:	2300      	movs	r3, #0
 8002c20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002c26:	4622      	mov	r2, r4
 8002c28:	462b      	mov	r3, r5
 8002c2a:	f04f 0000 	mov.w	r0, #0
 8002c2e:	f04f 0100 	mov.w	r1, #0
 8002c32:	0159      	lsls	r1, r3, #5
 8002c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c38:	0150      	lsls	r0, r2, #5
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4621      	mov	r1, r4
 8002c40:	1a51      	subs	r1, r2, r1
 8002c42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002c44:	4629      	mov	r1, r5
 8002c46:	eb63 0301 	sbc.w	r3, r3, r1
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002c58:	4649      	mov	r1, r9
 8002c5a:	018b      	lsls	r3, r1, #6
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c62:	4641      	mov	r1, r8
 8002c64:	018a      	lsls	r2, r1, #6
 8002c66:	4641      	mov	r1, r8
 8002c68:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c6c:	4649      	mov	r1, r9
 8002c6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c86:	4692      	mov	sl, r2
 8002c88:	469b      	mov	fp, r3
 8002c8a:	4623      	mov	r3, r4
 8002c8c:	eb1a 0303 	adds.w	r3, sl, r3
 8002c90:	623b      	str	r3, [r7, #32]
 8002c92:	462b      	mov	r3, r5
 8002c94:	eb4b 0303 	adc.w	r3, fp, r3
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	028b      	lsls	r3, r1, #10
 8002caa:	4621      	mov	r1, r4
 8002cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	028a      	lsls	r2, r1, #10
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cc0:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002cc6:	f7fd fe01 	bl	80008cc <__aeabi_uldivmod>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4613      	mov	r3, r2
 8002cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cd4:	4b41      	ldr	r3, [pc, #260]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cf6:	e0eb      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf8:	4b38      	ldr	r3, [pc, #224]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d04:	4b35      	ldr	r3, [pc, #212]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d06b      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d10:	4b32      	ldr	r3, [pc, #200]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	2200      	movs	r2, #0
 8002d18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d22:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d24:	2300      	movs	r3, #0
 8002d26:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	462b      	mov	r3, r5
 8002d30:	f04f 0000 	mov.w	r0, #0
 8002d34:	f04f 0100 	mov.w	r1, #0
 8002d38:	0159      	lsls	r1, r3, #5
 8002d3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d3e:	0150      	lsls	r0, r2, #5
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4621      	mov	r1, r4
 8002d46:	1a51      	subs	r1, r2, r1
 8002d48:	61b9      	str	r1, [r7, #24]
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d5e:	4659      	mov	r1, fp
 8002d60:	018b      	lsls	r3, r1, #6
 8002d62:	4651      	mov	r1, sl
 8002d64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d68:	4651      	mov	r1, sl
 8002d6a:	018a      	lsls	r2, r1, #6
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	ebb2 0801 	subs.w	r8, r2, r1
 8002d72:	4659      	mov	r1, fp
 8002d74:	eb63 0901 	sbc.w	r9, r3, r1
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d8c:	4690      	mov	r8, r2
 8002d8e:	4699      	mov	r9, r3
 8002d90:	4623      	mov	r3, r4
 8002d92:	eb18 0303 	adds.w	r3, r8, r3
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	462b      	mov	r3, r5
 8002d9a:	eb49 0303 	adc.w	r3, r9, r3
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002dac:	4629      	mov	r1, r5
 8002dae:	024b      	lsls	r3, r1, #9
 8002db0:	4621      	mov	r1, r4
 8002db2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db6:	4621      	mov	r1, r4
 8002db8:	024a      	lsls	r2, r1, #9
 8002dba:	4610      	mov	r0, r2
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dc6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002dc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dcc:	f7fd fd7e 	bl	80008cc <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dda:	e065      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x420>
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	00f42400 	.word	0x00f42400
 8002de4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	2200      	movs	r2, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	4611      	mov	r1, r2
 8002df4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dfe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002e02:	4642      	mov	r2, r8
 8002e04:	464b      	mov	r3, r9
 8002e06:	f04f 0000 	mov.w	r0, #0
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	0159      	lsls	r1, r3, #5
 8002e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e14:	0150      	lsls	r0, r2, #5
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	1a51      	subs	r1, r2, r1
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	4649      	mov	r1, r9
 8002e22:	eb63 0301 	sbc.w	r3, r3, r1
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e34:	4659      	mov	r1, fp
 8002e36:	018b      	lsls	r3, r1, #6
 8002e38:	4651      	mov	r1, sl
 8002e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e3e:	4651      	mov	r1, sl
 8002e40:	018a      	lsls	r2, r1, #6
 8002e42:	4651      	mov	r1, sl
 8002e44:	1a54      	subs	r4, r2, r1
 8002e46:	4659      	mov	r1, fp
 8002e48:	eb63 0501 	sbc.w	r5, r3, r1
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	00eb      	lsls	r3, r5, #3
 8002e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e5a:	00e2      	lsls	r2, r4, #3
 8002e5c:	4614      	mov	r4, r2
 8002e5e:	461d      	mov	r5, r3
 8002e60:	4643      	mov	r3, r8
 8002e62:	18e3      	adds	r3, r4, r3
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	464b      	mov	r3, r9
 8002e68:	eb45 0303 	adc.w	r3, r5, r3
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	028b      	lsls	r3, r1, #10
 8002e7e:	4621      	mov	r1, r4
 8002e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e84:	4621      	mov	r1, r4
 8002e86:	028a      	lsls	r2, r1, #10
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e90:	2200      	movs	r2, #0
 8002e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e94:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e9a:	f7fd fd17 	bl	80008cc <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0f1b      	lsrs	r3, r3, #28
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ec6:	e003      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ece:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	37b8      	adds	r7, #184	@ 0xb8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	00f42400 	.word	0x00f42400

08002ee8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e28d      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8083 	beq.w	800300e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f08:	4b94      	ldr	r3, [pc, #592]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d019      	beq.n	8002f48 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f14:	4b91      	ldr	r3, [pc, #580]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f20:	4b8e      	ldr	r3, [pc, #568]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f2c:	d00c      	beq.n	8002f48 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4b8b      	ldr	r3, [pc, #556]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d112      	bne.n	8002f60 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3a:	4b88      	ldr	r3, [pc, #544]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f46:	d10b      	bne.n	8002f60 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	4b84      	ldr	r3, [pc, #528]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05b      	beq.n	800300c <HAL_RCC_OscConfig+0x124>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d157      	bne.n	800300c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e25a      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x90>
 8002f6a:	4b7c      	ldr	r3, [pc, #496]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a7b      	ldr	r2, [pc, #492]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e01d      	b.n	8002fb4 <HAL_RCC_OscConfig+0xcc>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0xb4>
 8002f82:	4b76      	ldr	r3, [pc, #472]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a75      	ldr	r2, [pc, #468]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b73      	ldr	r3, [pc, #460]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a72      	ldr	r2, [pc, #456]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0xcc>
 8002f9c:	4b6f      	ldr	r3, [pc, #444]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a6e      	ldr	r2, [pc, #440]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a6b      	ldr	r2, [pc, #428]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7ff f936 	bl	800222c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7ff f932 	bl	800222c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	@ 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e21f      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	4b61      	ldr	r3, [pc, #388]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xdc>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7ff f922 	bl	800222c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fec:	f7ff f91e 	bl	800222c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	@ 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e20b      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	4b57      	ldr	r3, [pc, #348]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x104>
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d06f      	beq.n	80030fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800301a:	4b50      	ldr	r3, [pc, #320]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b00      	cmp	r3, #0
 8003024:	d017      	beq.n	8003056 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003026:	4b4d      	ldr	r3, [pc, #308]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
        || \
 800302e:	2b08      	cmp	r3, #8
 8003030:	d105      	bne.n	800303e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003032:	4b4a      	ldr	r3, [pc, #296]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	4b47      	ldr	r3, [pc, #284]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d11c      	bne.n	8003084 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304a:	4b44      	ldr	r3, [pc, #272]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	4b41      	ldr	r3, [pc, #260]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_RCC_OscConfig+0x186>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e1d3      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306e:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4937      	ldr	r1, [pc, #220]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	e03a      	b.n	80030fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800308c:	4b34      	ldr	r3, [pc, #208]	@ (8003160 <HAL_RCC_OscConfig+0x278>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7ff f8cb 	bl	800222c <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309a:	f7ff f8c7 	bl	800222c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e1b4      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ac:	4b2b      	ldr	r3, [pc, #172]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b8:	4b28      	ldr	r3, [pc, #160]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4925      	ldr	r1, [pc, #148]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]
 80030cc:	e015      	b.n	80030fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ce:	4b24      	ldr	r3, [pc, #144]	@ (8003160 <HAL_RCC_OscConfig+0x278>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7ff f8aa 	bl	800222c <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030dc:	f7ff f8a6 	bl	800222c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e193      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ee:	4b1b      	ldr	r3, [pc, #108]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d036      	beq.n	8003174 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d016      	beq.n	800313c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310e:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8003110:	2201      	movs	r2, #1
 8003112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7ff f88a 	bl	800222c <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800311c:	f7ff f886 	bl	800222c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e173      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312e:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <HAL_RCC_OscConfig+0x274>)
 8003130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x234>
 800313a:	e01b      	b.n	8003174 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800313c:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003142:	f7ff f873 	bl	800222c <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	e00e      	b.n	8003168 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314a:	f7ff f86f 	bl	800222c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d907      	bls.n	8003168 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e15c      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
 800315c:	40023800 	.word	0x40023800
 8003160:	42470000 	.word	0x42470000
 8003164:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	4b8a      	ldr	r3, [pc, #552]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800316a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1ea      	bne.n	800314a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8097 	beq.w	80032b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003186:	4b83      	ldr	r3, [pc, #524]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10f      	bne.n	80031b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	4b7f      	ldr	r3, [pc, #508]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	4a7e      	ldr	r2, [pc, #504]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800319c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ae:	2301      	movs	r3, #1
 80031b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b2:	4b79      	ldr	r3, [pc, #484]	@ (8003398 <HAL_RCC_OscConfig+0x4b0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d118      	bne.n	80031f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031be:	4b76      	ldr	r3, [pc, #472]	@ (8003398 <HAL_RCC_OscConfig+0x4b0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a75      	ldr	r2, [pc, #468]	@ (8003398 <HAL_RCC_OscConfig+0x4b0>)
 80031c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ca:	f7ff f82f 	bl	800222c <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d2:	f7ff f82b 	bl	800222c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e118      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003398 <HAL_RCC_OscConfig+0x4b0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x31e>
 80031f8:	4b66      	ldr	r3, [pc, #408]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fc:	4a65      	ldr	r2, [pc, #404]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6713      	str	r3, [r2, #112]	@ 0x70
 8003204:	e01c      	b.n	8003240 <HAL_RCC_OscConfig+0x358>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b05      	cmp	r3, #5
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x340>
 800320e:	4b61      	ldr	r3, [pc, #388]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003212:	4a60      	ldr	r2, [pc, #384]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	6713      	str	r3, [r2, #112]	@ 0x70
 800321a:	4b5e      	ldr	r3, [pc, #376]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321e:	4a5d      	ldr	r2, [pc, #372]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6713      	str	r3, [r2, #112]	@ 0x70
 8003226:	e00b      	b.n	8003240 <HAL_RCC_OscConfig+0x358>
 8003228:	4b5a      	ldr	r3, [pc, #360]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322c:	4a59      	ldr	r2, [pc, #356]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	6713      	str	r3, [r2, #112]	@ 0x70
 8003234:	4b57      	ldr	r3, [pc, #348]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003238:	4a56      	ldr	r2, [pc, #344]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800323a:	f023 0304 	bic.w	r3, r3, #4
 800323e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d015      	beq.n	8003274 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fe fff0 	bl	800222c <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324e:	e00a      	b.n	8003266 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003250:	f7fe ffec 	bl	800222c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0d7      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003266:	4b4b      	ldr	r3, [pc, #300]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0ee      	beq.n	8003250 <HAL_RCC_OscConfig+0x368>
 8003272:	e014      	b.n	800329e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003274:	f7fe ffda 	bl	800222c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327a:	e00a      	b.n	8003292 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327c:	f7fe ffd6 	bl	800222c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e0c1      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003292:	4b40      	ldr	r3, [pc, #256]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1ee      	bne.n	800327c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800329e:	7dfb      	ldrb	r3, [r7, #23]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80032aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80ad 	beq.w	8003414 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ba:	4b36      	ldr	r3, [pc, #216]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d060      	beq.n	8003388 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d145      	bne.n	800335a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ce:	4b33      	ldr	r3, [pc, #204]	@ (800339c <HAL_RCC_OscConfig+0x4b4>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe ffaa 	bl	800222c <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fe ffa6 	bl	800222c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e093      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ee:	4b29      	ldr	r3, [pc, #164]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	019b      	lsls	r3, r3, #6
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	3b01      	subs	r3, #1
 8003314:	041b      	lsls	r3, r3, #16
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	071b      	lsls	r3, r3, #28
 8003326:	491b      	ldr	r1, [pc, #108]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332c:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <HAL_RCC_OscConfig+0x4b4>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fe ff7b 	bl	800222c <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333a:	f7fe ff77 	bl	800222c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e064      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334c:	4b11      	ldr	r3, [pc, #68]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x452>
 8003358:	e05c      	b.n	8003414 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	4b10      	ldr	r3, [pc, #64]	@ (800339c <HAL_RCC_OscConfig+0x4b4>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe ff64 	bl	800222c <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fe ff60 	bl	800222c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e04d      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_RCC_OscConfig+0x4ac>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x480>
 8003386:	e045      	b.n	8003414 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e040      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
 8003394:	40023800 	.word	0x40023800
 8003398:	40007000 	.word	0x40007000
 800339c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003420 <HAL_RCC_OscConfig+0x538>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d030      	beq.n	8003410 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d129      	bne.n	8003410 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d122      	bne.n	8003410 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033d0:	4013      	ands	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d8:	4293      	cmp	r3, r2
 80033da:	d119      	bne.n	8003410 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	3b01      	subs	r3, #1
 80033ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d10f      	bne.n	8003410 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800

08003424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e07b      	b.n	800352e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d108      	bne.n	8003450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003446:	d009      	beq.n	800345c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	61da      	str	r2, [r3, #28]
 800344e:	e005      	b.n	800345c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fe fd08 	bl	8001e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003492:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e0:	ea42 0103 	orr.w	r1, r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	f003 0104 	and.w	r1, r3, #4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	f003 0210 	and.w	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800351c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b088      	sub	sp, #32
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003546:	f7fe fe71 	bl	800222c <HAL_GetTick>
 800354a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d001      	beq.n	8003560 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
 800355e:	e12a      	b.n	80037b6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_SPI_Transmit+0x36>
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e122      	b.n	80037b6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_SPI_Transmit+0x48>
 800357a:	2302      	movs	r3, #2
 800357c:	e11b      	b.n	80037b6 <HAL_SPI_Transmit+0x280>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2203      	movs	r2, #3
 800358a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035cc:	d10f      	bne.n	80035ee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f8:	2b40      	cmp	r3, #64	@ 0x40
 80035fa:	d007      	beq.n	800360c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800360a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003614:	d152      	bne.n	80036bc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_SPI_Transmit+0xee>
 800361e:	8b7b      	ldrh	r3, [r7, #26]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d145      	bne.n	80036b0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003634:	1c9a      	adds	r2, r3, #2
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003648:	e032      	b.n	80036b0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b02      	cmp	r3, #2
 8003656:	d112      	bne.n	800367e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365c:	881a      	ldrh	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003668:	1c9a      	adds	r2, r3, #2
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800367c:	e018      	b.n	80036b0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800367e:	f7fe fdd5 	bl	800222c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d803      	bhi.n	8003696 <HAL_SPI_Transmit+0x160>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003694:	d102      	bne.n	800369c <HAL_SPI_Transmit+0x166>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e082      	b.n	80037b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1c7      	bne.n	800364a <HAL_SPI_Transmit+0x114>
 80036ba:	e053      	b.n	8003764 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_SPI_Transmit+0x194>
 80036c4:	8b7b      	ldrh	r3, [r7, #26]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d147      	bne.n	800375a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	330c      	adds	r3, #12
 80036d4:	7812      	ldrb	r2, [r2, #0]
 80036d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036f0:	e033      	b.n	800375a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d113      	bne.n	8003728 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	330c      	adds	r3, #12
 800370a:	7812      	ldrb	r2, [r2, #0]
 800370c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003726:	e018      	b.n	800375a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003728:	f7fe fd80 	bl	800222c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d803      	bhi.n	8003740 <HAL_SPI_Transmit+0x20a>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800373e:	d102      	bne.n	8003746 <HAL_SPI_Transmit+0x210>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e02d      	b.n	80037b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1c6      	bne.n	80036f2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	6839      	ldr	r1, [r7, #0]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fa59 	bl	8003c20 <SPI_EndRxTxTransaction>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
  }
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3720      	adds	r7, #32
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b08a      	sub	sp, #40	@ 0x28
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037cc:	2301      	movs	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037d0:	f7fe fd2c 	bl	800222c <HAL_GetTick>
 80037d4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037dc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80037e4:	887b      	ldrh	r3, [r7, #2]
 80037e6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037e8:	7ffb      	ldrb	r3, [r7, #31]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d00c      	beq.n	8003808 <HAL_SPI_TransmitReceive+0x4a>
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037f4:	d106      	bne.n	8003804 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d102      	bne.n	8003804 <HAL_SPI_TransmitReceive+0x46>
 80037fe:	7ffb      	ldrb	r3, [r7, #31]
 8003800:	2b04      	cmp	r3, #4
 8003802:	d001      	beq.n	8003808 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003804:	2302      	movs	r3, #2
 8003806:	e17f      	b.n	8003b08 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_SPI_TransmitReceive+0x5c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_SPI_TransmitReceive+0x5c>
 8003814:	887b      	ldrh	r3, [r7, #2]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e174      	b.n	8003b08 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_SPI_TransmitReceive+0x6e>
 8003828:	2302      	movs	r3, #2
 800382a:	e16d      	b.n	8003b08 <HAL_SPI_TransmitReceive+0x34a>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b04      	cmp	r3, #4
 800383e:	d003      	beq.n	8003848 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2205      	movs	r2, #5
 8003844:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	887a      	ldrh	r2, [r7, #2]
 8003858:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	887a      	ldrh	r2, [r7, #2]
 800385e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	887a      	ldrh	r2, [r7, #2]
 800386a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003888:	2b40      	cmp	r3, #64	@ 0x40
 800388a:	d007      	beq.n	800389c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800389a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038a4:	d17e      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_SPI_TransmitReceive+0xf6>
 80038ae:	8afb      	ldrh	r3, [r7, #22]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d16c      	bne.n	800398e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b8:	881a      	ldrh	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	1c9a      	adds	r2, r3, #2
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d8:	e059      	b.n	800398e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d11b      	bne.n	8003920 <HAL_SPI_TransmitReceive+0x162>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_SPI_TransmitReceive+0x162>
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d113      	bne.n	8003920 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fc:	881a      	ldrh	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	1c9a      	adds	r2, r3, #2
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d119      	bne.n	8003962 <HAL_SPI_TransmitReceive+0x1a4>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d014      	beq.n	8003962 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003942:	b292      	uxth	r2, r2
 8003944:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394a:	1c9a      	adds	r2, r3, #2
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800395e:	2301      	movs	r3, #1
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003962:	f7fe fc63 	bl	800222c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800396e:	429a      	cmp	r2, r3
 8003970:	d80d      	bhi.n	800398e <HAL_SPI_TransmitReceive+0x1d0>
 8003972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003978:	d009      	beq.n	800398e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0bc      	b.n	8003b08 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1a0      	bne.n	80038da <HAL_SPI_TransmitReceive+0x11c>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d19b      	bne.n	80038da <HAL_SPI_TransmitReceive+0x11c>
 80039a2:	e082      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_SPI_TransmitReceive+0x1f4>
 80039ac:	8afb      	ldrh	r3, [r7, #22]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d171      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	330c      	adds	r3, #12
 80039bc:	7812      	ldrb	r2, [r2, #0]
 80039be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039d8:	e05d      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d11c      	bne.n	8003a22 <HAL_SPI_TransmitReceive+0x264>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d017      	beq.n	8003a22 <HAL_SPI_TransmitReceive+0x264>
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d114      	bne.n	8003a22 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	330c      	adds	r3, #12
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d119      	bne.n	8003a64 <HAL_SPI_TransmitReceive+0x2a6>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d014      	beq.n	8003a64 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a60:	2301      	movs	r3, #1
 8003a62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a64:	f7fe fbe2 	bl	800222c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d803      	bhi.n	8003a7c <HAL_SPI_TransmitReceive+0x2be>
 8003a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a7a:	d102      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x2c4>
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e038      	b.n	8003b08 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d19c      	bne.n	80039da <HAL_SPI_TransmitReceive+0x21c>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d197      	bne.n	80039da <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aaa:	6a3a      	ldr	r2, [r7, #32]
 8003aac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f8b6 	bl	8003c20 <SPI_EndRxTxTransaction>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e01d      	b.n	8003b08 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10a      	bne.n	8003aea <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003b06:	2300      	movs	r3, #0
  }
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3728      	adds	r7, #40	@ 0x28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b20:	f7fe fb84 	bl	800222c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b30:	f7fe fb7c 	bl	800222c <HAL_GetTick>
 8003b34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b36:	4b39      	ldr	r3, [pc, #228]	@ (8003c1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	015b      	lsls	r3, r3, #5
 8003b3c:	0d1b      	lsrs	r3, r3, #20
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	fb02 f303 	mul.w	r3, r2, r3
 8003b44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b46:	e054      	b.n	8003bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b4e:	d050      	beq.n	8003bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b50:	f7fe fb6c 	bl	800222c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d902      	bls.n	8003b66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d13d      	bne.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b7e:	d111      	bne.n	8003ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b88:	d004      	beq.n	8003b94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b92:	d107      	bne.n	8003ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ba2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bac:	d10f      	bne.n	8003bce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e017      	b.n	8003c12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d19b      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	2000000c 	.word	0x2000000c

08003c20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2201      	movs	r2, #1
 8003c34:	2102      	movs	r1, #2
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f7ff ff6a 	bl	8003b10 <SPI_WaitFlagStateUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c46:	f043 0220 	orr.w	r2, r3, #32
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e032      	b.n	8003cb8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c52:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <SPI_EndRxTxTransaction+0xa0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc4 <SPI_EndRxTxTransaction+0xa4>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	0d5b      	lsrs	r3, r3, #21
 8003c5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c70:	d112      	bne.n	8003c98 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2180      	movs	r1, #128	@ 0x80
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff ff47 	bl	8003b10 <SPI_WaitFlagStateUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d016      	beq.n	8003cb6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e00f      	b.n	8003cb8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cae:	2b80      	cmp	r3, #128	@ 0x80
 8003cb0:	d0f2      	beq.n	8003c98 <SPI_EndRxTxTransaction+0x78>
 8003cb2:	e000      	b.n	8003cb6 <SPI_EndRxTxTransaction+0x96>
        break;
 8003cb4:	bf00      	nop
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	2000000c 	.word	0x2000000c
 8003cc4:	165e9f81 	.word	0x165e9f81

08003cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e042      	b.n	8003d60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fe f914 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	@ 0x24
 8003cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f973 	bl	8003ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	@ 0x28
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d175      	bne.n	8003e74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_UART_Transmit+0x2c>
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e06e      	b.n	8003e76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2221      	movs	r2, #33	@ 0x21
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003da6:	f7fe fa41 	bl	800222c <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	88fa      	ldrh	r2, [r7, #6]
 8003db6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dc0:	d108      	bne.n	8003dd4 <HAL_UART_Transmit+0x6c>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	e003      	b.n	8003ddc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ddc:	e02e      	b.n	8003e3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2200      	movs	r2, #0
 8003de6:	2180      	movs	r1, #128	@ 0x80
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f848 	bl	8003e7e <UART_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e03a      	b.n	8003e76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10b      	bne.n	8003e1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	3302      	adds	r3, #2
 8003e1a:	61bb      	str	r3, [r7, #24]
 8003e1c:	e007      	b.n	8003e2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	781a      	ldrb	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1cb      	bne.n	8003dde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2140      	movs	r1, #64	@ 0x40
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f814 	bl	8003e7e <UART_WaitOnFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e006      	b.n	8003e76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e000      	b.n	8003e76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e74:	2302      	movs	r3, #2
  }
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8e:	e03b      	b.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e96:	d037      	beq.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e98:	f7fe f9c8 	bl	800222c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	6a3a      	ldr	r2, [r7, #32]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d302      	bcc.n	8003eae <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e03a      	b.n	8003f28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d023      	beq.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b80      	cmp	r3, #128	@ 0x80
 8003ec4:	d020      	beq.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b40      	cmp	r3, #64	@ 0x40
 8003eca:	d01d      	beq.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d116      	bne.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f81d 	bl	8003f30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2208      	movs	r2, #8
 8003efa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e00f      	b.n	8003f28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4013      	ands	r3, r2
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d0b4      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b095      	sub	sp, #84	@ 0x54
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f58:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3314      	adds	r3, #20
 8003f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e5      	bne.n	8003f6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d119      	bne.n	8003fdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f023 0310 	bic.w	r3, r3, #16
 8003fbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fc8:	61ba      	str	r2, [r7, #24]
 8003fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6979      	ldr	r1, [r7, #20]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e5      	bne.n	8003fa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fea:	bf00      	nop
 8003fec:	3754      	adds	r7, #84	@ 0x54
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ffc:	b0c0      	sub	sp, #256	@ 0x100
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	68d9      	ldr	r1, [r3, #12]
 8004016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	ea40 0301 	orr.w	r3, r0, r1
 8004020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	431a      	orrs	r2, r3
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	431a      	orrs	r2, r3
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004050:	f021 010c 	bic.w	r1, r1, #12
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800405e:	430b      	orrs	r3, r1
 8004060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	6999      	ldr	r1, [r3, #24]
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	ea40 0301 	orr.w	r3, r0, r1
 800407e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4b8f      	ldr	r3, [pc, #572]	@ (80042c4 <UART_SetConfig+0x2cc>)
 8004088:	429a      	cmp	r2, r3
 800408a:	d005      	beq.n	8004098 <UART_SetConfig+0xa0>
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4b8d      	ldr	r3, [pc, #564]	@ (80042c8 <UART_SetConfig+0x2d0>)
 8004094:	429a      	cmp	r2, r3
 8004096:	d104      	bne.n	80040a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004098:	f7fe fce2 	bl	8002a60 <HAL_RCC_GetPCLK2Freq>
 800409c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040a0:	e003      	b.n	80040aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040a2:	f7fe fcc9 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 80040a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b4:	f040 810c 	bne.w	80042d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040bc:	2200      	movs	r2, #0
 80040be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040ca:	4622      	mov	r2, r4
 80040cc:	462b      	mov	r3, r5
 80040ce:	1891      	adds	r1, r2, r2
 80040d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040d2:	415b      	adcs	r3, r3
 80040d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040da:	4621      	mov	r1, r4
 80040dc:	eb12 0801 	adds.w	r8, r2, r1
 80040e0:	4629      	mov	r1, r5
 80040e2:	eb43 0901 	adc.w	r9, r3, r1
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040fa:	4690      	mov	r8, r2
 80040fc:	4699      	mov	r9, r3
 80040fe:	4623      	mov	r3, r4
 8004100:	eb18 0303 	adds.w	r3, r8, r3
 8004104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004108:	462b      	mov	r3, r5
 800410a:	eb49 0303 	adc.w	r3, r9, r3
 800410e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800411e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004126:	460b      	mov	r3, r1
 8004128:	18db      	adds	r3, r3, r3
 800412a:	653b      	str	r3, [r7, #80]	@ 0x50
 800412c:	4613      	mov	r3, r2
 800412e:	eb42 0303 	adc.w	r3, r2, r3
 8004132:	657b      	str	r3, [r7, #84]	@ 0x54
 8004134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004138:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800413c:	f7fc fbc6 	bl	80008cc <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4b61      	ldr	r3, [pc, #388]	@ (80042cc <UART_SetConfig+0x2d4>)
 8004146:	fba3 2302 	umull	r2, r3, r3, r2
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	011c      	lsls	r4, r3, #4
 800414e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004152:	2200      	movs	r2, #0
 8004154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004158:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800415c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	1891      	adds	r1, r2, r2
 8004166:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004168:	415b      	adcs	r3, r3
 800416a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800416c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004170:	4641      	mov	r1, r8
 8004172:	eb12 0a01 	adds.w	sl, r2, r1
 8004176:	4649      	mov	r1, r9
 8004178:	eb43 0b01 	adc.w	fp, r3, r1
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800418c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004190:	4692      	mov	sl, r2
 8004192:	469b      	mov	fp, r3
 8004194:	4643      	mov	r3, r8
 8004196:	eb1a 0303 	adds.w	r3, sl, r3
 800419a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800419e:	464b      	mov	r3, r9
 80041a0:	eb4b 0303 	adc.w	r3, fp, r3
 80041a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041bc:	460b      	mov	r3, r1
 80041be:	18db      	adds	r3, r3, r3
 80041c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80041c2:	4613      	mov	r3, r2
 80041c4:	eb42 0303 	adc.w	r3, r2, r3
 80041c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041d2:	f7fc fb7b 	bl	80008cc <__aeabi_uldivmod>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4611      	mov	r1, r2
 80041dc:	4b3b      	ldr	r3, [pc, #236]	@ (80042cc <UART_SetConfig+0x2d4>)
 80041de:	fba3 2301 	umull	r2, r3, r3, r1
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	2264      	movs	r2, #100	@ 0x64
 80041e6:	fb02 f303 	mul.w	r3, r2, r3
 80041ea:	1acb      	subs	r3, r1, r3
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041f2:	4b36      	ldr	r3, [pc, #216]	@ (80042cc <UART_SetConfig+0x2d4>)
 80041f4:	fba3 2302 	umull	r2, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004200:	441c      	add	r4, r3
 8004202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800420c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004214:	4642      	mov	r2, r8
 8004216:	464b      	mov	r3, r9
 8004218:	1891      	adds	r1, r2, r2
 800421a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800421c:	415b      	adcs	r3, r3
 800421e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004224:	4641      	mov	r1, r8
 8004226:	1851      	adds	r1, r2, r1
 8004228:	6339      	str	r1, [r7, #48]	@ 0x30
 800422a:	4649      	mov	r1, r9
 800422c:	414b      	adcs	r3, r1
 800422e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800423c:	4659      	mov	r1, fp
 800423e:	00cb      	lsls	r3, r1, #3
 8004240:	4651      	mov	r1, sl
 8004242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004246:	4651      	mov	r1, sl
 8004248:	00ca      	lsls	r2, r1, #3
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	4603      	mov	r3, r0
 8004250:	4642      	mov	r2, r8
 8004252:	189b      	adds	r3, r3, r2
 8004254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004258:	464b      	mov	r3, r9
 800425a:	460a      	mov	r2, r1
 800425c:	eb42 0303 	adc.w	r3, r2, r3
 8004260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004270:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004278:	460b      	mov	r3, r1
 800427a:	18db      	adds	r3, r3, r3
 800427c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800427e:	4613      	mov	r3, r2
 8004280:	eb42 0303 	adc.w	r3, r2, r3
 8004284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800428a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800428e:	f7fc fb1d 	bl	80008cc <__aeabi_uldivmod>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4b0d      	ldr	r3, [pc, #52]	@ (80042cc <UART_SetConfig+0x2d4>)
 8004298:	fba3 1302 	umull	r1, r3, r3, r2
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	2164      	movs	r1, #100	@ 0x64
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	3332      	adds	r3, #50	@ 0x32
 80042aa:	4a08      	ldr	r2, [pc, #32]	@ (80042cc <UART_SetConfig+0x2d4>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	f003 0207 	and.w	r2, r3, #7
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4422      	add	r2, r4
 80042be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042c0:	e106      	b.n	80044d0 <UART_SetConfig+0x4d8>
 80042c2:	bf00      	nop
 80042c4:	40011000 	.word	0x40011000
 80042c8:	40011400 	.word	0x40011400
 80042cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042d4:	2200      	movs	r2, #0
 80042d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042e2:	4642      	mov	r2, r8
 80042e4:	464b      	mov	r3, r9
 80042e6:	1891      	adds	r1, r2, r2
 80042e8:	6239      	str	r1, [r7, #32]
 80042ea:	415b      	adcs	r3, r3
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042f2:	4641      	mov	r1, r8
 80042f4:	1854      	adds	r4, r2, r1
 80042f6:	4649      	mov	r1, r9
 80042f8:	eb43 0501 	adc.w	r5, r3, r1
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	00eb      	lsls	r3, r5, #3
 8004306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800430a:	00e2      	lsls	r2, r4, #3
 800430c:	4614      	mov	r4, r2
 800430e:	461d      	mov	r5, r3
 8004310:	4643      	mov	r3, r8
 8004312:	18e3      	adds	r3, r4, r3
 8004314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004318:	464b      	mov	r3, r9
 800431a:	eb45 0303 	adc.w	r3, r5, r3
 800431e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800432e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800433e:	4629      	mov	r1, r5
 8004340:	008b      	lsls	r3, r1, #2
 8004342:	4621      	mov	r1, r4
 8004344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004348:	4621      	mov	r1, r4
 800434a:	008a      	lsls	r2, r1, #2
 800434c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004350:	f7fc fabc 	bl	80008cc <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4b60      	ldr	r3, [pc, #384]	@ (80044dc <UART_SetConfig+0x4e4>)
 800435a:	fba3 2302 	umull	r2, r3, r3, r2
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	011c      	lsls	r4, r3, #4
 8004362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004366:	2200      	movs	r2, #0
 8004368:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800436c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004374:	4642      	mov	r2, r8
 8004376:	464b      	mov	r3, r9
 8004378:	1891      	adds	r1, r2, r2
 800437a:	61b9      	str	r1, [r7, #24]
 800437c:	415b      	adcs	r3, r3
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004384:	4641      	mov	r1, r8
 8004386:	1851      	adds	r1, r2, r1
 8004388:	6139      	str	r1, [r7, #16]
 800438a:	4649      	mov	r1, r9
 800438c:	414b      	adcs	r3, r1
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800439c:	4659      	mov	r1, fp
 800439e:	00cb      	lsls	r3, r1, #3
 80043a0:	4651      	mov	r1, sl
 80043a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043a6:	4651      	mov	r1, sl
 80043a8:	00ca      	lsls	r2, r1, #3
 80043aa:	4610      	mov	r0, r2
 80043ac:	4619      	mov	r1, r3
 80043ae:	4603      	mov	r3, r0
 80043b0:	4642      	mov	r2, r8
 80043b2:	189b      	adds	r3, r3, r2
 80043b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043b8:	464b      	mov	r3, r9
 80043ba:	460a      	mov	r2, r1
 80043bc:	eb42 0303 	adc.w	r3, r2, r3
 80043c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043dc:	4649      	mov	r1, r9
 80043de:	008b      	lsls	r3, r1, #2
 80043e0:	4641      	mov	r1, r8
 80043e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043e6:	4641      	mov	r1, r8
 80043e8:	008a      	lsls	r2, r1, #2
 80043ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043ee:	f7fc fa6d 	bl	80008cc <__aeabi_uldivmod>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4611      	mov	r1, r2
 80043f8:	4b38      	ldr	r3, [pc, #224]	@ (80044dc <UART_SetConfig+0x4e4>)
 80043fa:	fba3 2301 	umull	r2, r3, r3, r1
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	2264      	movs	r2, #100	@ 0x64
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	1acb      	subs	r3, r1, r3
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	3332      	adds	r3, #50	@ 0x32
 800440c:	4a33      	ldr	r2, [pc, #204]	@ (80044dc <UART_SetConfig+0x4e4>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004418:	441c      	add	r4, r3
 800441a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800441e:	2200      	movs	r2, #0
 8004420:	673b      	str	r3, [r7, #112]	@ 0x70
 8004422:	677a      	str	r2, [r7, #116]	@ 0x74
 8004424:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004428:	4642      	mov	r2, r8
 800442a:	464b      	mov	r3, r9
 800442c:	1891      	adds	r1, r2, r2
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	415b      	adcs	r3, r3
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004438:	4641      	mov	r1, r8
 800443a:	1851      	adds	r1, r2, r1
 800443c:	6039      	str	r1, [r7, #0]
 800443e:	4649      	mov	r1, r9
 8004440:	414b      	adcs	r3, r1
 8004442:	607b      	str	r3, [r7, #4]
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004450:	4659      	mov	r1, fp
 8004452:	00cb      	lsls	r3, r1, #3
 8004454:	4651      	mov	r1, sl
 8004456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800445a:	4651      	mov	r1, sl
 800445c:	00ca      	lsls	r2, r1, #3
 800445e:	4610      	mov	r0, r2
 8004460:	4619      	mov	r1, r3
 8004462:	4603      	mov	r3, r0
 8004464:	4642      	mov	r2, r8
 8004466:	189b      	adds	r3, r3, r2
 8004468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800446a:	464b      	mov	r3, r9
 800446c:	460a      	mov	r2, r1
 800446e:	eb42 0303 	adc.w	r3, r2, r3
 8004472:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	663b      	str	r3, [r7, #96]	@ 0x60
 800447e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800448c:	4649      	mov	r1, r9
 800448e:	008b      	lsls	r3, r1, #2
 8004490:	4641      	mov	r1, r8
 8004492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004496:	4641      	mov	r1, r8
 8004498:	008a      	lsls	r2, r1, #2
 800449a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800449e:	f7fc fa15 	bl	80008cc <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4b0d      	ldr	r3, [pc, #52]	@ (80044dc <UART_SetConfig+0x4e4>)
 80044a8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	2164      	movs	r1, #100	@ 0x64
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	3332      	adds	r3, #50	@ 0x32
 80044ba:	4a08      	ldr	r2, [pc, #32]	@ (80044dc <UART_SetConfig+0x4e4>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	f003 020f 	and.w	r2, r3, #15
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4422      	add	r2, r4
 80044ce:	609a      	str	r2, [r3, #8]
}
 80044d0:	bf00      	nop
 80044d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044d6:	46bd      	mov	sp, r7
 80044d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044dc:	51eb851f 	.word	0x51eb851f

080044e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80044e4:	4904      	ldr	r1, [pc, #16]	@ (80044f8 <MX_FATFS_Init+0x18>)
 80044e6:	4805      	ldr	r0, [pc, #20]	@ (80044fc <MX_FATFS_Init+0x1c>)
 80044e8:	f003 fdae 	bl	8008048 <FATFS_LinkDriver>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	4b03      	ldr	r3, [pc, #12]	@ (8004500 <MX_FATFS_Init+0x20>)
 80044f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80044f4:	bf00      	nop
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	200022d0 	.word	0x200022d0
 80044fc:	20000018 	.word	0x20000018
 8004500:	200022cc 	.word	0x200022cc

08004504 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004508:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800450a:	4618      	mov	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;

	return SD_disk_initialize(pdrv);
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	4618      	mov	r0, r3
 8004522:	f7fc ffaf 	bl	8001484 <SD_disk_initialize>
 8004526:	4603      	mov	r3, r0
 8004528:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	4603      	mov	r3, r0
 800453a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;

	return SD_disk_status(pdrv);
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	4618      	mov	r0, r3
 8004540:	f7fd f88c 	bl	800165c <SD_disk_status>
 8004544:	4603      	mov	r3, r0
 8004546:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4603      	mov	r3, r0
 800455e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	// return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 8004560:	7bf8      	ldrb	r0, [r7, #15]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	f7fd f88e 	bl	8001688 <SD_disk_read>
 800456c:	4603      	mov	r3, r0
 800456e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	4603      	mov	r3, r0
 8004586:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;

	return SD_disk_write(pdrv, buff, sector, count);
 8004588:	7bf8      	ldrb	r0, [r7, #15]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	f7fd f8e4 	bl	800175c <SD_disk_write>
 8004594:	4603      	mov	r3, r0
 8004596:	b2db      	uxtb	r3, r3
	/* USER CODE END WRITE */
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	603a      	str	r2, [r7, #0]
 80045aa:	71fb      	strb	r3, [r7, #7]
 80045ac:	460b      	mov	r3, r1
 80045ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;

	return SD_disk_ioctl(pdrv, cmd, buff);
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	79b9      	ldrb	r1, [r7, #6]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd f954 	bl	8001864 <SD_disk_ioctl>
 80045bc:	4603      	mov	r3, r0
 80045be:	b2db      	uxtb	r3, r3

	/* USER CODE END IOCTL */
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	4a08      	ldr	r2, [pc, #32]	@ (80045f8 <disk_status+0x30>)
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	79fa      	ldrb	r2, [r7, #7]
 80045e0:	4905      	ldr	r1, [pc, #20]	@ (80045f8 <disk_status+0x30>)
 80045e2:	440a      	add	r2, r1
 80045e4:	7a12      	ldrb	r2, [r2, #8]
 80045e6:	4610      	mov	r0, r2
 80045e8:	4798      	blx	r3
 80045ea:	4603      	mov	r3, r0
 80045ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	200024fc 	.word	0x200024fc

080045fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	4a0e      	ldr	r2, [pc, #56]	@ (8004648 <disk_initialize+0x4c>)
 800460e:	5cd3      	ldrb	r3, [r2, r3]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d114      	bne.n	800463e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	4a0c      	ldr	r2, [pc, #48]	@ (8004648 <disk_initialize+0x4c>)
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	79fa      	ldrb	r2, [r7, #7]
 8004622:	4909      	ldr	r1, [pc, #36]	@ (8004648 <disk_initialize+0x4c>)
 8004624:	440a      	add	r2, r1
 8004626:	7a12      	ldrb	r2, [r2, #8]
 8004628:	4610      	mov	r0, r2
 800462a:	4798      	blx	r3
 800462c:	4603      	mov	r3, r0
 800462e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	4a03      	ldr	r2, [pc, #12]	@ (8004648 <disk_initialize+0x4c>)
 800463a:	2101      	movs	r1, #1
 800463c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800463e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	200024fc 	.word	0x200024fc

0800464c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4603      	mov	r3, r0
 800465a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	4a0a      	ldr	r2, [pc, #40]	@ (8004688 <disk_read+0x3c>)
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	689c      	ldr	r4, [r3, #8]
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	4a07      	ldr	r2, [pc, #28]	@ (8004688 <disk_read+0x3c>)
 800466c:	4413      	add	r3, r2
 800466e:	7a18      	ldrb	r0, [r3, #8]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	47a0      	blx	r4
 8004678:	4603      	mov	r3, r0
 800467a:	75fb      	strb	r3, [r7, #23]
  return res;
 800467c:	7dfb      	ldrb	r3, [r7, #23]
}
 800467e:	4618      	mov	r0, r3
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd90      	pop	{r4, r7, pc}
 8004686:	bf00      	nop
 8004688:	200024fc 	.word	0x200024fc

0800468c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800468c:	b590      	push	{r4, r7, lr}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4603      	mov	r3, r0
 800469a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	4a0a      	ldr	r2, [pc, #40]	@ (80046c8 <disk_write+0x3c>)
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	68dc      	ldr	r4, [r3, #12]
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	4a07      	ldr	r2, [pc, #28]	@ (80046c8 <disk_write+0x3c>)
 80046ac:	4413      	add	r3, r2
 80046ae:	7a18      	ldrb	r0, [r3, #8]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	47a0      	blx	r4
 80046b8:	4603      	mov	r3, r0
 80046ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd90      	pop	{r4, r7, pc}
 80046c6:	bf00      	nop
 80046c8:	200024fc 	.word	0x200024fc

080046cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	603a      	str	r2, [r7, #0]
 80046d6:	71fb      	strb	r3, [r7, #7]
 80046d8:	460b      	mov	r3, r1
 80046da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	4a09      	ldr	r2, [pc, #36]	@ (8004704 <disk_ioctl+0x38>)
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	79fa      	ldrb	r2, [r7, #7]
 80046ea:	4906      	ldr	r1, [pc, #24]	@ (8004704 <disk_ioctl+0x38>)
 80046ec:	440a      	add	r2, r1
 80046ee:	7a10      	ldrb	r0, [r2, #8]
 80046f0:	79b9      	ldrb	r1, [r7, #6]
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	4798      	blx	r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	200024fc 	.word	0x200024fc

08004708 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3301      	adds	r3, #1
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004718:	89fb      	ldrh	r3, [r7, #14]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	b21a      	sxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	b21b      	sxth	r3, r3
 8004724:	4313      	orrs	r3, r2
 8004726:	b21b      	sxth	r3, r3
 8004728:	81fb      	strh	r3, [r7, #14]
	return rv;
 800472a:	89fb      	ldrh	r3, [r7, #14]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3303      	adds	r3, #3
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	3202      	adds	r2, #2
 8004750:	7812      	ldrb	r2, [r2, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	3201      	adds	r2, #1
 800475e:	7812      	ldrb	r2, [r2, #0]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	7812      	ldrb	r2, [r2, #0]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004770:	68fb      	ldr	r3, [r7, #12]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	887a      	ldrh	r2, [r7, #2]
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	887b      	ldrh	r3, [r7, #2]
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	0a1b      	lsrs	r3, r3, #8
 80047ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	0a1b      	lsrs	r3, r3, #8
 80047f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00d      	beq.n	8004842 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	1c53      	adds	r3, r2, #1
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	1c59      	adds	r1, r3, #1
 8004830:	6179      	str	r1, [r7, #20]
 8004832:	7812      	ldrb	r2, [r2, #0]
 8004834:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3b01      	subs	r3, #1
 800483a:	607b      	str	r3, [r7, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f1      	bne.n	8004826 <mem_cpy+0x1a>
	}
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800484e:	b480      	push	{r7}
 8004850:	b087      	sub	sp, #28
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	617a      	str	r2, [r7, #20]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3b01      	subs	r3, #1
 800486e:	607b      	str	r3, [r7, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f3      	bne.n	800485e <mem_set+0x10>
}
 8004876:	bf00      	nop
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	@ 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	61fa      	str	r2, [r7, #28]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	4619      	mov	r1, r3
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	61ba      	str	r2, [r7, #24]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	1acb      	subs	r3, r1, r3
 80048b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	607b      	str	r3, [r7, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <mem_cmp+0x40>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0eb      	beq.n	800489c <mem_cmp+0x18>

	return r;
 80048c4:	697b      	ldr	r3, [r7, #20]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3724      	adds	r7, #36	@ 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80048dc:	e002      	b.n	80048e4 <chk_chr+0x12>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3301      	adds	r3, #1
 80048e2:	607b      	str	r3, [r7, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <chk_chr+0x26>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d1f2      	bne.n	80048de <chk_chr+0xc>
	return *str;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	781b      	ldrb	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e029      	b.n	8004970 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800491c:	4a27      	ldr	r2, [pc, #156]	@ (80049bc <chk_lock+0xb4>)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	4413      	add	r3, r2
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01d      	beq.n	8004966 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800492a:	4a24      	ldr	r2, [pc, #144]	@ (80049bc <chk_lock+0xb4>)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	4413      	add	r3, r2
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d116      	bne.n	800496a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800493c:	4a1f      	ldr	r2, [pc, #124]	@ (80049bc <chk_lock+0xb4>)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	4413      	add	r3, r2
 8004944:	3304      	adds	r3, #4
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800494c:	429a      	cmp	r2, r3
 800494e:	d10c      	bne.n	800496a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004950:	4a1a      	ldr	r2, [pc, #104]	@ (80049bc <chk_lock+0xb4>)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	4413      	add	r3, r2
 8004958:	3308      	adds	r3, #8
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004960:	429a      	cmp	r2, r3
 8004962:	d102      	bne.n	800496a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004964:	e007      	b.n	8004976 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004966:	2301      	movs	r3, #1
 8004968:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3301      	adds	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d9d2      	bls.n	800491c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d109      	bne.n	8004990 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <chk_lock+0x80>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d101      	bne.n	800498c <chk_lock+0x84>
 8004988:	2300      	movs	r3, #0
 800498a:	e010      	b.n	80049ae <chk_lock+0xa6>
 800498c:	2312      	movs	r3, #18
 800498e:	e00e      	b.n	80049ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d108      	bne.n	80049a8 <chk_lock+0xa0>
 8004996:	4a09      	ldr	r2, [pc, #36]	@ (80049bc <chk_lock+0xb4>)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	4413      	add	r3, r2
 800499e:	330c      	adds	r3, #12
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a6:	d101      	bne.n	80049ac <chk_lock+0xa4>
 80049a8:	2310      	movs	r3, #16
 80049aa:	e000      	b.n	80049ae <chk_lock+0xa6>
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	200022dc 	.word	0x200022dc

080049c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	e002      	b.n	80049d2 <enq_lock+0x12>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3301      	adds	r3, #1
 80049d0:	607b      	str	r3, [r7, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d806      	bhi.n	80049e6 <enq_lock+0x26>
 80049d8:	4a09      	ldr	r2, [pc, #36]	@ (8004a00 <enq_lock+0x40>)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	4413      	add	r3, r2
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f2      	bne.n	80049cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	200022dc 	.word	0x200022dc

08004a04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	e01f      	b.n	8004a54 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004a14:	4a41      	ldr	r2, [pc, #260]	@ (8004b1c <inc_lock+0x118>)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	4413      	add	r3, r2
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d113      	bne.n	8004a4e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004a26:	4a3d      	ldr	r2, [pc, #244]	@ (8004b1c <inc_lock+0x118>)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3304      	adds	r3, #4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d109      	bne.n	8004a4e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004a3a:	4a38      	ldr	r2, [pc, #224]	@ (8004b1c <inc_lock+0x118>)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	4413      	add	r3, r2
 8004a42:	3308      	adds	r3, #8
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d006      	beq.n	8004a5c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3301      	adds	r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d9dc      	bls.n	8004a14 <inc_lock+0x10>
 8004a5a:	e000      	b.n	8004a5e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004a5c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d132      	bne.n	8004aca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	e002      	b.n	8004a70 <inc_lock+0x6c>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d806      	bhi.n	8004a84 <inc_lock+0x80>
 8004a76:	4a29      	ldr	r2, [pc, #164]	@ (8004b1c <inc_lock+0x118>)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	4413      	add	r3, r2
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f2      	bne.n	8004a6a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d101      	bne.n	8004a8e <inc_lock+0x8a>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e040      	b.n	8004b10 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4922      	ldr	r1, [pc, #136]	@ (8004b1c <inc_lock+0x118>)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	440b      	add	r3, r1
 8004a9a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	491e      	ldr	r1, [pc, #120]	@ (8004b1c <inc_lock+0x118>)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	491a      	ldr	r1, [pc, #104]	@ (8004b1c <inc_lock+0x118>)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	440b      	add	r3, r1
 8004ab8:	3308      	adds	r3, #8
 8004aba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004abc:	4a17      	ldr	r2, [pc, #92]	@ (8004b1c <inc_lock+0x118>)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	4413      	add	r3, r2
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <inc_lock+0xe0>
 8004ad0:	4a12      	ldr	r2, [pc, #72]	@ (8004b1c <inc_lock+0x118>)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	4413      	add	r3, r2
 8004ad8:	330c      	adds	r3, #12
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <inc_lock+0xe0>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e015      	b.n	8004b10 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d108      	bne.n	8004afc <inc_lock+0xf8>
 8004aea:	4a0c      	ldr	r2, [pc, #48]	@ (8004b1c <inc_lock+0x118>)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	4413      	add	r3, r2
 8004af2:	330c      	adds	r3, #12
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	3301      	adds	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	e001      	b.n	8004b00 <inc_lock+0xfc>
 8004afc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b00:	4906      	ldr	r1, [pc, #24]	@ (8004b1c <inc_lock+0x118>)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	440b      	add	r3, r1
 8004b08:	330c      	adds	r3, #12
 8004b0a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3301      	adds	r3, #1
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	200022dc 	.word	0x200022dc

08004b20 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	607b      	str	r3, [r7, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d825      	bhi.n	8004b80 <dec_lock+0x60>
		n = Files[i].ctr;
 8004b34:	4a17      	ldr	r2, [pc, #92]	@ (8004b94 <dec_lock+0x74>)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	4413      	add	r3, r2
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004b42:	89fb      	ldrh	r3, [r7, #14]
 8004b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b48:	d101      	bne.n	8004b4e <dec_lock+0x2e>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004b4e:	89fb      	ldrh	r3, [r7, #14]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <dec_lock+0x3a>
 8004b54:	89fb      	ldrh	r3, [r7, #14]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8004b94 <dec_lock+0x74>)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	4413      	add	r3, r2
 8004b62:	330c      	adds	r3, #12
 8004b64:	89fa      	ldrh	r2, [r7, #14]
 8004b66:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004b68:	89fb      	ldrh	r3, [r7, #14]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <dec_lock+0x5a>
 8004b6e:	4a09      	ldr	r2, [pc, #36]	@ (8004b94 <dec_lock+0x74>)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	4413      	add	r3, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	737b      	strb	r3, [r7, #13]
 8004b7e:	e001      	b.n	8004b84 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004b80:	2302      	movs	r3, #2
 8004b82:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004b84:	7b7b      	ldrb	r3, [r7, #13]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	200022dc 	.word	0x200022dc

08004b98 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e010      	b.n	8004bc8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8004bdc <clear_lock+0x44>)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	4413      	add	r3, r2
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d105      	bne.n	8004bc2 <clear_lock+0x2a>
 8004bb6:	4a09      	ldr	r2, [pc, #36]	@ (8004bdc <clear_lock+0x44>)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	4413      	add	r3, r2
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d9eb      	bls.n	8004ba6 <clear_lock+0xe>
	}
}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	200022dc 	.word	0x200022dc

08004be0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	78db      	ldrb	r3, [r3, #3]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d034      	beq.n	8004c5e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	7858      	ldrb	r0, [r3, #1]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004c04:	2301      	movs	r3, #1
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	f7ff fd40 	bl	800468c <disk_write>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	e022      	b.n	8004c5e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	1ad2      	subs	r2, r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d217      	bcs.n	8004c5e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	789b      	ldrb	r3, [r3, #2]
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	e010      	b.n	8004c58 <sync_window+0x78>
					wsect += fs->fsize;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	7858      	ldrb	r0, [r3, #1]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	f7ff fd1d 	bl	800468c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d8eb      	bhi.n	8004c36 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d01b      	beq.n	8004cb8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff ffad 	bl	8004be0 <sync_window>
 8004c86:	4603      	mov	r3, r0
 8004c88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d113      	bne.n	8004cb8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	7858      	ldrb	r0, [r3, #1]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	f7ff fcd5 	bl	800464c <disk_read>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004ca8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff87 	bl	8004be0 <sync_window>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d159      	bne.n	8004d90 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d149      	bne.n	8004d78 <sync_fs+0xb4>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	791b      	ldrb	r3, [r3, #4]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d145      	bne.n	8004d78 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	899b      	ldrh	r3, [r3, #12]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	f7ff fda8 	bl	800484e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3338      	adds	r3, #56	@ 0x38
 8004d02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004d06:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fd37 	bl	800477e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3338      	adds	r3, #56	@ 0x38
 8004d14:	4921      	ldr	r1, [pc, #132]	@ (8004d9c <sync_fs+0xd8>)
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fd4c 	bl	80047b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3338      	adds	r3, #56	@ 0x38
 8004d20:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004d24:	491e      	ldr	r1, [pc, #120]	@ (8004da0 <sync_fs+0xdc>)
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff fd44 	bl	80047b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3338      	adds	r3, #56	@ 0x38
 8004d30:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f7ff fd3a 	bl	80047b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3338      	adds	r3, #56	@ 0x38
 8004d44:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f7ff fd30 	bl	80047b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	7858      	ldrb	r0, [r3, #1]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f7ff fc8d 	bl	800468c <disk_write>
			fs->fsi_flag = 0;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2100      	movs	r1, #0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fca3 	bl	80046cc <disk_ioctl>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <sync_fs+0xcc>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	41615252 	.word	0x41615252
 8004da0:	61417272 	.word	0x61417272

08004da4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	3b02      	subs	r3, #2
 8004db2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	3b02      	subs	r3, #2
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d301      	bcc.n	8004dc4 <clust2sect+0x20>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e008      	b.n	8004dd6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	895b      	ldrh	r3, [r3, #10]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	fb03 f202 	mul.w	r2, r3, r2
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd4:	4413      	add	r3, r2
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b086      	sub	sp, #24
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d904      	bls.n	8004e02 <get_fat+0x20>
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d302      	bcc.n	8004e08 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004e02:	2301      	movs	r3, #1
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	e0ba      	b.n	8004f7e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004e08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e0c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	f000 8082 	beq.w	8004f1c <get_fat+0x13a>
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	f300 80a6 	bgt.w	8004f6a <get_fat+0x188>
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d002      	beq.n	8004e28 <get_fat+0x46>
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d055      	beq.n	8004ed2 <get_fat+0xf0>
 8004e26:	e0a0      	b.n	8004f6a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	085b      	lsrs	r3, r3, #1
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	899b      	ldrh	r3, [r3, #12]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e46:	4413      	add	r3, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	6938      	ldr	r0, [r7, #16]
 8004e4c:	f7ff ff0c 	bl	8004c68 <move_window>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f040 808c 	bne.w	8004f70 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	60fa      	str	r2, [r7, #12]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	8992      	ldrh	r2, [r2, #12]
 8004e62:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e66:	fb01 f202 	mul.w	r2, r1, r2
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e74:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	899b      	ldrh	r3, [r3, #12]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e86:	4413      	add	r3, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6938      	ldr	r0, [r7, #16]
 8004e8c:	f7ff feec 	bl	8004c68 <move_window>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d16e      	bne.n	8004f74 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	899b      	ldrh	r3, [r3, #12]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ea2:	fb01 f202 	mul.w	r2, r1, r2
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <get_fat+0xe6>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	e002      	b.n	8004ece <get_fat+0xec>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ece:	617b      	str	r3, [r7, #20]
			break;
 8004ed0:	e055      	b.n	8004f7e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	899b      	ldrh	r3, [r3, #12]
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	4619      	mov	r1, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6938      	ldr	r0, [r7, #16]
 8004eec:	f7ff febc 	bl	8004c68 <move_window>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d140      	bne.n	8004f78 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	8992      	ldrh	r2, [r2, #12]
 8004f04:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f08:	fb00 f202 	mul.w	r2, r0, r2
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	440b      	add	r3, r1
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff fbf9 	bl	8004708 <ld_word>
 8004f16:	4603      	mov	r3, r0
 8004f18:	617b      	str	r3, [r7, #20]
			break;
 8004f1a:	e030      	b.n	8004f7e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	899b      	ldrh	r3, [r3, #12]
 8004f24:	089b      	lsrs	r3, r3, #2
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	4619      	mov	r1, r3
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f30:	4413      	add	r3, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	6938      	ldr	r0, [r7, #16]
 8004f36:	f7ff fe97 	bl	8004c68 <move_window>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d11d      	bne.n	8004f7c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	8992      	ldrh	r2, [r2, #12]
 8004f4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f52:	fb00 f202 	mul.w	r2, r0, r2
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	440b      	add	r3, r1
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff fbec 	bl	8004738 <ld_dword>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f66:	617b      	str	r3, [r7, #20]
			break;
 8004f68:	e009      	b.n	8004f7e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	e006      	b.n	8004f7e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f70:	bf00      	nop
 8004f72:	e004      	b.n	8004f7e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f74:	bf00      	nop
 8004f76:	e002      	b.n	8004f7e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004f78:	bf00      	nop
 8004f7a:	e000      	b.n	8004f7e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004f7c:	bf00      	nop
		}
	}

	return val;
 8004f7e:	697b      	ldr	r3, [r7, #20]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b089      	sub	sp, #36	@ 0x24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004f94:	2302      	movs	r3, #2
 8004f96:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	f240 8109 	bls.w	80051b2 <put_fat+0x22a>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	f080 8103 	bcs.w	80051b2 <put_fat+0x22a>
		switch (fs->fs_type) {
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	f000 80b6 	beq.w	8005122 <put_fat+0x19a>
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	f300 80fb 	bgt.w	80051b2 <put_fat+0x22a>
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d003      	beq.n	8004fc8 <put_fat+0x40>
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	f000 8083 	beq.w	80050cc <put_fat+0x144>
 8004fc6:	e0f4      	b.n	80051b2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	899b      	ldrh	r3, [r3, #12]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fe6:	4413      	add	r3, r2
 8004fe8:	4619      	mov	r1, r3
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7ff fe3c 	bl	8004c68 <move_window>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ff4:	7ffb      	ldrb	r3, [r7, #31]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f040 80d4 	bne.w	80051a4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	61ba      	str	r2, [r7, #24]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	8992      	ldrh	r2, [r2, #12]
 800500c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005010:	fb00 f202 	mul.w	r2, r0, r2
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	440b      	add	r3, r1
 8005018:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00d      	beq.n	8005040 <put_fat+0xb8>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	b25b      	sxtb	r3, r3
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	b25a      	sxtb	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	b25b      	sxtb	r3, r3
 8005038:	4313      	orrs	r3, r2
 800503a:	b25b      	sxtb	r3, r3
 800503c:	b2db      	uxtb	r3, r3
 800503e:	e001      	b.n	8005044 <put_fat+0xbc>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	899b      	ldrh	r3, [r3, #12]
 8005056:	4619      	mov	r1, r3
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	fbb3 f3f1 	udiv	r3, r3, r1
 800505e:	4413      	add	r3, r2
 8005060:	4619      	mov	r1, r3
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff fe00 	bl	8004c68 <move_window>
 8005068:	4603      	mov	r3, r0
 800506a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800506c:	7ffb      	ldrb	r3, [r7, #31]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f040 809a 	bne.w	80051a8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	899b      	ldrh	r3, [r3, #12]
 800507e:	461a      	mov	r2, r3
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	fbb3 f0f2 	udiv	r0, r3, r2
 8005086:	fb00 f202 	mul.w	r2, r0, r2
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	440b      	add	r3, r1
 800508e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <put_fat+0x11a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	091b      	lsrs	r3, r3, #4
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	e00e      	b.n	80050c0 <put_fat+0x138>
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	b25b      	sxtb	r3, r3
 80050a8:	f023 030f 	bic.w	r3, r3, #15
 80050ac:	b25a      	sxtb	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	b25b      	sxtb	r3, r3
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	b25b      	sxtb	r3, r3
 80050ba:	4313      	orrs	r3, r2
 80050bc:	b25b      	sxtb	r3, r3
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	70da      	strb	r2, [r3, #3]
			break;
 80050ca:	e072      	b.n	80051b2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	899b      	ldrh	r3, [r3, #12]
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	4619      	mov	r1, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80050e0:	4413      	add	r3, r2
 80050e2:	4619      	mov	r1, r3
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff fdbf 	bl	8004c68 <move_window>
 80050ea:	4603      	mov	r3, r0
 80050ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80050ee:	7ffb      	ldrb	r3, [r7, #31]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d15b      	bne.n	80051ac <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	8992      	ldrh	r2, [r2, #12]
 8005102:	fbb3 f0f2 	udiv	r0, r3, r2
 8005106:	fb00 f202 	mul.w	r2, r0, r2
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	440b      	add	r3, r1
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	b292      	uxth	r2, r2
 8005112:	4611      	mov	r1, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff fb32 	bl	800477e <st_word>
			fs->wflag = 1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	70da      	strb	r2, [r3, #3]
			break;
 8005120:	e047      	b.n	80051b2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	899b      	ldrh	r3, [r3, #12]
 800512a:	089b      	lsrs	r3, r3, #2
 800512c:	b29b      	uxth	r3, r3
 800512e:	4619      	mov	r1, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	fbb3 f3f1 	udiv	r3, r3, r1
 8005136:	4413      	add	r3, r2
 8005138:	4619      	mov	r1, r3
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff fd94 	bl	8004c68 <move_window>
 8005140:	4603      	mov	r3, r0
 8005142:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005144:	7ffb      	ldrb	r3, [r7, #31]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d132      	bne.n	80051b0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	8992      	ldrh	r2, [r2, #12]
 800515e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005162:	fb00 f202 	mul.w	r2, r0, r2
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	440b      	add	r3, r1
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fae4 	bl	8004738 <ld_dword>
 8005170:	4603      	mov	r3, r0
 8005172:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005176:	4323      	orrs	r3, r4
 8005178:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	8992      	ldrh	r2, [r2, #12]
 8005188:	fbb3 f0f2 	udiv	r0, r3, r2
 800518c:	fb00 f202 	mul.w	r2, r0, r2
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	440b      	add	r3, r1
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff fb0c 	bl	80047b4 <st_dword>
			fs->wflag = 1;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	70da      	strb	r2, [r3, #3]
			break;
 80051a2:	e006      	b.n	80051b2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80051a4:	bf00      	nop
 80051a6:	e004      	b.n	80051b2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80051a8:	bf00      	nop
 80051aa:	e002      	b.n	80051b2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80051ac:	bf00      	nop
 80051ae:	e000      	b.n	80051b2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80051b0:	bf00      	nop
		}
	}
	return res;
 80051b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3724      	adds	r7, #36	@ 0x24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd90      	pop	{r4, r7, pc}

080051bc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d904      	bls.n	80051e2 <remove_chain+0x26>
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d301      	bcc.n	80051e6 <remove_chain+0x2a>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e04b      	b.n	800527e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00c      	beq.n	8005206 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80051ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	69b8      	ldr	r0, [r7, #24]
 80051f4:	f7ff fec8 	bl	8004f88 <put_fat>
 80051f8:	4603      	mov	r3, r0
 80051fa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80051fc:	7ffb      	ldrb	r3, [r7, #31]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <remove_chain+0x4a>
 8005202:	7ffb      	ldrb	r3, [r7, #31]
 8005204:	e03b      	b.n	800527e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7ff fdea 	bl	8004de2 <get_fat>
 800520e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d031      	beq.n	800527a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <remove_chain+0x64>
 800521c:	2302      	movs	r3, #2
 800521e:	e02e      	b.n	800527e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005226:	d101      	bne.n	800522c <remove_chain+0x70>
 8005228:	2301      	movs	r3, #1
 800522a:	e028      	b.n	800527e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800522c:	2200      	movs	r2, #0
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	69b8      	ldr	r0, [r7, #24]
 8005232:	f7ff fea9 	bl	8004f88 <put_fat>
 8005236:	4603      	mov	r3, r0
 8005238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800523a:	7ffb      	ldrb	r3, [r7, #31]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <remove_chain+0x88>
 8005240:	7ffb      	ldrb	r3, [r7, #31]
 8005242:	e01c      	b.n	800527e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	699a      	ldr	r2, [r3, #24]
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	3b02      	subs	r3, #2
 800524e:	429a      	cmp	r2, r3
 8005250:	d20b      	bcs.n	800526a <remove_chain+0xae>
			fs->free_clst++;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	791b      	ldrb	r3, [r3, #4]
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	b2da      	uxtb	r2, r3
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	429a      	cmp	r2, r3
 8005276:	d3c6      	bcc.n	8005206 <remove_chain+0x4a>
 8005278:	e000      	b.n	800527c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800527a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3720      	adds	r7, #32
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b088      	sub	sp, #32
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10d      	bne.n	80052b8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <create_chain+0x2c>
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d31b      	bcc.n	80052ea <create_chain+0x64>
 80052b2:	2301      	movs	r3, #1
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	e018      	b.n	80052ea <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fd91 	bl	8004de2 <get_fat>
 80052c0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d801      	bhi.n	80052cc <create_chain+0x46>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e070      	b.n	80053ae <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052d2:	d101      	bne.n	80052d8 <create_chain+0x52>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	e06a      	b.n	80053ae <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d201      	bcs.n	80052e6 <create_chain+0x60>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	e063      	b.n	80053ae <create_chain+0x128>
		scl = clst;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	3301      	adds	r3, #1
 80052f2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d307      	bcc.n	800530e <create_chain+0x88>
				ncl = 2;
 80052fe:	2302      	movs	r3, #2
 8005300:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	429a      	cmp	r2, r3
 8005308:	d901      	bls.n	800530e <create_chain+0x88>
 800530a:	2300      	movs	r3, #0
 800530c:	e04f      	b.n	80053ae <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800530e:	69f9      	ldr	r1, [r7, #28]
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff fd66 	bl	8004de2 <get_fat>
 8005316:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00e      	beq.n	800533c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d003      	beq.n	800532c <create_chain+0xa6>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800532a:	d101      	bne.n	8005330 <create_chain+0xaa>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	e03e      	b.n	80053ae <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	429a      	cmp	r2, r3
 8005336:	d1da      	bne.n	80052ee <create_chain+0x68>
 8005338:	2300      	movs	r3, #0
 800533a:	e038      	b.n	80053ae <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800533c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800533e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005342:	69f9      	ldr	r1, [r7, #28]
 8005344:	6938      	ldr	r0, [r7, #16]
 8005346:	f7ff fe1f 	bl	8004f88 <put_fat>
 800534a:	4603      	mov	r3, r0
 800534c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d109      	bne.n	8005368 <create_chain+0xe2>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d006      	beq.n	8005368 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800535a:	69fa      	ldr	r2, [r7, #28]
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	6938      	ldr	r0, [r7, #16]
 8005360:	f7ff fe12 	bl	8004f88 <put_fat>
 8005364:	4603      	mov	r3, r0
 8005366:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d116      	bne.n	800539c <create_chain+0x116>
		fs->last_clst = ncl;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	3b02      	subs	r3, #2
 800537e:	429a      	cmp	r2, r3
 8005380:	d804      	bhi.n	800538c <create_chain+0x106>
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	1e5a      	subs	r2, r3, #1
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	791b      	ldrb	r3, [r3, #4]
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	b2da      	uxtb	r2, r3
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	711a      	strb	r2, [r3, #4]
 800539a:	e007      	b.n	80053ac <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d102      	bne.n	80053a8 <create_chain+0x122>
 80053a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053a6:	e000      	b.n	80053aa <create_chain+0x124>
 80053a8:	2301      	movs	r3, #1
 80053aa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80053ac:	69fb      	ldr	r3, [r7, #28]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b087      	sub	sp, #28
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ca:	3304      	adds	r3, #4
 80053cc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	899b      	ldrh	r3, [r3, #12]
 80053d2:	461a      	mov	r2, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	8952      	ldrh	r2, [r2, #10]
 80053de:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1d1a      	adds	r2, r3, #4
 80053e8:	613a      	str	r2, [r7, #16]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <clmt_clust+0x42>
 80053f4:	2300      	movs	r3, #0
 80053f6:	e010      	b.n	800541a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d307      	bcc.n	8005410 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	3304      	adds	r3, #4
 800540c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800540e:	e7e9      	b.n	80053e4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005410:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	4413      	add	r3, r2
}
 800541a:	4618      	mov	r0, r3
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b086      	sub	sp, #24
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800543c:	d204      	bcs.n	8005448 <dir_sdi+0x22>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <dir_sdi+0x26>
		return FR_INT_ERR;
 8005448:	2302      	movs	r3, #2
 800544a:	e071      	b.n	8005530 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <dir_sdi+0x46>
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d902      	bls.n	800546c <dir_sdi+0x46>
		clst = fs->dirbase;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10c      	bne.n	800548c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	8912      	ldrh	r2, [r2, #8]
 800547a:	4293      	cmp	r3, r2
 800547c:	d301      	bcc.n	8005482 <dir_sdi+0x5c>
 800547e:	2302      	movs	r3, #2
 8005480:	e056      	b.n	8005530 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	61da      	str	r2, [r3, #28]
 800548a:	e02d      	b.n	80054e8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	895b      	ldrh	r3, [r3, #10]
 8005490:	461a      	mov	r2, r3
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	899b      	ldrh	r3, [r3, #12]
 8005496:	fb02 f303 	mul.w	r3, r2, r3
 800549a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800549c:	e019      	b.n	80054d2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6979      	ldr	r1, [r7, #20]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fc9d 	bl	8004de2 <get_fat>
 80054a8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054b0:	d101      	bne.n	80054b6 <dir_sdi+0x90>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e03c      	b.n	8005530 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d904      	bls.n	80054c6 <dir_sdi+0xa0>
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d301      	bcc.n	80054ca <dir_sdi+0xa4>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e032      	b.n	8005530 <dir_sdi+0x10a>
			ofs -= csz;
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d2e1      	bcs.n	800549e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80054da:	6979      	ldr	r1, [r7, #20]
 80054dc:	6938      	ldr	r0, [r7, #16]
 80054de:	f7ff fc61 	bl	8004da4 <clust2sect>
 80054e2:	4602      	mov	r2, r0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <dir_sdi+0xd4>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e01a      	b.n	8005530 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69da      	ldr	r2, [r3, #28]
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	899b      	ldrh	r3, [r3, #12]
 8005502:	4619      	mov	r1, r3
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	fbb3 f3f1 	udiv	r3, r3, r1
 800550a:	441a      	add	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	899b      	ldrh	r3, [r3, #12]
 800551a:	461a      	mov	r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005522:	fb00 f202 	mul.w	r2, r0, r2
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	18ca      	adds	r2, r1, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	3320      	adds	r3, #32
 800554e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <dir_next+0x28>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800555e:	d301      	bcc.n	8005564 <dir_next+0x2c>
 8005560:	2304      	movs	r3, #4
 8005562:	e0bb      	b.n	80056dc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	899b      	ldrh	r3, [r3, #12]
 8005568:	461a      	mov	r2, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005570:	fb01 f202 	mul.w	r2, r1, r2
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 809d 	bne.w	80056b6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	8912      	ldrh	r2, [r2, #8]
 8005596:	4293      	cmp	r3, r2
 8005598:	f0c0 808d 	bcc.w	80056b6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	61da      	str	r2, [r3, #28]
 80055a2:	2304      	movs	r3, #4
 80055a4:	e09a      	b.n	80056dc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	899b      	ldrh	r3, [r3, #12]
 80055aa:	461a      	mov	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	8952      	ldrh	r2, [r2, #10]
 80055b6:	3a01      	subs	r2, #1
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d17b      	bne.n	80056b6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	4619      	mov	r1, r3
 80055c6:	4610      	mov	r0, r2
 80055c8:	f7ff fc0b 	bl	8004de2 <get_fat>
 80055cc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d801      	bhi.n	80055d8 <dir_next+0xa0>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e081      	b.n	80056dc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055de:	d101      	bne.n	80055e4 <dir_next+0xac>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e07b      	b.n	80056dc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d359      	bcc.n	80056a2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	61da      	str	r2, [r3, #28]
 80055fa:	2304      	movs	r3, #4
 80055fc:	e06e      	b.n	80056dc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f7ff fe3d 	bl	8005286 <create_chain>
 800560c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <dir_next+0xe0>
 8005614:	2307      	movs	r3, #7
 8005616:	e061      	b.n	80056dc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <dir_next+0xea>
 800561e:	2302      	movs	r3, #2
 8005620:	e05c      	b.n	80056dc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005628:	d101      	bne.n	800562e <dir_next+0xf6>
 800562a:	2301      	movs	r3, #1
 800562c:	e056      	b.n	80056dc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f7ff fad6 	bl	8004be0 <sync_window>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <dir_next+0x106>
 800563a:	2301      	movs	r3, #1
 800563c:	e04e      	b.n	80056dc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	899b      	ldrh	r3, [r3, #12]
 8005648:	461a      	mov	r2, r3
 800564a:	2100      	movs	r1, #0
 800564c:	f7ff f8ff 	bl	800484e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005650:	2300      	movs	r3, #0
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	6979      	ldr	r1, [r7, #20]
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff fba4 	bl	8004da4 <clust2sect>
 800565c:	4602      	mov	r2, r0
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	635a      	str	r2, [r3, #52]	@ 0x34
 8005662:	e012      	b.n	800568a <dir_next+0x152>
						fs->wflag = 1;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff fab8 	bl	8004be0 <sync_window>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <dir_next+0x142>
 8005676:	2301      	movs	r3, #1
 8005678:	e030      	b.n	80056dc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	3301      	adds	r3, #1
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	635a      	str	r2, [r3, #52]	@ 0x34
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	895b      	ldrh	r3, [r3, #10]
 800568e:	461a      	mov	r2, r3
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4293      	cmp	r3, r2
 8005694:	d3e6      	bcc.n	8005664 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad2      	subs	r2, r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80056a8:	6979      	ldr	r1, [r7, #20]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f7ff fb7a 	bl	8004da4 <clust2sect>
 80056b0:	4602      	mov	r2, r0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	899b      	ldrh	r3, [r3, #12]
 80056c6:	461a      	mov	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80056ce:	fb00 f202 	mul.w	r2, r0, r2
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	18ca      	adds	r2, r1, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80056f4:	2100      	movs	r1, #0
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff fe95 	bl	8005426 <dir_sdi>
 80056fc:	4603      	mov	r3, r0
 80056fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005700:	7dfb      	ldrb	r3, [r7, #23]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d12b      	bne.n	800575e <dir_alloc+0x7a>
		n = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4619      	mov	r1, r3
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff faa9 	bl	8004c68 <move_window>
 8005716:	4603      	mov	r3, r0
 8005718:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800571a:	7dfb      	ldrb	r3, [r7, #23]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11d      	bne.n	800575c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2be5      	cmp	r3, #229	@ 0xe5
 8005728:	d004      	beq.n	8005734 <dir_alloc+0x50>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d107      	bne.n	8005744 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	3301      	adds	r3, #1
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d102      	bne.n	8005748 <dir_alloc+0x64>
 8005742:	e00c      	b.n	800575e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005744:	2300      	movs	r3, #0
 8005746:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005748:	2101      	movs	r1, #1
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff fef4 	bl	8005538 <dir_next>
 8005750:	4603      	mov	r3, r0
 8005752:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005754:	7dfb      	ldrb	r3, [r7, #23]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0d7      	beq.n	800570a <dir_alloc+0x26>
 800575a:	e000      	b.n	800575e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800575c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	2b04      	cmp	r3, #4
 8005762:	d101      	bne.n	8005768 <dir_alloc+0x84>
 8005764:	2307      	movs	r3, #7
 8005766:	75fb      	strb	r3, [r7, #23]
	return res;
 8005768:	7dfb      	ldrb	r3, [r7, #23]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	331a      	adds	r3, #26
 8005780:	4618      	mov	r0, r3
 8005782:	f7fe ffc1 	bl	8004708 <ld_word>
 8005786:	4603      	mov	r3, r0
 8005788:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d109      	bne.n	80057a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	3314      	adds	r3, #20
 8005796:	4618      	mov	r0, r3
 8005798:	f7fe ffb6 	bl	8004708 <ld_word>
 800579c:	4603      	mov	r3, r0
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80057a6:	68fb      	ldr	r3, [r7, #12]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	331a      	adds	r3, #26
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	b292      	uxth	r2, r2
 80057c4:	4611      	mov	r1, r2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe ffd9 	bl	800477e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d109      	bne.n	80057e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f103 0214 	add.w	r2, r3, #20
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	0c1b      	lsrs	r3, r3, #16
 80057de:	b29b      	uxth	r3, r3
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f7fe ffcb 	bl	800477e <st_word>
	}
}
 80057e8:	bf00      	nop
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80057f0:	b590      	push	{r4, r7, lr}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	331a      	adds	r3, #26
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe ff82 	bl	8004708 <ld_word>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <cmp_lfn+0x1e>
 800580a:	2300      	movs	r3, #0
 800580c:	e059      	b.n	80058c2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005816:	1e5a      	subs	r2, r3, #1
 8005818:	4613      	mov	r3, r2
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005824:	2301      	movs	r3, #1
 8005826:	81fb      	strh	r3, [r7, #14]
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	e033      	b.n	8005896 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800582e:	4a27      	ldr	r2, [pc, #156]	@ (80058cc <cmp_lfn+0xdc>)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4413      	add	r3, r2
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	4413      	add	r3, r2
 800583c:	4618      	mov	r0, r3
 800583e:	f7fe ff63 	bl	8004708 <ld_word>
 8005842:	4603      	mov	r3, r0
 8005844:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005846:	89fb      	ldrh	r3, [r7, #14]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01a      	beq.n	8005882 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2bfe      	cmp	r3, #254	@ 0xfe
 8005850:	d812      	bhi.n	8005878 <cmp_lfn+0x88>
 8005852:	89bb      	ldrh	r3, [r7, #12]
 8005854:	4618      	mov	r0, r3
 8005856:	f002 fc43 	bl	80080e0 <ff_wtoupper>
 800585a:	4603      	mov	r3, r0
 800585c:	461c      	mov	r4, r3
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	617a      	str	r2, [r7, #20]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f002 fc37 	bl	80080e0 <ff_wtoupper>
 8005872:	4603      	mov	r3, r0
 8005874:	429c      	cmp	r4, r3
 8005876:	d001      	beq.n	800587c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005878:	2300      	movs	r3, #0
 800587a:	e022      	b.n	80058c2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800587c:	89bb      	ldrh	r3, [r7, #12]
 800587e:	81fb      	strh	r3, [r7, #14]
 8005880:	e006      	b.n	8005890 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005882:	89bb      	ldrh	r3, [r7, #12]
 8005884:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005888:	4293      	cmp	r3, r2
 800588a:	d001      	beq.n	8005890 <cmp_lfn+0xa0>
 800588c:	2300      	movs	r3, #0
 800588e:	e018      	b.n	80058c2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	3301      	adds	r3, #1
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	2b0c      	cmp	r3, #12
 800589a:	d9c8      	bls.n	800582e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00b      	beq.n	80058c0 <cmp_lfn+0xd0>
 80058a8:	89fb      	ldrh	r3, [r7, #14]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d008      	beq.n	80058c0 <cmp_lfn+0xd0>
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	4413      	add	r3, r2
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <cmp_lfn+0xd0>
 80058bc:	2300      	movs	r3, #0
 80058be:	e000      	b.n	80058c2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80058c0:	2301      	movs	r3, #1
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd90      	pop	{r4, r7, pc}
 80058ca:	bf00      	nop
 80058cc:	08008f4c 	.word	0x08008f4c

080058d0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	331a      	adds	r3, #26
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe ff12 	bl	8004708 <ld_word>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <pick_lfn+0x1e>
 80058ea:	2300      	movs	r3, #0
 80058ec:	e04d      	b.n	800598a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058f6:	1e5a      	subs	r2, r3, #1
 80058f8:	4613      	mov	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005904:	2301      	movs	r3, #1
 8005906:	81fb      	strh	r3, [r7, #14]
 8005908:	2300      	movs	r3, #0
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	e028      	b.n	8005960 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800590e:	4a21      	ldr	r2, [pc, #132]	@ (8005994 <pick_lfn+0xc4>)
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4413      	add	r3, r2
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	4413      	add	r3, r2
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe fef3 	bl	8004708 <ld_word>
 8005922:	4603      	mov	r3, r0
 8005924:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005926:	89fb      	ldrh	r3, [r7, #14]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00f      	beq.n	800594c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2bfe      	cmp	r3, #254	@ 0xfe
 8005930:	d901      	bls.n	8005936 <pick_lfn+0x66>
 8005932:	2300      	movs	r3, #0
 8005934:	e029      	b.n	800598a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005936:	89bb      	ldrh	r3, [r7, #12]
 8005938:	81fb      	strh	r3, [r7, #14]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	617a      	str	r2, [r7, #20]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	4413      	add	r3, r2
 8005946:	89fa      	ldrh	r2, [r7, #14]
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	e006      	b.n	800595a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800594c:	89bb      	ldrh	r3, [r7, #12]
 800594e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005952:	4293      	cmp	r3, r2
 8005954:	d001      	beq.n	800595a <pick_lfn+0x8a>
 8005956:	2300      	movs	r3, #0
 8005958:	e017      	b.n	800598a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	3301      	adds	r3, #1
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2b0c      	cmp	r3, #12
 8005964:	d9d3      	bls.n	800590e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2bfe      	cmp	r3, #254	@ 0xfe
 8005976:	d901      	bls.n	800597c <pick_lfn+0xac>
 8005978:	2300      	movs	r3, #0
 800597a:	e006      	b.n	800598a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	4413      	add	r3, r2
 8005984:	2200      	movs	r2, #0
 8005986:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8005988:	2301      	movs	r3, #1
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	08008f4c 	.word	0x08008f4c

08005998 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4611      	mov	r1, r2
 80059a4:	461a      	mov	r2, r3
 80059a6:	460b      	mov	r3, r1
 80059a8:	71fb      	strb	r3, [r7, #7]
 80059aa:	4613      	mov	r3, r2
 80059ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	330d      	adds	r3, #13
 80059b2:	79ba      	ldrb	r2, [r7, #6]
 80059b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	330b      	adds	r3, #11
 80059ba:	220f      	movs	r2, #15
 80059bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	330c      	adds	r3, #12
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	331a      	adds	r3, #26
 80059ca:	2100      	movs	r1, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe fed6 	bl	800477e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	1e5a      	subs	r2, r3, #1
 80059d6:	4613      	mov	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	82fb      	strh	r3, [r7, #22]
 80059e6:	2300      	movs	r3, #0
 80059e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80059ea:	8afb      	ldrh	r3, [r7, #22]
 80059ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d007      	beq.n	8005a04 <put_lfn+0x6c>
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	61fa      	str	r2, [r7, #28]
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005a04:	4a17      	ldr	r2, [pc, #92]	@ (8005a64 <put_lfn+0xcc>)
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	4413      	add	r3, r2
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4413      	add	r3, r2
 8005a12:	8afa      	ldrh	r2, [r7, #22]
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe feb1 	bl	800477e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005a1c:	8afb      	ldrh	r3, [r7, #22]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <put_lfn+0x90>
 8005a22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a26:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b0c      	cmp	r3, #12
 8005a32:	d9da      	bls.n	80059ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005a34:	8afb      	ldrh	r3, [r7, #22]
 8005a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d006      	beq.n	8005a4c <put_lfn+0xb4>
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <put_lfn+0xbc>
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a52:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	79fa      	ldrb	r2, [r7, #7]
 8005a58:	701a      	strb	r2, [r3, #0]
}
 8005a5a:	bf00      	nop
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	08008f4c 	.word	0x08008f4c

08005a68 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08c      	sub	sp, #48	@ 0x30
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005a76:	220b      	movs	r2, #11
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7fe fec6 	bl	800480c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b05      	cmp	r3, #5
 8005a84:	d92b      	bls.n	8005ade <gen_numname+0x76>
		sr = seq;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005a8a:	e022      	b.n	8005ad2 <gen_numname+0x6a>
			wc = *lfn++;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	1c9a      	adds	r2, r3, #2
 8005a90:	607a      	str	r2, [r7, #4]
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005a96:	2300      	movs	r3, #0
 8005a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a9a:	e017      	b.n	8005acc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	005a      	lsls	r2, r3, #1
 8005aa0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	4413      	add	r3, r2
 8005aa8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005aaa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005aac:	085b      	lsrs	r3, r3, #1
 8005aae:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <gen_numname+0x5e>
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005ac0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005ac4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac8:	3301      	adds	r3, #1
 8005aca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ace:	2b0f      	cmp	r3, #15
 8005ad0:	d9e4      	bls.n	8005a9c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1d8      	bne.n	8005a8c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005ade:	2307      	movs	r3, #7
 8005ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	3330      	adds	r3, #48	@ 0x30
 8005aee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005af2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005af6:	2b39      	cmp	r3, #57	@ 0x39
 8005af8:	d904      	bls.n	8005b04 <gen_numname+0x9c>
 8005afa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005afe:	3307      	adds	r3, #7
 8005b00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b06:	1e5a      	subs	r2, r3, #1
 8005b08:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005b0a:	3330      	adds	r3, #48	@ 0x30
 8005b0c:	443b      	add	r3, r7
 8005b0e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005b12:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	091b      	lsrs	r3, r3, #4
 8005b1a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1df      	bne.n	8005ae2 <gen_numname+0x7a>
	ns[i] = '~';
 8005b22:	f107 0214 	add.w	r2, r7, #20
 8005b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b28:	4413      	add	r3, r2
 8005b2a:	227e      	movs	r2, #126	@ 0x7e
 8005b2c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005b2e:	2300      	movs	r3, #0
 8005b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b32:	e002      	b.n	8005b3a <gen_numname+0xd2>
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	3301      	adds	r3, #1
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d205      	bcs.n	8005b4e <gen_numname+0xe6>
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	4413      	add	r3, r2
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d1f2      	bne.n	8005b34 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b50:	2b07      	cmp	r3, #7
 8005b52:	d807      	bhi.n	8005b64 <gen_numname+0xfc>
 8005b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005b5a:	3330      	adds	r3, #48	@ 0x30
 8005b5c:	443b      	add	r3, r7
 8005b5e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005b62:	e000      	b.n	8005b66 <gen_numname+0xfe>
 8005b64:	2120      	movs	r1, #32
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	460a      	mov	r2, r1
 8005b72:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	2b07      	cmp	r3, #7
 8005b78:	d9e9      	bls.n	8005b4e <gen_numname+0xe6>
}
 8005b7a:	bf00      	nop
 8005b7c:	bf00      	nop
 8005b7e:	3730      	adds	r7, #48	@ 0x30
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005b90:	230b      	movs	r3, #11
 8005b92:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	0852      	lsrs	r2, r2, #1
 8005b9a:	01db      	lsls	r3, r3, #7
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	1c59      	adds	r1, r3, #1
 8005ba4:	6079      	str	r1, [r7, #4]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	4413      	add	r3, r2
 8005baa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ed      	bne.n	8005b94 <sum_sfn+0x10>
	return sum;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b086      	sub	sp, #24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8005bda:	23ff      	movs	r3, #255	@ 0xff
 8005bdc:	757b      	strb	r3, [r7, #21]
 8005bde:	23ff      	movs	r3, #255	@ 0xff
 8005be0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8005be2:	e081      	b.n	8005ce8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	4619      	mov	r1, r3
 8005bea:	6938      	ldr	r0, [r7, #16]
 8005bec:	f7ff f83c 	bl	8004c68 <move_window>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d17c      	bne.n	8005cf4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8005c02:	7dbb      	ldrb	r3, [r7, #22]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005c08:	2304      	movs	r3, #4
 8005c0a:	75fb      	strb	r3, [r7, #23]
 8005c0c:	e077      	b.n	8005cfe <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	330b      	adds	r3, #11
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c1a:	73fb      	strb	r3, [r7, #15]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	7bfa      	ldrb	r2, [r7, #15]
 8005c20:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005c22:	7dbb      	ldrb	r3, [r7, #22]
 8005c24:	2be5      	cmp	r3, #229	@ 0xe5
 8005c26:	d00e      	beq.n	8005c46 <dir_read+0x80>
 8005c28:	7dbb      	ldrb	r3, [r7, #22]
 8005c2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c2c:	d00b      	beq.n	8005c46 <dir_read+0x80>
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	f023 0320 	bic.w	r3, r3, #32
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	bf0c      	ite	eq
 8005c38:	2301      	moveq	r3, #1
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d002      	beq.n	8005c4c <dir_read+0x86>
				ord = 0xFF;
 8005c46:	23ff      	movs	r3, #255	@ 0xff
 8005c48:	757b      	strb	r3, [r7, #21]
 8005c4a:	e044      	b.n	8005cd6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	2b0f      	cmp	r3, #15
 8005c50:	d12f      	bne.n	8005cb2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8005c52:	7dbb      	ldrb	r3, [r7, #22]
 8005c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00d      	beq.n	8005c78 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	7b5b      	ldrb	r3, [r3, #13]
 8005c62:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8005c64:	7dbb      	ldrb	r3, [r7, #22]
 8005c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c6a:	75bb      	strb	r3, [r7, #22]
 8005c6c:	7dbb      	ldrb	r3, [r7, #22]
 8005c6e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	695a      	ldr	r2, [r3, #20]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005c78:	7dba      	ldrb	r2, [r7, #22]
 8005c7a:	7d7b      	ldrb	r3, [r7, #21]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d115      	bne.n	8005cac <dir_read+0xe6>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	330d      	adds	r3, #13
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	7d3a      	ldrb	r2, [r7, #20]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d10e      	bne.n	8005cac <dir_read+0xe6>
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	691a      	ldr	r2, [r3, #16]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f7ff fe19 	bl	80058d0 <pick_lfn>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <dir_read+0xe6>
 8005ca4:	7d7b      	ldrb	r3, [r7, #21]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e000      	b.n	8005cae <dir_read+0xe8>
 8005cac:	23ff      	movs	r3, #255	@ 0xff
 8005cae:	757b      	strb	r3, [r7, #21]
 8005cb0:	e011      	b.n	8005cd6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005cb2:	7d7b      	ldrb	r3, [r7, #21]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <dir_read+0x106>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff ff61 	bl	8005b84 <sum_sfn>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	7d3b      	ldrb	r3, [r7, #20]
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d015      	beq.n	8005cf8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cd2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8005cd4:	e010      	b.n	8005cf8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff fc2d 	bl	8005538 <dir_next>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <dir_read+0x136>
	while (dp->sect) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f47f af79 	bne.w	8005be4 <dir_read+0x1e>
 8005cf2:	e004      	b.n	8005cfe <dir_read+0x138>
		if (res != FR_OK) break;
 8005cf4:	bf00      	nop
 8005cf6:	e002      	b.n	8005cfe <dir_read+0x138>
					break;
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <dir_read+0x138>
		if (res != FR_OK) break;
 8005cfc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <dir_read+0x144>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	61da      	str	r2, [r3, #28]
	return res;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005d22:	2100      	movs	r1, #0
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fb7e 	bl	8005426 <dir_sdi>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <dir_find+0x24>
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	e0a9      	b.n	8005e8c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005d38:	23ff      	movs	r3, #255	@ 0xff
 8005d3a:	753b      	strb	r3, [r7, #20]
 8005d3c:	7d3b      	ldrb	r3, [r7, #20]
 8005d3e:	757b      	strb	r3, [r7, #21]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d46:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6938      	ldr	r0, [r7, #16]
 8005d50:	f7fe ff8a 	bl	8004c68 <move_window>
 8005d54:	4603      	mov	r3, r0
 8005d56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f040 8090 	bne.w	8005e80 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005d68:	7dbb      	ldrb	r3, [r7, #22]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d102      	bne.n	8005d74 <dir_find+0x60>
 8005d6e:	2304      	movs	r3, #4
 8005d70:	75fb      	strb	r3, [r7, #23]
 8005d72:	e08a      	b.n	8005e8a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	330b      	adds	r3, #11
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d80:	73fb      	strb	r3, [r7, #15]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	7bfa      	ldrb	r2, [r7, #15]
 8005d86:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005d88:	7dbb      	ldrb	r3, [r7, #22]
 8005d8a:	2be5      	cmp	r3, #229	@ 0xe5
 8005d8c:	d007      	beq.n	8005d9e <dir_find+0x8a>
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d009      	beq.n	8005dac <dir_find+0x98>
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	2b0f      	cmp	r3, #15
 8005d9c:	d006      	beq.n	8005dac <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005d9e:	23ff      	movs	r3, #255	@ 0xff
 8005da0:	757b      	strb	r3, [r7, #21]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005da8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005daa:	e05e      	b.n	8005e6a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	2b0f      	cmp	r3, #15
 8005db0:	d136      	bne.n	8005e20 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d154      	bne.n	8005e6a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005dc0:	7dbb      	ldrb	r3, [r7, #22]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00d      	beq.n	8005de6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	7b5b      	ldrb	r3, [r3, #13]
 8005dd0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005dd2:	7dbb      	ldrb	r3, [r7, #22]
 8005dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dd8:	75bb      	strb	r3, [r7, #22]
 8005dda:	7dbb      	ldrb	r3, [r7, #22]
 8005ddc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005de6:	7dba      	ldrb	r2, [r7, #22]
 8005de8:	7d7b      	ldrb	r3, [r7, #21]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d115      	bne.n	8005e1a <dir_find+0x106>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	330d      	adds	r3, #13
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	7d3a      	ldrb	r2, [r7, #20]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d10e      	bne.n	8005e1a <dir_find+0x106>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f7ff fcf2 	bl	80057f0 <cmp_lfn>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <dir_find+0x106>
 8005e12:	7d7b      	ldrb	r3, [r7, #21]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	e000      	b.n	8005e1c <dir_find+0x108>
 8005e1a:	23ff      	movs	r3, #255	@ 0xff
 8005e1c:	757b      	strb	r3, [r7, #21]
 8005e1e:	e024      	b.n	8005e6a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005e20:	7d7b      	ldrb	r3, [r7, #21]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d109      	bne.n	8005e3a <dir_find+0x126>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff feaa 	bl	8005b84 <sum_sfn>
 8005e30:	4603      	mov	r3, r0
 8005e32:	461a      	mov	r2, r3
 8005e34:	7d3b      	ldrb	r3, [r7, #20]
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d024      	beq.n	8005e84 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <dir_find+0x14a>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a18      	ldr	r0, [r3, #32]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3324      	adds	r3, #36	@ 0x24
 8005e50:	220b      	movs	r2, #11
 8005e52:	4619      	mov	r1, r3
 8005e54:	f7fe fd16 	bl	8004884 <mem_cmp>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d014      	beq.n	8005e88 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005e5e:	23ff      	movs	r3, #255	@ 0xff
 8005e60:	757b      	strb	r3, [r7, #21]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e68:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff fb63 	bl	8005538 <dir_next>
 8005e72:	4603      	mov	r3, r0
 8005e74:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f43f af65 	beq.w	8005d48 <dir_find+0x34>
 8005e7e:	e004      	b.n	8005e8a <dir_find+0x176>
		if (res != FR_OK) break;
 8005e80:	bf00      	nop
 8005e82:	e002      	b.n	8005e8a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005e84:	bf00      	nop
 8005e86:	e000      	b.n	8005e8a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005e88:	bf00      	nop

	return res;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08c      	sub	sp, #48	@ 0x30
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005ea8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <dir_register+0x20>
 8005eb0:	2306      	movs	r3, #6
 8005eb2:	e0e0      	b.n	8006076 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eb8:	e002      	b.n	8005ec0 <dir_register+0x2c>
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	4413      	add	r3, r2
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1f4      	bne.n	8005eba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8005ed6:	f107 030c 	add.w	r3, r7, #12
 8005eda:	220c      	movs	r2, #12
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe fc95 	bl	800480c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d032      	beq.n	8005f52 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2240      	movs	r2, #64	@ 0x40
 8005ef0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ef8:	e016      	b.n	8005f28 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	f107 010c 	add.w	r1, r7, #12
 8005f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0a:	f7ff fdad 	bl	8005a68 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7ff ff00 	bl	8005d14 <dir_find>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f24:	3301      	adds	r3, #1
 8005f26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	2b63      	cmp	r3, #99	@ 0x63
 8005f2c:	d9e5      	bls.n	8005efa <dir_register+0x66>
 8005f2e:	e000      	b.n	8005f32 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005f30:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f34:	2b64      	cmp	r3, #100	@ 0x64
 8005f36:	d101      	bne.n	8005f3c <dir_register+0xa8>
 8005f38:	2307      	movs	r3, #7
 8005f3a:	e09c      	b.n	8006076 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d002      	beq.n	8005f4a <dir_register+0xb6>
 8005f44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f48:	e095      	b.n	8006076 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005f4a:	7dfa      	ldrb	r2, [r7, #23]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <dir_register+0xd8>
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	330c      	adds	r3, #12
 8005f60:	4a47      	ldr	r2, [pc, #284]	@ (8006080 <dir_register+0x1ec>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	089b      	lsrs	r3, r3, #2
 8005f68:	3301      	adds	r3, #1
 8005f6a:	e000      	b.n	8005f6e <dir_register+0xda>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005f70:	6a39      	ldr	r1, [r7, #32]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff fbb6 	bl	80056e4 <dir_alloc>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d148      	bne.n	8006018 <dir_register+0x184>
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	623b      	str	r3, [r7, #32]
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d042      	beq.n	8006018 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695a      	ldr	r2, [r3, #20]
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	015b      	lsls	r3, r3, #5
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff fa41 	bl	8005426 <dir_sdi>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005faa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d132      	bne.n	8006018 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3324      	adds	r3, #36	@ 0x24
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff fde4 	bl	8005b84 <sum_sfn>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	69f8      	ldr	r0, [r7, #28]
 8005fc8:	f7fe fe4e 	bl	8004c68 <move_window>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d11d      	bne.n	8006016 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	6918      	ldr	r0, [r3, #16]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a19      	ldr	r1, [r3, #32]
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	7efb      	ldrb	r3, [r7, #27]
 8005fe8:	f7ff fcd6 	bl	8005998 <put_lfn>
				fs->wflag = 1;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff fa9f 	bl	8005538 <dir_next>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006000:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006004:	2b00      	cmp	r3, #0
 8006006:	d107      	bne.n	8006018 <dir_register+0x184>
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	3b01      	subs	r3, #1
 800600c:	623b      	str	r3, [r7, #32]
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1d5      	bne.n	8005fc0 <dir_register+0x12c>
 8006014:	e000      	b.n	8006018 <dir_register+0x184>
				if (res != FR_OK) break;
 8006016:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006018:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800601c:	2b00      	cmp	r3, #0
 800601e:	d128      	bne.n	8006072 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	4619      	mov	r1, r3
 8006026:	69f8      	ldr	r0, [r7, #28]
 8006028:	f7fe fe1e 	bl	8004c68 <move_window>
 800602c:	4603      	mov	r3, r0
 800602e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006032:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006036:	2b00      	cmp	r3, #0
 8006038:	d11b      	bne.n	8006072 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	2220      	movs	r2, #32
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe fc03 	bl	800484e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a18      	ldr	r0, [r3, #32]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3324      	adds	r3, #36	@ 0x24
 8006050:	220b      	movs	r2, #11
 8006052:	4619      	mov	r1, r3
 8006054:	f7fe fbda 	bl	800480c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	330c      	adds	r3, #12
 8006064:	f002 0218 	and.w	r2, r2, #24
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2201      	movs	r2, #1
 8006070:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006072:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006076:	4618      	mov	r0, r3
 8006078:	3730      	adds	r7, #48	@ 0x30
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	4ec4ec4f 	.word	0x4ec4ec4f

08006084 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060a0:	d007      	beq.n	80060b2 <dir_remove+0x2e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff f9bc 	bl	8005426 <dir_sdi>
 80060ae:	4603      	mov	r3, r0
 80060b0:	e000      	b.n	80060b4 <dir_remove+0x30>
 80060b2:	2300      	movs	r3, #0
 80060b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d128      	bne.n	800610e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	4619      	mov	r1, r3
 80060c2:	6938      	ldr	r0, [r7, #16]
 80060c4:	f7fe fdd0 	bl	8004c68 <move_window>
 80060c8:	4603      	mov	r3, r0
 80060ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d115      	bne.n	80060fe <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	22e5      	movs	r2, #229	@ 0xe5
 80060d8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2201      	movs	r2, #1
 80060de:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d90b      	bls.n	8006102 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80060ea:	2100      	movs	r1, #0
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff fa23 	bl	8005538 <dir_next>
 80060f2:	4603      	mov	r3, r0
 80060f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0df      	beq.n	80060bc <dir_remove+0x38>
 80060fc:	e002      	b.n	8006104 <dir_remove+0x80>
			if (res != FR_OK) break;
 80060fe:	bf00      	nop
 8006100:	e000      	b.n	8006104 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8006102:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8006104:	7dfb      	ldrb	r3, [r7, #23]
 8006106:	2b04      	cmp	r3, #4
 8006108:	d101      	bne.n	800610e <dir_remove+0x8a>
 800610a:	2302      	movs	r3, #2
 800610c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08a      	sub	sp, #40	@ 0x28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	61ba      	str	r2, [r7, #24]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4413      	add	r3, r2
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006146:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006148:	2b1f      	cmp	r3, #31
 800614a:	d940      	bls.n	80061ce <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800614c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800614e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006150:	d006      	beq.n	8006160 <create_name+0x48>
 8006152:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006154:	2b5c      	cmp	r3, #92	@ 0x5c
 8006156:	d110      	bne.n	800617a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006158:	e002      	b.n	8006160 <create_name+0x48>
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	3301      	adds	r3, #1
 800615e:	61bb      	str	r3, [r7, #24]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	4413      	add	r3, r2
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b2f      	cmp	r3, #47	@ 0x2f
 800616a:	d0f6      	beq.n	800615a <create_name+0x42>
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	4413      	add	r3, r2
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b5c      	cmp	r3, #92	@ 0x5c
 8006176:	d0f0      	beq.n	800615a <create_name+0x42>
			break;
 8006178:	e02a      	b.n	80061d0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2bfe      	cmp	r3, #254	@ 0xfe
 800617e:	d901      	bls.n	8006184 <create_name+0x6c>
 8006180:	2306      	movs	r3, #6
 8006182:	e17d      	b.n	8006480 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006184:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006186:	b2db      	uxtb	r3, r3
 8006188:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800618a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800618c:	2101      	movs	r1, #1
 800618e:	4618      	mov	r0, r3
 8006190:	f001 ff6a 	bl	8008068 <ff_convert>
 8006194:	4603      	mov	r3, r0
 8006196:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006198:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <create_name+0x8a>
 800619e:	2306      	movs	r3, #6
 80061a0:	e16e      	b.n	8006480 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80061a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80061a6:	d809      	bhi.n	80061bc <create_name+0xa4>
 80061a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061aa:	4619      	mov	r1, r3
 80061ac:	488d      	ldr	r0, [pc, #564]	@ (80063e4 <create_name+0x2cc>)
 80061ae:	f7fe fb90 	bl	80048d2 <chk_chr>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <create_name+0xa4>
 80061b8:	2306      	movs	r3, #6
 80061ba:	e161      	b.n	8006480 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	617a      	str	r2, [r7, #20]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80061ca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80061cc:	e7b4      	b.n	8006138 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80061ce:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	441a      	add	r2, r3
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80061da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061dc:	2b1f      	cmp	r3, #31
 80061de:	d801      	bhi.n	80061e4 <create_name+0xcc>
 80061e0:	2304      	movs	r3, #4
 80061e2:	e000      	b.n	80061e6 <create_name+0xce>
 80061e4:	2300      	movs	r3, #0
 80061e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80061ea:	e011      	b.n	8006210 <create_name+0xf8>
		w = lfn[di - 1];
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80061f2:	3b01      	subs	r3, #1
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80061fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006200:	2b20      	cmp	r3, #32
 8006202:	d002      	beq.n	800620a <create_name+0xf2>
 8006204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006206:	2b2e      	cmp	r3, #46	@ 0x2e
 8006208:	d106      	bne.n	8006218 <create_name+0x100>
		di--;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	3b01      	subs	r3, #1
 800620e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1ea      	bne.n	80061ec <create_name+0xd4>
 8006216:	e000      	b.n	800621a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006218:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	2200      	movs	r2, #0
 8006224:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <create_name+0x118>
 800622c:	2306      	movs	r3, #6
 800622e:	e127      	b.n	8006480 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3324      	adds	r3, #36	@ 0x24
 8006234:	220b      	movs	r2, #11
 8006236:	2120      	movs	r1, #32
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe fb08 	bl	800484e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800623e:	2300      	movs	r3, #0
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	e002      	b.n	800624a <create_name+0x132>
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	3301      	adds	r3, #1
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	2b20      	cmp	r3, #32
 8006256:	d0f5      	beq.n	8006244 <create_name+0x12c>
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	2b2e      	cmp	r3, #46	@ 0x2e
 8006264:	d0ee      	beq.n	8006244 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d009      	beq.n	8006280 <create_name+0x168>
 800626c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006270:	f043 0303 	orr.w	r3, r3, #3
 8006274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006278:	e002      	b.n	8006280 <create_name+0x168>
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	3b01      	subs	r3, #1
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d009      	beq.n	800629a <create_name+0x182>
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800628c:	3b01      	subs	r3, #1
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	2b2e      	cmp	r3, #46	@ 0x2e
 8006298:	d1ef      	bne.n	800627a <create_name+0x162>

	i = b = 0; ni = 8;
 800629a:	2300      	movs	r3, #0
 800629c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80062a0:	2300      	movs	r3, #0
 80062a2:	623b      	str	r3, [r7, #32]
 80062a4:	2308      	movs	r3, #8
 80062a6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	61ba      	str	r2, [r7, #24]
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80062b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 8090 	beq.w	80063e0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80062c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	d006      	beq.n	80062d4 <create_name+0x1bc>
 80062c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80062ca:	d10a      	bne.n	80062e2 <create_name+0x1ca>
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d006      	beq.n	80062e2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80062d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062d8:	f043 0303 	orr.w	r3, r3, #3
 80062dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80062e0:	e07d      	b.n	80063de <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80062e2:	6a3a      	ldr	r2, [r7, #32]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d203      	bcs.n	80062f2 <create_name+0x1da>
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d123      	bne.n	800633a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	2b0b      	cmp	r3, #11
 80062f6:	d106      	bne.n	8006306 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80062f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062fc:	f043 0303 	orr.w	r3, r3, #3
 8006300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006304:	e075      	b.n	80063f2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	429a      	cmp	r2, r3
 800630c:	d005      	beq.n	800631a <create_name+0x202>
 800630e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006312:	f043 0303 	orr.w	r3, r3, #3
 8006316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	429a      	cmp	r2, r3
 8006320:	d866      	bhi.n	80063f0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	2308      	movs	r3, #8
 8006328:	623b      	str	r3, [r7, #32]
 800632a:	230b      	movs	r3, #11
 800632c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800632e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006338:	e051      	b.n	80063de <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800633a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800633c:	2b7f      	cmp	r3, #127	@ 0x7f
 800633e:	d914      	bls.n	800636a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006340:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006342:	2100      	movs	r1, #0
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fe8f 	bl	8008068 <ff_convert>
 800634a:	4603      	mov	r3, r0
 800634c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800634e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <create_name+0x246>
 8006354:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006356:	3b80      	subs	r3, #128	@ 0x80
 8006358:	4a23      	ldr	r2, [pc, #140]	@ (80063e8 <create_name+0x2d0>)
 800635a:	5cd3      	ldrb	r3, [r2, r3]
 800635c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800635e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006362:	f043 0302 	orr.w	r3, r3, #2
 8006366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800636a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <create_name+0x268>
 8006370:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006372:	4619      	mov	r1, r3
 8006374:	481d      	ldr	r0, [pc, #116]	@ (80063ec <create_name+0x2d4>)
 8006376:	f7fe faac 	bl	80048d2 <chk_chr>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d008      	beq.n	8006392 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006380:	235f      	movs	r3, #95	@ 0x5f
 8006382:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006388:	f043 0303 	orr.w	r3, r3, #3
 800638c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006390:	e01b      	b.n	80063ca <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006394:	2b40      	cmp	r3, #64	@ 0x40
 8006396:	d909      	bls.n	80063ac <create_name+0x294>
 8006398:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800639a:	2b5a      	cmp	r3, #90	@ 0x5a
 800639c:	d806      	bhi.n	80063ac <create_name+0x294>
					b |= 2;
 800639e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063a2:	f043 0302 	orr.w	r3, r3, #2
 80063a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80063aa:	e00e      	b.n	80063ca <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80063ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ae:	2b60      	cmp	r3, #96	@ 0x60
 80063b0:	d90b      	bls.n	80063ca <create_name+0x2b2>
 80063b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063b4:	2b7a      	cmp	r3, #122	@ 0x7a
 80063b6:	d808      	bhi.n	80063ca <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80063b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80063c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063c6:	3b20      	subs	r3, #32
 80063c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	623a      	str	r2, [r7, #32]
 80063d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80063d2:	b2d1      	uxtb	r1, r2
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	4413      	add	r3, r2
 80063d8:	460a      	mov	r2, r1
 80063da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80063de:	e763      	b.n	80062a8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80063e0:	bf00      	nop
 80063e2:	e006      	b.n	80063f2 <create_name+0x2da>
 80063e4:	08008e6c 	.word	0x08008e6c
 80063e8:	08008ecc 	.word	0x08008ecc
 80063ec:	08008e78 	.word	0x08008e78
			if (si > di) break;			/* No extension */
 80063f0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80063f8:	2be5      	cmp	r3, #229	@ 0xe5
 80063fa:	d103      	bne.n	8006404 <create_name+0x2ec>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2205      	movs	r2, #5
 8006400:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	2b08      	cmp	r3, #8
 8006408:	d104      	bne.n	8006414 <create_name+0x2fc>
 800640a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006414:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006418:	f003 030c 	and.w	r3, r3, #12
 800641c:	2b0c      	cmp	r3, #12
 800641e:	d005      	beq.n	800642c <create_name+0x314>
 8006420:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	2b03      	cmp	r3, #3
 800642a:	d105      	bne.n	8006438 <create_name+0x320>
 800642c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006430:	f043 0302 	orr.w	r3, r3, #2
 8006434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d117      	bne.n	8006474 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006444:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	2b01      	cmp	r3, #1
 800644e:	d105      	bne.n	800645c <create_name+0x344>
 8006450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006454:	f043 0310 	orr.w	r3, r3, #16
 8006458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800645c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006460:	f003 030c 	and.w	r3, r3, #12
 8006464:	2b04      	cmp	r3, #4
 8006466:	d105      	bne.n	8006474 <create_name+0x35c>
 8006468:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800646c:	f043 0308 	orr.w	r3, r3, #8
 8006470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800647a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800647e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006480:	4618      	mov	r0, r3
 8006482:	3728      	adds	r7, #40	@ 0x28
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800649c:	e002      	b.n	80064a4 <follow_path+0x1c>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80064aa:	d0f8      	beq.n	800649e <follow_path+0x16>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80064b2:	d0f4      	beq.n	800649e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2200      	movs	r2, #0
 80064b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b1f      	cmp	r3, #31
 80064c0:	d80a      	bhi.n	80064d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2280      	movs	r2, #128	@ 0x80
 80064c6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80064ca:	2100      	movs	r1, #0
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7fe ffaa 	bl	8005426 <dir_sdi>
 80064d2:	4603      	mov	r3, r0
 80064d4:	75fb      	strb	r3, [r7, #23]
 80064d6:	e048      	b.n	800656a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80064d8:	463b      	mov	r3, r7
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff fe1b 	bl	8006118 <create_name>
 80064e2:	4603      	mov	r3, r0
 80064e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d139      	bne.n	8006560 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff fc11 	bl	8005d14 <dir_find>
 80064f2:	4603      	mov	r3, r0
 80064f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80064fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	2b04      	cmp	r3, #4
 8006508:	d12c      	bne.n	8006564 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800650a:	7afb      	ldrb	r3, [r7, #11]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d127      	bne.n	8006564 <follow_path+0xdc>
 8006514:	2305      	movs	r3, #5
 8006516:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006518:	e024      	b.n	8006564 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800651a:	7afb      	ldrb	r3, [r7, #11]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d121      	bne.n	8006568 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	799b      	ldrb	r3, [r3, #6]
 8006528:	f003 0310 	and.w	r3, r3, #16
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006530:	2305      	movs	r3, #5
 8006532:	75fb      	strb	r3, [r7, #23]
 8006534:	e019      	b.n	800656a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	8992      	ldrh	r2, [r2, #12]
 8006544:	fbb3 f0f2 	udiv	r0, r3, r2
 8006548:	fb00 f202 	mul.w	r2, r0, r2
 800654c:	1a9b      	subs	r3, r3, r2
 800654e:	440b      	add	r3, r1
 8006550:	4619      	mov	r1, r3
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f7ff f90d 	bl	8005772 <ld_clust>
 8006558:	4602      	mov	r2, r0
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800655e:	e7bb      	b.n	80064d8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006560:	bf00      	nop
 8006562:	e002      	b.n	800656a <follow_path+0xe2>
				break;
 8006564:	bf00      	nop
 8006566:	e000      	b.n	800656a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006568:	bf00      	nop
			}
		}
	}

	return res;
 800656a:	7dfb      	ldrb	r3, [r7, #23]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800657c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006580:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d031      	beq.n	80065ee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	e002      	b.n	8006598 <get_ldnumber+0x24>
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	3301      	adds	r3, #1
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b1f      	cmp	r3, #31
 800659e:	d903      	bls.n	80065a8 <get_ldnumber+0x34>
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b3a      	cmp	r3, #58	@ 0x3a
 80065a6:	d1f4      	bne.n	8006592 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b3a      	cmp	r3, #58	@ 0x3a
 80065ae:	d11c      	bne.n	80065ea <get_ldnumber+0x76>
			tp = *path;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	60fa      	str	r2, [r7, #12]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	3b30      	subs	r3, #48	@ 0x30
 80065c0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b09      	cmp	r3, #9
 80065c6:	d80e      	bhi.n	80065e6 <get_ldnumber+0x72>
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d10a      	bne.n	80065e6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d107      	bne.n	80065e6 <get_ldnumber+0x72>
					vol = (int)i;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	3301      	adds	r3, #1
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	e002      	b.n	80065f0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80065ea:	2300      	movs	r3, #0
 80065ec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80065ee:	693b      	ldr	r3, [r7, #16]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	70da      	strb	r2, [r3, #3]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006612:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fe fb26 	bl	8004c68 <move_window>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <check_fs+0x2a>
 8006622:	2304      	movs	r3, #4
 8006624:	e038      	b.n	8006698 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3338      	adds	r3, #56	@ 0x38
 800662a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe f86a 	bl	8004708 <ld_word>
 8006634:	4603      	mov	r3, r0
 8006636:	461a      	mov	r2, r3
 8006638:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800663c:	429a      	cmp	r2, r3
 800663e:	d001      	beq.n	8006644 <check_fs+0x48>
 8006640:	2303      	movs	r3, #3
 8006642:	e029      	b.n	8006698 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800664a:	2be9      	cmp	r3, #233	@ 0xe9
 800664c:	d009      	beq.n	8006662 <check_fs+0x66>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006654:	2beb      	cmp	r3, #235	@ 0xeb
 8006656:	d11e      	bne.n	8006696 <check_fs+0x9a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800665e:	2b90      	cmp	r3, #144	@ 0x90
 8006660:	d119      	bne.n	8006696 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3338      	adds	r3, #56	@ 0x38
 8006666:	3336      	adds	r3, #54	@ 0x36
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe f865 	bl	8004738 <ld_dword>
 800666e:	4603      	mov	r3, r0
 8006670:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006674:	4a0a      	ldr	r2, [pc, #40]	@ (80066a0 <check_fs+0xa4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d101      	bne.n	800667e <check_fs+0x82>
 800667a:	2300      	movs	r3, #0
 800667c:	e00c      	b.n	8006698 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3338      	adds	r3, #56	@ 0x38
 8006682:	3352      	adds	r3, #82	@ 0x52
 8006684:	4618      	mov	r0, r3
 8006686:	f7fe f857 	bl	8004738 <ld_dword>
 800668a:	4603      	mov	r3, r0
 800668c:	4a05      	ldr	r2, [pc, #20]	@ (80066a4 <check_fs+0xa8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d101      	bne.n	8006696 <check_fs+0x9a>
 8006692:	2300      	movs	r3, #0
 8006694:	e000      	b.n	8006698 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006696:	2302      	movs	r3, #2
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	00544146 	.word	0x00544146
 80066a4:	33544146 	.word	0x33544146

080066a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b096      	sub	sp, #88	@ 0x58
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7ff ff59 	bl	8006574 <get_ldnumber>
 80066c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80066c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	da01      	bge.n	80066ce <find_volume+0x26>
 80066ca:	230b      	movs	r3, #11
 80066cc:	e265      	b.n	8006b9a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80066ce:	4a9f      	ldr	r2, [pc, #636]	@ (800694c <find_volume+0x2a4>)
 80066d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80066d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <find_volume+0x3a>
 80066de:	230c      	movs	r3, #12
 80066e0:	e25b      	b.n	8006b9a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80066e8:	79fb      	ldrb	r3, [r7, #7]
 80066ea:	f023 0301 	bic.w	r3, r3, #1
 80066ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80066f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01a      	beq.n	800672e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80066f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fd ff63 	bl	80045c8 <disk_status>
 8006702:	4603      	mov	r3, r0
 8006704:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006708:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10c      	bne.n	800672e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <find_volume+0x82>
 800671a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006726:	230a      	movs	r3, #10
 8006728:	e237      	b.n	8006b9a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800672a:	2300      	movs	r3, #0
 800672c:	e235      	b.n	8006b9a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006736:	b2da      	uxtb	r2, r3
 8006738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800673c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	4618      	mov	r0, r3
 8006742:	f7fd ff5b 	bl	80045fc <disk_initialize>
 8006746:	4603      	mov	r3, r0
 8006748:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800674c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006758:	2303      	movs	r3, #3
 800675a:	e21e      	b.n	8006b9a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d007      	beq.n	8006772 <find_volume+0xca>
 8006762:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800676e:	230a      	movs	r3, #10
 8006770:	e213      	b.n	8006b9a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006774:	7858      	ldrb	r0, [r3, #1]
 8006776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006778:	330c      	adds	r3, #12
 800677a:	461a      	mov	r2, r3
 800677c:	2102      	movs	r1, #2
 800677e:	f7fd ffa5 	bl	80046cc <disk_ioctl>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <find_volume+0xe4>
 8006788:	2301      	movs	r3, #1
 800678a:	e206      	b.n	8006b9a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800678c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678e:	899b      	ldrh	r3, [r3, #12]
 8006790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006794:	d80d      	bhi.n	80067b2 <find_volume+0x10a>
 8006796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006798:	899b      	ldrh	r3, [r3, #12]
 800679a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800679e:	d308      	bcc.n	80067b2 <find_volume+0x10a>
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	899b      	ldrh	r3, [r3, #12]
 80067a4:	461a      	mov	r2, r3
 80067a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a8:	899b      	ldrh	r3, [r3, #12]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <find_volume+0x10e>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e1f1      	b.n	8006b9a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80067ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80067bc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80067be:	f7ff ff1d 	bl	80065fc <check_fs>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80067c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d149      	bne.n	8006864 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80067d0:	2300      	movs	r3, #0
 80067d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80067d4:	e01e      	b.n	8006814 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80067d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80067dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80067e4:	4413      	add	r3, r2
 80067e6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80067e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ea:	3304      	adds	r3, #4
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d006      	beq.n	8006800 <find_volume+0x158>
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	3308      	adds	r3, #8
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fd ff9e 	bl	8004738 <ld_dword>
 80067fc:	4602      	mov	r2, r0
 80067fe:	e000      	b.n	8006802 <find_volume+0x15a>
 8006800:	2200      	movs	r2, #0
 8006802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	3358      	adds	r3, #88	@ 0x58
 8006808:	443b      	add	r3, r7
 800680a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800680e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006810:	3301      	adds	r3, #1
 8006812:	643b      	str	r3, [r7, #64]	@ 0x40
 8006814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006816:	2b03      	cmp	r3, #3
 8006818:	d9dd      	bls.n	80067d6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800681a:	2300      	movs	r3, #0
 800681c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800681e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <find_volume+0x182>
 8006824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006826:	3b01      	subs	r3, #1
 8006828:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800682a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	3358      	adds	r3, #88	@ 0x58
 8006830:	443b      	add	r3, r7
 8006832:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006836:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <find_volume+0x1a2>
 800683e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006840:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006842:	f7ff fedb 	bl	80065fc <check_fs>
 8006846:	4603      	mov	r3, r0
 8006848:	e000      	b.n	800684c <find_volume+0x1a4>
 800684a:	2303      	movs	r3, #3
 800684c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006850:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006854:	2b01      	cmp	r3, #1
 8006856:	d905      	bls.n	8006864 <find_volume+0x1bc>
 8006858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800685a:	3301      	adds	r3, #1
 800685c:	643b      	str	r3, [r7, #64]	@ 0x40
 800685e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006860:	2b03      	cmp	r3, #3
 8006862:	d9e2      	bls.n	800682a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006864:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006868:	2b04      	cmp	r3, #4
 800686a:	d101      	bne.n	8006870 <find_volume+0x1c8>
 800686c:	2301      	movs	r3, #1
 800686e:	e194      	b.n	8006b9a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006870:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006874:	2b01      	cmp	r3, #1
 8006876:	d901      	bls.n	800687c <find_volume+0x1d4>
 8006878:	230d      	movs	r3, #13
 800687a:	e18e      	b.n	8006b9a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800687c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687e:	3338      	adds	r3, #56	@ 0x38
 8006880:	330b      	adds	r3, #11
 8006882:	4618      	mov	r0, r3
 8006884:	f7fd ff40 	bl	8004708 <ld_word>
 8006888:	4603      	mov	r3, r0
 800688a:	461a      	mov	r2, r3
 800688c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688e:	899b      	ldrh	r3, [r3, #12]
 8006890:	429a      	cmp	r2, r3
 8006892:	d001      	beq.n	8006898 <find_volume+0x1f0>
 8006894:	230d      	movs	r3, #13
 8006896:	e180      	b.n	8006b9a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689a:	3338      	adds	r3, #56	@ 0x38
 800689c:	3316      	adds	r3, #22
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd ff32 	bl	8004708 <ld_word>
 80068a4:	4603      	mov	r3, r0
 80068a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80068a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <find_volume+0x214>
 80068ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b0:	3338      	adds	r3, #56	@ 0x38
 80068b2:	3324      	adds	r3, #36	@ 0x24
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fd ff3f 	bl	8004738 <ld_dword>
 80068ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068c0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80068c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80068c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80068cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ce:	789b      	ldrb	r3, [r3, #2]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d005      	beq.n	80068e0 <find_volume+0x238>
 80068d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d6:	789b      	ldrb	r3, [r3, #2]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d001      	beq.n	80068e0 <find_volume+0x238>
 80068dc:	230d      	movs	r3, #13
 80068de:	e15c      	b.n	8006b9a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80068e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e2:	789b      	ldrb	r3, [r3, #2]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068e8:	fb02 f303 	mul.w	r3, r2, r3
 80068ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80068ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068f4:	461a      	mov	r2, r3
 80068f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80068fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fc:	895b      	ldrh	r3, [r3, #10]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d008      	beq.n	8006914 <find_volume+0x26c>
 8006902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006904:	895b      	ldrh	r3, [r3, #10]
 8006906:	461a      	mov	r2, r3
 8006908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690a:	895b      	ldrh	r3, [r3, #10]
 800690c:	3b01      	subs	r3, #1
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <find_volume+0x270>
 8006914:	230d      	movs	r3, #13
 8006916:	e140      	b.n	8006b9a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691a:	3338      	adds	r3, #56	@ 0x38
 800691c:	3311      	adds	r3, #17
 800691e:	4618      	mov	r0, r3
 8006920:	f7fd fef2 	bl	8004708 <ld_word>
 8006924:	4603      	mov	r3, r0
 8006926:	461a      	mov	r2, r3
 8006928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	891b      	ldrh	r3, [r3, #8]
 8006930:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006932:	8992      	ldrh	r2, [r2, #12]
 8006934:	0952      	lsrs	r2, r2, #5
 8006936:	b292      	uxth	r2, r2
 8006938:	fbb3 f1f2 	udiv	r1, r3, r2
 800693c:	fb01 f202 	mul.w	r2, r1, r2
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <find_volume+0x2a8>
 8006948:	230d      	movs	r3, #13
 800694a:	e126      	b.n	8006b9a <find_volume+0x4f2>
 800694c:	200022d4 	.word	0x200022d4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	3338      	adds	r3, #56	@ 0x38
 8006954:	3313      	adds	r3, #19
 8006956:	4618      	mov	r0, r3
 8006958:	f7fd fed6 	bl	8004708 <ld_word>
 800695c:	4603      	mov	r3, r0
 800695e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <find_volume+0x2cc>
 8006966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006968:	3338      	adds	r3, #56	@ 0x38
 800696a:	3320      	adds	r3, #32
 800696c:	4618      	mov	r0, r3
 800696e:	f7fd fee3 	bl	8004738 <ld_dword>
 8006972:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006976:	3338      	adds	r3, #56	@ 0x38
 8006978:	330e      	adds	r3, #14
 800697a:	4618      	mov	r0, r3
 800697c:	f7fd fec4 	bl	8004708 <ld_word>
 8006980:	4603      	mov	r3, r0
 8006982:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006984:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <find_volume+0x2e6>
 800698a:	230d      	movs	r3, #13
 800698c:	e105      	b.n	8006b9a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800698e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006992:	4413      	add	r3, r2
 8006994:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006996:	8911      	ldrh	r1, [r2, #8]
 8006998:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800699a:	8992      	ldrh	r2, [r2, #12]
 800699c:	0952      	lsrs	r2, r2, #5
 800699e:	b292      	uxth	r2, r2
 80069a0:	fbb1 f2f2 	udiv	r2, r1, r2
 80069a4:	b292      	uxth	r2, r2
 80069a6:	4413      	add	r3, r2
 80069a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80069aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d201      	bcs.n	80069b6 <find_volume+0x30e>
 80069b2:	230d      	movs	r3, #13
 80069b4:	e0f1      	b.n	8006b9a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80069b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069be:	8952      	ldrh	r2, [r2, #10]
 80069c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80069c4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <find_volume+0x328>
 80069cc:	230d      	movs	r3, #13
 80069ce:	e0e4      	b.n	8006b9a <find_volume+0x4f2>
		fmt = FS_FAT32;
 80069d0:	2303      	movs	r3, #3
 80069d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80069dc:	4293      	cmp	r3, r2
 80069de:	d802      	bhi.n	80069e6 <find_volume+0x33e>
 80069e0:	2302      	movs	r3, #2
 80069e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d802      	bhi.n	80069f6 <find_volume+0x34e>
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	1c9a      	adds	r2, r3, #2
 80069fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80069fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a00:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a02:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006a04:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a08:	441a      	add	r2, r3
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006a0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	441a      	add	r2, r3
 8006a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a16:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006a18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d11e      	bne.n	8006a5e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a22:	3338      	adds	r3, #56	@ 0x38
 8006a24:	332a      	adds	r3, #42	@ 0x2a
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fd fe6e 	bl	8004708 <ld_word>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <find_volume+0x38e>
 8006a32:	230d      	movs	r3, #13
 8006a34:	e0b1      	b.n	8006b9a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a38:	891b      	ldrh	r3, [r3, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <find_volume+0x39a>
 8006a3e:	230d      	movs	r3, #13
 8006a40:	e0ab      	b.n	8006b9a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	3338      	adds	r3, #56	@ 0x38
 8006a46:	332c      	adds	r3, #44	@ 0x2c
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fd fe75 	bl	8004738 <ld_dword>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a52:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a5c:	e01f      	b.n	8006a9e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a60:	891b      	ldrh	r3, [r3, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <find_volume+0x3c2>
 8006a66:	230d      	movs	r3, #13
 8006a68:	e097      	b.n	8006b9a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a70:	441a      	add	r2, r3
 8006a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a74:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d103      	bne.n	8006a86 <find_volume+0x3de>
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	e00a      	b.n	8006a9c <find_volume+0x3f4>
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	69da      	ldr	r2, [r3, #28]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	4413      	add	r3, r2
 8006a90:	085a      	lsrs	r2, r3, #1
 8006a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006a9c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa0:	6a1a      	ldr	r2, [r3, #32]
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa4:	899b      	ldrh	r3, [r3, #12]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aaa:	440b      	add	r3, r1
 8006aac:	3b01      	subs	r3, #1
 8006aae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ab0:	8989      	ldrh	r1, [r1, #12]
 8006ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d201      	bcs.n	8006abe <find_volume+0x416>
 8006aba:	230d      	movs	r3, #13
 8006abc:	e06d      	b.n	8006b9a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ac4:	619a      	str	r2, [r3, #24]
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006acc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad0:	2280      	movs	r2, #128	@ 0x80
 8006ad2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ad8:	2b03      	cmp	r3, #3
 8006ada:	d149      	bne.n	8006b70 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ade:	3338      	adds	r3, #56	@ 0x38
 8006ae0:	3330      	adds	r3, #48	@ 0x30
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fd fe10 	bl	8004708 <ld_word>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d140      	bne.n	8006b70 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006af0:	3301      	adds	r3, #1
 8006af2:	4619      	mov	r1, r3
 8006af4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006af6:	f7fe f8b7 	bl	8004c68 <move_window>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d137      	bne.n	8006b70 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	2200      	movs	r2, #0
 8006b04:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b08:	3338      	adds	r3, #56	@ 0x38
 8006b0a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fd fdfa 	bl	8004708 <ld_word>
 8006b14:	4603      	mov	r3, r0
 8006b16:	461a      	mov	r2, r3
 8006b18:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d127      	bne.n	8006b70 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b22:	3338      	adds	r3, #56	@ 0x38
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fd fe07 	bl	8004738 <ld_dword>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba4 <find_volume+0x4fc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d11e      	bne.n	8006b70 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b34:	3338      	adds	r3, #56	@ 0x38
 8006b36:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fd fdfc 	bl	8004738 <ld_dword>
 8006b40:	4603      	mov	r3, r0
 8006b42:	4a19      	ldr	r2, [pc, #100]	@ (8006ba8 <find_volume+0x500>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d113      	bne.n	8006b70 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4a:	3338      	adds	r3, #56	@ 0x38
 8006b4c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fd fdf1 	bl	8004738 <ld_dword>
 8006b56:	4602      	mov	r2, r0
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5e:	3338      	adds	r3, #56	@ 0x38
 8006b60:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fd fde7 	bl	8004738 <ld_dword>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b72:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006b76:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006b78:	4b0c      	ldr	r3, [pc, #48]	@ (8006bac <find_volume+0x504>)
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	4b0a      	ldr	r3, [pc, #40]	@ (8006bac <find_volume+0x504>)
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	4b09      	ldr	r3, [pc, #36]	@ (8006bac <find_volume+0x504>)
 8006b86:	881a      	ldrh	r2, [r3, #0]
 8006b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8e:	4a08      	ldr	r2, [pc, #32]	@ (8006bb0 <find_volume+0x508>)
 8006b90:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006b92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b94:	f7fe f800 	bl	8004b98 <clear_lock>
#endif
	return FR_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3758      	adds	r7, #88	@ 0x58
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	41615252 	.word	0x41615252
 8006ba8:	61417272 	.word	0x61417272
 8006bac:	200022d8 	.word	0x200022d8
 8006bb0:	200022fc 	.word	0x200022fc

08006bb4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006bbe:	2309      	movs	r3, #9
 8006bc0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01c      	beq.n	8006c02 <validate+0x4e>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d018      	beq.n	8006c02 <validate+0x4e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d013      	beq.n	8006c02 <validate+0x4e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	889a      	ldrh	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	88db      	ldrh	r3, [r3, #6]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d10c      	bne.n	8006c02 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fd fcea 	bl	80045c8 <disk_status>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <validate+0x4e>
			res = FR_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <validate+0x5a>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	e000      	b.n	8006c10 <validate+0x5c>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	6013      	str	r3, [r2, #0]
	return res;
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006c32:	f107 0310 	add.w	r3, r7, #16
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff fc9c 	bl	8006574 <get_ldnumber>
 8006c3c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	da01      	bge.n	8006c48 <f_mount+0x28>
 8006c44:	230b      	movs	r3, #11
 8006c46:	e02b      	b.n	8006ca0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006c48:	4a17      	ldr	r2, [pc, #92]	@ (8006ca8 <f_mount+0x88>)
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c50:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006c58:	69b8      	ldr	r0, [r7, #24]
 8006c5a:	f7fd ff9d 	bl	8004b98 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	490d      	ldr	r1, [pc, #52]	@ (8006ca8 <f_mount+0x88>)
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <f_mount+0x66>
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d001      	beq.n	8006c8a <f_mount+0x6a>
 8006c86:	2300      	movs	r3, #0
 8006c88:	e00a      	b.n	8006ca0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006c8a:	f107 010c 	add.w	r1, r7, #12
 8006c8e:	f107 0308 	add.w	r3, r7, #8
 8006c92:	2200      	movs	r2, #0
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff fd07 	bl	80066a8 <find_volume>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3720      	adds	r7, #32
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	200022d4 	.word	0x200022d4

08006cac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b09a      	sub	sp, #104	@ 0x68
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <f_open+0x18>
 8006cc0:	2309      	movs	r3, #9
 8006cc2:	e1b7      	b.n	8007034 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006ccc:	79fa      	ldrb	r2, [r7, #7]
 8006cce:	f107 0114 	add.w	r1, r7, #20
 8006cd2:	f107 0308 	add.w	r3, r7, #8
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff fce6 	bl	80066a8 <find_volume>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006ce2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f040 819b 	bne.w	8007022 <f_open+0x376>
		dj.obj.fs = fs;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	f107 0318 	add.w	r3, r7, #24
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fbc5 	bl	8006488 <follow_path>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d118      	bne.n	8006d3e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006d10:	b25b      	sxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	da03      	bge.n	8006d1e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d16:	2306      	movs	r3, #6
 8006d18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006d1c:	e00f      	b.n	8006d3e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d1e:	79fb      	ldrb	r3, [r7, #7]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	bf8c      	ite	hi
 8006d24:	2301      	movhi	r3, #1
 8006d26:	2300      	movls	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f107 0318 	add.w	r3, r7, #24
 8006d30:	4611      	mov	r1, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fd fde8 	bl	8004908 <chk_lock>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	f003 031c 	and.w	r3, r3, #28
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d07f      	beq.n	8006e48 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006d48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d017      	beq.n	8006d80 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006d50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d10e      	bne.n	8006d76 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006d58:	f7fd fe32 	bl	80049c0 <enq_lock>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d006      	beq.n	8006d70 <f_open+0xc4>
 8006d62:	f107 0318 	add.w	r3, r7, #24
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff f894 	bl	8005e94 <dir_register>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	e000      	b.n	8006d72 <f_open+0xc6>
 8006d70:	2312      	movs	r3, #18
 8006d72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	f043 0308 	orr.w	r3, r3, #8
 8006d7c:	71fb      	strb	r3, [r7, #7]
 8006d7e:	e010      	b.n	8006da2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006d80:	7fbb      	ldrb	r3, [r7, #30]
 8006d82:	f003 0311 	and.w	r3, r3, #17
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <f_open+0xe6>
					res = FR_DENIED;
 8006d8a:	2307      	movs	r3, #7
 8006d8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006d90:	e007      	b.n	8006da2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006d92:	79fb      	ldrb	r3, [r7, #7]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <f_open+0xf6>
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006da2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d168      	bne.n	8006e7c <f_open+0x1d0>
 8006daa:	79fb      	ldrb	r3, [r7, #7]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d063      	beq.n	8006e7c <f_open+0x1d0>
				dw = GET_FATTIME();
 8006db4:	f7fd fba6 	bl	8004504 <get_fattime>
 8006db8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbc:	330e      	adds	r3, #14
 8006dbe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fd fcf7 	bl	80047b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc8:	3316      	adds	r3, #22
 8006dca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fd fcf1 	bl	80047b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd4:	330b      	adds	r3, #11
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe fcc6 	bl	8005772 <ld_clust>
 8006de6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006dec:	2200      	movs	r2, #0
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fcde 	bl	80057b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df6:	331c      	adds	r3, #28
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fd fcda 	bl	80047b4 <st_dword>
					fs->wflag = 1;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2201      	movs	r2, #1
 8006e04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d037      	beq.n	8006e7c <f_open+0x1d0>
						dw = fs->winsect;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e10:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006e12:	f107 0318 	add.w	r3, r7, #24
 8006e16:	2200      	movs	r2, #0
 8006e18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe f9ce 	bl	80051bc <remove_chain>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006e26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d126      	bne.n	8006e7c <f_open+0x1d0>
							res = move_window(fs, dw);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fd ff18 	bl	8004c68 <move_window>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e42:	3a01      	subs	r2, #1
 8006e44:	615a      	str	r2, [r3, #20]
 8006e46:	e019      	b.n	8006e7c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006e48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d115      	bne.n	8006e7c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006e50:	7fbb      	ldrb	r3, [r7, #30]
 8006e52:	f003 0310 	and.w	r3, r3, #16
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <f_open+0x1b6>
					res = FR_NO_FILE;
 8006e5a:	2304      	movs	r3, #4
 8006e5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006e60:	e00c      	b.n	8006e7c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d007      	beq.n	8006e7c <f_open+0x1d0>
 8006e6c:	7fbb      	ldrb	r3, [r7, #30]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <f_open+0x1d0>
						res = FR_DENIED;
 8006e76:	2307      	movs	r3, #7
 8006e78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006e7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d126      	bne.n	8006ed2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	f003 0308 	and.w	r3, r3, #8
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006e8e:	79fb      	ldrb	r3, [r7, #7]
 8006e90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006e9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	bf8c      	ite	hi
 8006eaa:	2301      	movhi	r3, #1
 8006eac:	2300      	movls	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f107 0318 	add.w	r3, r7, #24
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fd fda3 	bl	8004a04 <inc_lock>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <f_open+0x226>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006ed2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f040 80a3 	bne.w	8007022 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe fc45 	bl	8005772 <ld_clust>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef0:	331c      	adds	r3, #28
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fd fc20 	bl	8004738 <ld_dword>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	88da      	ldrh	r2, [r3, #6]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	79fa      	ldrb	r2, [r7, #7]
 8006f16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3330      	adds	r3, #48	@ 0x30
 8006f2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006f32:	2100      	movs	r1, #0
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fd fc8a 	bl	800484e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	f003 0320 	and.w	r3, r3, #32
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d06e      	beq.n	8007022 <f_open+0x376>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d06a      	beq.n	8007022 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	68da      	ldr	r2, [r3, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	895b      	ldrh	r3, [r3, #10]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	899b      	ldrh	r3, [r3, #12]
 8006f5e:	fb02 f303 	mul.w	r3, r2, r3
 8006f62:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f70:	e016      	b.n	8006fa0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fd ff33 	bl	8004de2 <get_fat>
 8006f7c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006f7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d802      	bhi.n	8006f8a <f_open+0x2de>
 8006f84:	2302      	movs	r3, #2
 8006f86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006f8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f90:	d102      	bne.n	8006f98 <f_open+0x2ec>
 8006f92:	2301      	movs	r3, #1
 8006f94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006f98:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fa0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d103      	bne.n	8006fb0 <f_open+0x304>
 8006fa8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d8e0      	bhi.n	8006f72 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006fb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006fb6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d131      	bne.n	8007022 <f_open+0x376>
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	899b      	ldrh	r3, [r3, #12]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fca:	fb01 f202 	mul.w	r2, r1, r2
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d026      	beq.n	8007022 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fd fee3 	bl	8004da4 <clust2sect>
 8006fde:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d103      	bne.n	8006fee <f_open+0x342>
						res = FR_INT_ERR;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006fec:	e019      	b.n	8007022 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	899b      	ldrh	r3, [r3, #12]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ffc:	441a      	add	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	7858      	ldrb	r0, [r3, #1]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a1a      	ldr	r2, [r3, #32]
 8007010:	2301      	movs	r3, #1
 8007012:	f7fd fb1b 	bl	800464c <disk_read>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <f_open+0x376>
 800701c:	2301      	movs	r3, #1
 800701e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007022:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <f_open+0x384>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007030:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007034:	4618      	mov	r0, r3
 8007036:	3768      	adds	r7, #104	@ 0x68
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08e      	sub	sp, #56	@ 0x38
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f107 0214 	add.w	r2, r7, #20
 800705a:	4611      	mov	r1, r2
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff fda9 	bl	8006bb4 <validate>
 8007062:	4603      	mov	r3, r0
 8007064:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007068:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800706c:	2b00      	cmp	r3, #0
 800706e:	d107      	bne.n	8007080 <f_read+0x44>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	7d5b      	ldrb	r3, [r3, #21]
 8007074:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007078:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <f_read+0x4a>
 8007080:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007084:	e135      	b.n	80072f2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	7d1b      	ldrb	r3, [r3, #20]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <f_read+0x5a>
 8007092:	2307      	movs	r3, #7
 8007094:	e12d      	b.n	80072f2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	f240 811e 	bls.w	80072e8 <f_read+0x2ac>
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80070b0:	e11a      	b.n	80072e8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	8992      	ldrh	r2, [r2, #12]
 80070ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80070be:	fb01 f202 	mul.w	r2, r1, r2
 80070c2:	1a9b      	subs	r3, r3, r2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f040 80d5 	bne.w	8007274 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	8992      	ldrh	r2, [r2, #12]
 80070d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	8952      	ldrh	r2, [r2, #10]
 80070da:	3a01      	subs	r2, #1
 80070dc:	4013      	ands	r3, r2
 80070de:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d12f      	bne.n	8007146 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d103      	bne.n	80070f6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80070f4:	e013      	b.n	800711e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d007      	beq.n	800710e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	4619      	mov	r1, r3
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f7fe f956 	bl	80053b6 <clmt_clust>
 800710a:	6338      	str	r0, [r7, #48]	@ 0x30
 800710c:	e007      	b.n	800711e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	4619      	mov	r1, r3
 8007116:	4610      	mov	r0, r2
 8007118:	f7fd fe63 	bl	8004de2 <get_fat>
 800711c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800711e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007120:	2b01      	cmp	r3, #1
 8007122:	d804      	bhi.n	800712e <f_read+0xf2>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2202      	movs	r2, #2
 8007128:	755a      	strb	r2, [r3, #21]
 800712a:	2302      	movs	r3, #2
 800712c:	e0e1      	b.n	80072f2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007134:	d104      	bne.n	8007140 <f_read+0x104>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	755a      	strb	r2, [r3, #21]
 800713c:	2301      	movs	r3, #1
 800713e:	e0d8      	b.n	80072f2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007144:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f7fd fe28 	bl	8004da4 <clust2sect>
 8007154:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d104      	bne.n	8007166 <f_read+0x12a>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2202      	movs	r2, #2
 8007160:	755a      	strb	r2, [r3, #21]
 8007162:	2302      	movs	r3, #2
 8007164:	e0c5      	b.n	80072f2 <f_read+0x2b6>
			sect += csect;
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	4413      	add	r3, r2
 800716c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	899b      	ldrh	r3, [r3, #12]
 8007172:	461a      	mov	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	fbb3 f3f2 	udiv	r3, r3, r2
 800717a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	2b00      	cmp	r3, #0
 8007180:	d041      	beq.n	8007206 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007182:	69fa      	ldr	r2, [r7, #28]
 8007184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007186:	4413      	add	r3, r2
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	8952      	ldrh	r2, [r2, #10]
 800718c:	4293      	cmp	r3, r2
 800718e:	d905      	bls.n	800719c <f_read+0x160>
					cc = fs->csize - csect;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	895b      	ldrh	r3, [r3, #10]
 8007194:	461a      	mov	r2, r3
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	7858      	ldrb	r0, [r3, #1]
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071a6:	f7fd fa51 	bl	800464c <disk_read>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d004      	beq.n	80071ba <f_read+0x17e>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	755a      	strb	r2, [r3, #21]
 80071b6:	2301      	movs	r3, #1
 80071b8:	e09b      	b.n	80072f2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	7d1b      	ldrb	r3, [r3, #20]
 80071be:	b25b      	sxtb	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	da18      	bge.n	80071f6 <f_read+0x1ba>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a1a      	ldr	r2, [r3, #32]
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d911      	bls.n	80071f6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a1a      	ldr	r2, [r3, #32]
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	8992      	ldrh	r2, [r2, #12]
 80071de:	fb02 f303 	mul.w	r3, r2, r3
 80071e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071e4:	18d0      	adds	r0, r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	899b      	ldrh	r3, [r3, #12]
 80071f0:	461a      	mov	r2, r3
 80071f2:	f7fd fb0b 	bl	800480c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	899b      	ldrh	r3, [r3, #12]
 80071fa:	461a      	mov	r2, r3
 80071fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fe:	fb02 f303 	mul.w	r3, r2, r3
 8007202:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007204:	e05c      	b.n	80072c0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	429a      	cmp	r2, r3
 800720e:	d02e      	beq.n	800726e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	7d1b      	ldrb	r3, [r3, #20]
 8007214:	b25b      	sxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	da18      	bge.n	800724c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	7858      	ldrb	r0, [r3, #1]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a1a      	ldr	r2, [r3, #32]
 8007228:	2301      	movs	r3, #1
 800722a:	f7fd fa2f 	bl	800468c <disk_write>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d004      	beq.n	800723e <f_read+0x202>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	755a      	strb	r2, [r3, #21]
 800723a:	2301      	movs	r3, #1
 800723c:	e059      	b.n	80072f2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	7d1b      	ldrb	r3, [r3, #20]
 8007242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007246:	b2da      	uxtb	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	7858      	ldrb	r0, [r3, #1]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007256:	2301      	movs	r3, #1
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	f7fd f9f7 	bl	800464c <disk_read>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d004      	beq.n	800726e <f_read+0x232>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	755a      	strb	r2, [r3, #21]
 800726a:	2301      	movs	r3, #1
 800726c:	e041      	b.n	80072f2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	899b      	ldrh	r3, [r3, #12]
 8007278:	4618      	mov	r0, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	8992      	ldrh	r2, [r2, #12]
 8007282:	fbb3 f1f2 	udiv	r1, r3, r2
 8007286:	fb01 f202 	mul.w	r2, r1, r2
 800728a:	1a9b      	subs	r3, r3, r2
 800728c:	1ac3      	subs	r3, r0, r3
 800728e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d901      	bls.n	800729c <f_read+0x260>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	8992      	ldrh	r2, [r2, #12]
 80072aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80072ae:	fb00 f202 	mul.w	r2, r0, r2
 80072b2:	1a9b      	subs	r3, r3, r2
 80072b4:	440b      	add	r3, r1
 80072b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072b8:	4619      	mov	r1, r3
 80072ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80072bc:	f7fd faa6 	bl	800480c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80072c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c4:	4413      	add	r3, r2
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	699a      	ldr	r2, [r3, #24]
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ce:	441a      	add	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	619a      	str	r2, [r3, #24]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072da:	441a      	add	r2, r3
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f47f aee1 	bne.w	80070b2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3738      	adds	r7, #56	@ 0x38
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b08c      	sub	sp, #48	@ 0x30
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	607a      	str	r2, [r7, #4]
 8007306:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f107 0210 	add.w	r2, r7, #16
 8007318:	4611      	mov	r1, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fc4a 	bl	8006bb4 <validate>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007326:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800732a:	2b00      	cmp	r3, #0
 800732c:	d107      	bne.n	800733e <f_write+0x44>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	7d5b      	ldrb	r3, [r3, #21]
 8007332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007336:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <f_write+0x4a>
 800733e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007342:	e16a      	b.n	800761a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	7d1b      	ldrb	r3, [r3, #20]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <f_write+0x5a>
 8007350:	2307      	movs	r3, #7
 8007352:	e162      	b.n	800761a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	699a      	ldr	r2, [r3, #24]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	441a      	add	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	429a      	cmp	r2, r3
 8007362:	f080 814c 	bcs.w	80075fe <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	43db      	mvns	r3, r3
 800736c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800736e:	e146      	b.n	80075fe <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	8992      	ldrh	r2, [r2, #12]
 8007378:	fbb3 f1f2 	udiv	r1, r3, r2
 800737c:	fb01 f202 	mul.w	r2, r1, r2
 8007380:	1a9b      	subs	r3, r3, r2
 8007382:	2b00      	cmp	r3, #0
 8007384:	f040 80f1 	bne.w	800756a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	8992      	ldrh	r2, [r2, #12]
 8007390:	fbb3 f3f2 	udiv	r3, r3, r2
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	8952      	ldrh	r2, [r2, #10]
 8007398:	3a01      	subs	r2, #1
 800739a:	4013      	ands	r3, r2
 800739c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d143      	bne.n	800742c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10c      	bne.n	80073c6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80073b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d11a      	bne.n	80073ee <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2100      	movs	r1, #0
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fd ff62 	bl	8005286 <create_chain>
 80073c2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80073c4:	e013      	b.n	80073ee <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d007      	beq.n	80073de <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	4619      	mov	r1, r3
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f7fd ffee 	bl	80053b6 <clmt_clust>
 80073da:	62b8      	str	r0, [r7, #40]	@ 0x28
 80073dc:	e007      	b.n	80073ee <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f7fd ff4d 	bl	8005286 <create_chain>
 80073ec:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80073ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 8109 	beq.w	8007608 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80073f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d104      	bne.n	8007406 <f_write+0x10c>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2202      	movs	r2, #2
 8007400:	755a      	strb	r2, [r3, #21]
 8007402:	2302      	movs	r3, #2
 8007404:	e109      	b.n	800761a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800740c:	d104      	bne.n	8007418 <f_write+0x11e>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	755a      	strb	r2, [r3, #21]
 8007414:	2301      	movs	r3, #1
 8007416:	e100      	b.n	800761a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800741c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d102      	bne.n	800742c <f_write+0x132>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800742a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	7d1b      	ldrb	r3, [r3, #20]
 8007430:	b25b      	sxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	da18      	bge.n	8007468 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	7858      	ldrb	r0, [r3, #1]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a1a      	ldr	r2, [r3, #32]
 8007444:	2301      	movs	r3, #1
 8007446:	f7fd f921 	bl	800468c <disk_write>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <f_write+0x160>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2201      	movs	r2, #1
 8007454:	755a      	strb	r2, [r3, #21]
 8007456:	2301      	movs	r3, #1
 8007458:	e0df      	b.n	800761a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	7d1b      	ldrb	r3, [r3, #20]
 800745e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007462:	b2da      	uxtb	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	4619      	mov	r1, r3
 8007470:	4610      	mov	r0, r2
 8007472:	f7fd fc97 	bl	8004da4 <clust2sect>
 8007476:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d104      	bne.n	8007488 <f_write+0x18e>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2202      	movs	r2, #2
 8007482:	755a      	strb	r2, [r3, #21]
 8007484:	2302      	movs	r3, #2
 8007486:	e0c8      	b.n	800761a <f_write+0x320>
			sect += csect;
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	4413      	add	r3, r2
 800748e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	899b      	ldrh	r3, [r3, #12]
 8007494:	461a      	mov	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	fbb3 f3f2 	udiv	r3, r3, r2
 800749c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d043      	beq.n	800752c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	4413      	add	r3, r2
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	8952      	ldrh	r2, [r2, #10]
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d905      	bls.n	80074be <f_write+0x1c4>
					cc = fs->csize - csect;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	895b      	ldrh	r3, [r3, #10]
 80074b6:	461a      	mov	r2, r3
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	7858      	ldrb	r0, [r3, #1]
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	69f9      	ldr	r1, [r7, #28]
 80074c8:	f7fd f8e0 	bl	800468c <disk_write>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <f_write+0x1e2>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	755a      	strb	r2, [r3, #21]
 80074d8:	2301      	movs	r3, #1
 80074da:	e09e      	b.n	800761a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a1a      	ldr	r2, [r3, #32]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	6a3a      	ldr	r2, [r7, #32]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d918      	bls.n	800751c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6a1a      	ldr	r2, [r3, #32]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	8992      	ldrh	r2, [r2, #12]
 80074fc:	fb02 f303 	mul.w	r3, r2, r3
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	18d1      	adds	r1, r2, r3
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	899b      	ldrh	r3, [r3, #12]
 8007508:	461a      	mov	r2, r3
 800750a:	f7fd f97f 	bl	800480c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	7d1b      	ldrb	r3, [r3, #20]
 8007512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007516:	b2da      	uxtb	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	899b      	ldrh	r3, [r3, #12]
 8007520:	461a      	mov	r2, r3
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	fb02 f303 	mul.w	r3, r2, r3
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800752a:	e04b      	b.n	80075c4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	429a      	cmp	r2, r3
 8007534:	d016      	beq.n	8007564 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	699a      	ldr	r2, [r3, #24]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800753e:	429a      	cmp	r2, r3
 8007540:	d210      	bcs.n	8007564 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	7858      	ldrb	r0, [r3, #1]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800754c:	2301      	movs	r3, #1
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	f7fd f87c 	bl	800464c <disk_read>
 8007554:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007556:	2b00      	cmp	r3, #0
 8007558:	d004      	beq.n	8007564 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	755a      	strb	r2, [r3, #21]
 8007560:	2301      	movs	r3, #1
 8007562:	e05a      	b.n	800761a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	899b      	ldrh	r3, [r3, #12]
 800756e:	4618      	mov	r0, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	8992      	ldrh	r2, [r2, #12]
 8007578:	fbb3 f1f2 	udiv	r1, r3, r2
 800757c:	fb01 f202 	mul.w	r2, r1, r2
 8007580:	1a9b      	subs	r3, r3, r2
 8007582:	1ac3      	subs	r3, r0, r3
 8007584:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	429a      	cmp	r2, r3
 800758c:	d901      	bls.n	8007592 <f_write+0x298>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	8992      	ldrh	r2, [r2, #12]
 80075a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80075a4:	fb00 f202 	mul.w	r2, r0, r2
 80075a8:	1a9b      	subs	r3, r3, r2
 80075aa:	440b      	add	r3, r1
 80075ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ae:	69f9      	ldr	r1, [r7, #28]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fd f92b 	bl	800480c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	7d1b      	ldrb	r3, [r3, #20]
 80075ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	4413      	add	r3, r2
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	699a      	ldr	r2, [r3, #24]
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	441a      	add	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	619a      	str	r2, [r3, #24]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	bf38      	it	cc
 80075e4:	461a      	movcc	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	60da      	str	r2, [r3, #12]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	441a      	add	r2, r3
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f47f aeb5 	bne.w	8007370 <f_write+0x76>
 8007606:	e000      	b.n	800760a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007608:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	7d1b      	ldrb	r3, [r3, #20]
 800760e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007612:	b2da      	uxtb	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3730      	adds	r7, #48	@ 0x30
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f107 0208 	add.w	r2, r7, #8
 8007630:	4611      	mov	r1, r2
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff fabe 	bl	8006bb4 <validate>
 8007638:	4603      	mov	r3, r0
 800763a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d168      	bne.n	8007714 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7d1b      	ldrb	r3, [r3, #20]
 8007646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d062      	beq.n	8007714 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	7d1b      	ldrb	r3, [r3, #20]
 8007652:	b25b      	sxtb	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	da15      	bge.n	8007684 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	7858      	ldrb	r0, [r3, #1]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1a      	ldr	r2, [r3, #32]
 8007666:	2301      	movs	r3, #1
 8007668:	f7fd f810 	bl	800468c <disk_write>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <f_sync+0x54>
 8007672:	2301      	movs	r3, #1
 8007674:	e04f      	b.n	8007716 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	7d1b      	ldrb	r3, [r3, #20]
 800767a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800767e:	b2da      	uxtb	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007684:	f7fc ff3e 	bl	8004504 <get_fattime>
 8007688:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f7fd fae8 	bl	8004c68 <move_window>
 8007698:	4603      	mov	r3, r0
 800769a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d138      	bne.n	8007714 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	330b      	adds	r3, #11
 80076ac:	781a      	ldrb	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	330b      	adds	r3, #11
 80076b2:	f042 0220 	orr.w	r2, r2, #32
 80076b6:	b2d2      	uxtb	r2, r2
 80076b8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	461a      	mov	r2, r3
 80076c4:	68f9      	ldr	r1, [r7, #12]
 80076c6:	f7fe f873 	bl	80057b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f103 021c 	add.w	r2, r3, #28
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f7fd f86c 	bl	80047b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3316      	adds	r3, #22
 80076e0:	6939      	ldr	r1, [r7, #16]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fd f866 	bl	80047b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3312      	adds	r3, #18
 80076ec:	2100      	movs	r1, #0
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fd f845 	bl	800477e <st_word>
					fs->wflag = 1;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2201      	movs	r2, #1
 80076f8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fd fae1 	bl	8004cc4 <sync_fs>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	7d1b      	ldrb	r3, [r3, #20]
 800770a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800770e:	b2da      	uxtb	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007714:	7dfb      	ldrb	r3, [r7, #23]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff ff7b 	bl	8007622 <f_sync>
 800772c:	4603      	mov	r3, r0
 800772e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d118      	bne.n	8007768 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f107 0208 	add.w	r2, r7, #8
 800773c:	4611      	mov	r1, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fa38 	bl	8006bb4 <validate>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10c      	bne.n	8007768 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	4618      	mov	r0, r3
 8007754:	f7fd f9e4 	bl	8004b20 <dec_lock>
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800775c:	7bfb      	ldrb	r3, [r7, #15]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b090      	sub	sp, #64	@ 0x40
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f107 0208 	add.w	r2, r7, #8
 8007782:	4611      	mov	r1, r2
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff fa15 	bl	8006bb4 <validate>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007790:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007794:	2b00      	cmp	r3, #0
 8007796:	d103      	bne.n	80077a0 <f_lseek+0x2e>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	7d5b      	ldrb	r3, [r3, #21]
 800779c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80077a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <f_lseek+0x3c>
 80077a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80077ac:	e201      	b.n	8007bb2 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80d9 	beq.w	800796a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077be:	d15a      	bne.n	8007876 <f_lseek+0x104>
			tbl = fp->cltbl;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80077c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c8:	1d1a      	adds	r2, r3, #4
 80077ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	2302      	movs	r3, #2
 80077d2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d03a      	beq.n	8007856 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	2300      	movs	r3, #0
 80077e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ea:	3302      	adds	r3, #2
 80077ec:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f4:	3301      	adds	r3, #1
 80077f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fd faf0 	bl	8004de2 <get_fat>
 8007802:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007806:	2b01      	cmp	r3, #1
 8007808:	d804      	bhi.n	8007814 <f_lseek+0xa2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2202      	movs	r2, #2
 800780e:	755a      	strb	r2, [r3, #21]
 8007810:	2302      	movs	r3, #2
 8007812:	e1ce      	b.n	8007bb2 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800781a:	d104      	bne.n	8007826 <f_lseek+0xb4>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	755a      	strb	r2, [r3, #21]
 8007822:	2301      	movs	r3, #1
 8007824:	e1c5      	b.n	8007bb2 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800782c:	429a      	cmp	r2, r3
 800782e:	d0de      	beq.n	80077ee <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	429a      	cmp	r2, r3
 8007836:	d809      	bhi.n	800784c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	1d1a      	adds	r2, r3, #4
 800783c:	627a      	str	r2, [r7, #36]	@ 0x24
 800783e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007844:	1d1a      	adds	r2, r3, #4
 8007846:	627a      	str	r2, [r7, #36]	@ 0x24
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007852:	429a      	cmp	r2, r3
 8007854:	d3c4      	bcc.n	80077e0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800785c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800785e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	429a      	cmp	r2, r3
 8007864:	d803      	bhi.n	800786e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	e19f      	b.n	8007bae <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800786e:	2311      	movs	r3, #17
 8007870:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007874:	e19b      	b.n	8007bae <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d902      	bls.n	8007886 <f_lseek+0x114>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 818d 	beq.w	8007bae <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	3b01      	subs	r3, #1
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fd fd8b 	bl	80053b6 <clmt_clust>
 80078a0:	4602      	mov	r2, r0
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f7fd fa78 	bl	8004da4 <clust2sect>
 80078b4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d104      	bne.n	80078c6 <f_lseek+0x154>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	755a      	strb	r2, [r3, #21]
 80078c2:	2302      	movs	r3, #2
 80078c4:	e175      	b.n	8007bb2 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	8992      	ldrh	r2, [r2, #12]
 80078ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	8952      	ldrh	r2, [r2, #10]
 80078d6:	3a01      	subs	r2, #1
 80078d8:	4013      	ands	r3, r2
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	4413      	add	r3, r2
 80078de:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	8992      	ldrh	r2, [r2, #12]
 80078e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80078ec:	fb01 f202 	mul.w	r2, r1, r2
 80078f0:	1a9b      	subs	r3, r3, r2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 815b 	beq.w	8007bae <f_lseek+0x43c>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	429a      	cmp	r2, r3
 8007900:	f000 8155 	beq.w	8007bae <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	7d1b      	ldrb	r3, [r3, #20]
 8007908:	b25b      	sxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	da18      	bge.n	8007940 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	7858      	ldrb	r0, [r3, #1]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a1a      	ldr	r2, [r3, #32]
 800791c:	2301      	movs	r3, #1
 800791e:	f7fc feb5 	bl	800468c <disk_write>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d004      	beq.n	8007932 <f_lseek+0x1c0>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	755a      	strb	r2, [r3, #21]
 800792e:	2301      	movs	r3, #1
 8007930:	e13f      	b.n	8007bb2 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	7d1b      	ldrb	r3, [r3, #20]
 8007936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800793a:	b2da      	uxtb	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	7858      	ldrb	r0, [r3, #1]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800794a:	2301      	movs	r3, #1
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	f7fc fe7d 	bl	800464c <disk_read>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d004      	beq.n	8007962 <f_lseek+0x1f0>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	755a      	strb	r2, [r3, #21]
 800795e:	2301      	movs	r3, #1
 8007960:	e127      	b.n	8007bb2 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	621a      	str	r2, [r3, #32]
 8007968:	e121      	b.n	8007bae <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	429a      	cmp	r2, r3
 8007972:	d908      	bls.n	8007986 <f_lseek+0x214>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	7d1b      	ldrb	r3, [r3, #20]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d102      	bne.n	8007986 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800798c:	2300      	movs	r3, #0
 800798e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007994:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 80b5 	beq.w	8007b08 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	895b      	ldrh	r3, [r3, #10]
 80079a2:	461a      	mov	r2, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	899b      	ldrh	r3, [r3, #12]
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
 80079ac:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01b      	beq.n	80079ec <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	1e5a      	subs	r2, r3, #1
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	1e59      	subs	r1, r3, #1
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d30f      	bcc.n	80079ec <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	1e5a      	subs	r2, r3, #1
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	425b      	negs	r3, r3
 80079d4:	401a      	ands	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079ea:	e022      	b.n	8007a32 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80079f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d119      	bne.n	8007a2c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2100      	movs	r1, #0
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fd fc42 	bl	8005286 <create_chain>
 8007a02:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d104      	bne.n	8007a14 <f_lseek+0x2a2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	755a      	strb	r2, [r3, #21]
 8007a10:	2302      	movs	r3, #2
 8007a12:	e0ce      	b.n	8007bb2 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a1a:	d104      	bne.n	8007a26 <f_lseek+0x2b4>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	755a      	strb	r2, [r3, #21]
 8007a22:	2301      	movs	r3, #1
 8007a24:	e0c5      	b.n	8007bb2 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a2a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a30:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d067      	beq.n	8007b08 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007a38:	e03a      	b.n	8007ab0 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	603b      	str	r3, [r7, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699a      	ldr	r2, [r3, #24]
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	441a      	add	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	7d1b      	ldrb	r3, [r3, #20]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fd fc11 	bl	8005286 <create_chain>
 8007a64:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d108      	bne.n	8007a7e <f_lseek+0x30c>
							ofs = 0; break;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	e022      	b.n	8007ab8 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fd f9b3 	bl	8004de2 <get_fat>
 8007a7c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a84:	d104      	bne.n	8007a90 <f_lseek+0x31e>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	755a      	strb	r2, [r3, #21]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e090      	b.n	8007bb2 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d904      	bls.n	8007aa0 <f_lseek+0x32e>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d304      	bcc.n	8007aaa <f_lseek+0x338>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	755a      	strb	r2, [r3, #21]
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e083      	b.n	8007bb2 <f_lseek+0x440>
					fp->clust = clst;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007aae:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d8c0      	bhi.n	8007a3a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699a      	ldr	r2, [r3, #24]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	441a      	add	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	899b      	ldrh	r3, [r3, #12]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ad0:	fb01 f202 	mul.w	r2, r1, r2
 8007ad4:	1a9b      	subs	r3, r3, r2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d016      	beq.n	8007b08 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fd f960 	bl	8004da4 <clust2sect>
 8007ae4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <f_lseek+0x384>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	755a      	strb	r2, [r3, #21]
 8007af2:	2302      	movs	r3, #2
 8007af4:	e05d      	b.n	8007bb2 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	899b      	ldrh	r3, [r3, #12]
 8007afa:	461a      	mov	r2, r3
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b04:	4413      	add	r3, r2
 8007b06:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	699a      	ldr	r2, [r3, #24]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d90a      	bls.n	8007b2a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699a      	ldr	r2, [r3, #24]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	7d1b      	ldrb	r3, [r3, #20]
 8007b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	8992      	ldrh	r2, [r2, #12]
 8007b32:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b36:	fb01 f202 	mul.w	r2, r1, r2
 8007b3a:	1a9b      	subs	r3, r3, r2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d036      	beq.n	8007bae <f_lseek+0x43c>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d031      	beq.n	8007bae <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	7d1b      	ldrb	r3, [r3, #20]
 8007b4e:	b25b      	sxtb	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	da18      	bge.n	8007b86 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	7858      	ldrb	r0, [r3, #1]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1a      	ldr	r2, [r3, #32]
 8007b62:	2301      	movs	r3, #1
 8007b64:	f7fc fd92 	bl	800468c <disk_write>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d004      	beq.n	8007b78 <f_lseek+0x406>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	755a      	strb	r2, [r3, #21]
 8007b74:	2301      	movs	r3, #1
 8007b76:	e01c      	b.n	8007bb2 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	7d1b      	ldrb	r3, [r3, #20]
 8007b7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	7858      	ldrb	r0, [r3, #1]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b90:	2301      	movs	r3, #1
 8007b92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b94:	f7fc fd5a 	bl	800464c <disk_read>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <f_lseek+0x436>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	755a      	strb	r2, [r3, #21]
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e004      	b.n	8007bb2 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bac:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007bae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3740      	adds	r7, #64	@ 0x40
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b092      	sub	sp, #72	@ 0x48
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007bc6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007bca:	f107 030c 	add.w	r3, r7, #12
 8007bce:	2200      	movs	r2, #0
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fe fd69 	bl	80066a8 <find_volume>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8007bdc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f040 8099 	bne.w	8007d18 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007be6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bee:	699a      	ldr	r2, [r3, #24]
 8007bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	3b02      	subs	r3, #2
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d804      	bhi.n	8007c04 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	e089      	b.n	8007d18 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d128      	bne.n	8007c62 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007c10:	2302      	movs	r3, #2
 8007c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c16:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007c18:	f107 0314 	add.w	r3, r7, #20
 8007c1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd f8df 	bl	8004de2 <get_fat>
 8007c24:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c2c:	d103      	bne.n	8007c36 <f_getfree+0x7c>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007c34:	e063      	b.n	8007cfe <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d103      	bne.n	8007c44 <f_getfree+0x8a>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007c42:	e05c      	b.n	8007cfe <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d102      	bne.n	8007c50 <f_getfree+0x96>
 8007c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8007c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c52:	3301      	adds	r3, #1
 8007c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d3db      	bcc.n	8007c18 <f_getfree+0x5e>
 8007c60:	e04d      	b.n	8007cfe <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c72:	2300      	movs	r3, #0
 8007c74:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8007c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d113      	bne.n	8007ca4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007c7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007c84:	4619      	mov	r1, r3
 8007c86:	f7fc ffef 	bl	8004c68 <move_window>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8007c90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d131      	bne.n	8007cfc <f_getfree+0x142>
							p = fs->win;
 8007c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9a:	3338      	adds	r3, #56	@ 0x38
 8007c9c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8007c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca0:	899b      	ldrh	r3, [r3, #12]
 8007ca2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d10f      	bne.n	8007ccc <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cae:	f7fc fd2b 	bl	8004708 <ld_word>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <f_getfree+0x104>
 8007cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cba:	3301      	adds	r3, #1
 8007cbc:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc6:	3b02      	subs	r3, #2
 8007cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cca:	e010      	b.n	8007cee <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007ccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cce:	f7fc fd33 	bl	8004738 <ld_dword>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d102      	bne.n	8007ce2 <f_getfree+0x128>
 8007cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cde:	3301      	adds	r3, #1
 8007ce0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cea:	3b04      	subs	r3, #4
 8007cec:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8007cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1bd      	bne.n	8007c76 <f_getfree+0xbc>
 8007cfa:	e000      	b.n	8007cfe <f_getfree+0x144>
							if (res != FR_OK) break;
 8007cfc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d02:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d08:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0c:	791a      	ldrb	r2, [r3, #4]
 8007d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d10:	f042 0201 	orr.w	r2, r2, #1
 8007d14:	b2d2      	uxtb	r2, r2
 8007d16:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007d18:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3748      	adds	r7, #72	@ 0x48
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b0a0      	sub	sp, #128	@ 0x80
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007d30:	f107 010c 	add.w	r1, r7, #12
 8007d34:	1d3b      	adds	r3, r7, #4
 8007d36:	2202      	movs	r2, #2
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fe fcb5 	bl	80066a8 <find_volume>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 8007d48:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f040 808e 	bne.w	8007e6e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe fb94 	bl	8006488 <follow_path>
 8007d60:	4603      	mov	r3, r0
 8007d62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8007d66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d108      	bne.n	8007d80 <f_unlink+0x5c>
 8007d6e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007d72:	2102      	movs	r1, #2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fc fdc7 	bl	8004908 <chk_lock>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8007d80:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d172      	bne.n	8007e6e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8007d88:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8007d8c:	b25b      	sxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	da03      	bge.n	8007d9a <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8007d92:	2306      	movs	r3, #6
 8007d94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007d98:	e008      	b.n	8007dac <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8007d9a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8007da6:	2307      	movs	r3, #7
 8007da8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 8007dac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d134      	bne.n	8007e1e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007db8:	4611      	mov	r1, r2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fd fcd9 	bl	8005772 <ld_clust>
 8007dc0:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8007dc2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007dc6:	f003 0310 	and.w	r3, r3, #16
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d027      	beq.n	8007e1e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8007dd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dd4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8007dd6:	f107 0310 	add.w	r3, r7, #16
 8007dda:	2100      	movs	r1, #0
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fd fb22 	bl	8005426 <dir_sdi>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 8007de8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d116      	bne.n	8007e1e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8007df0:	f107 0310 	add.w	r3, r7, #16
 8007df4:	2100      	movs	r1, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fd fee5 	bl	8005bc6 <dir_read>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8007e02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d102      	bne.n	8007e10 <f_unlink+0xec>
 8007e0a:	2307      	movs	r3, #7
 8007e0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007e10:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d102      	bne.n	8007e1e <f_unlink+0xfa>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8007e1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d123      	bne.n	8007e6e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8007e26:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe f92a 	bl	8006084 <dir_remove>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8007e36:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10c      	bne.n	8007e58 <f_unlink+0x134>
 8007e3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d009      	beq.n	8007e58 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8007e44:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007e48:	2200      	movs	r2, #0
 8007e4a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fd f9b5 	bl	80051bc <remove_chain>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8007e58:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <f_unlink+0x14a>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fc ff2e 	bl	8004cc4 <sync_fs>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8007e6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3780      	adds	r7, #128	@ 0x80
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007e86:	78fb      	ldrb	r3, [r7, #3]
 8007e88:	2b0a      	cmp	r3, #10
 8007e8a:	d103      	bne.n	8007e94 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007e8c:	210d      	movs	r1, #13
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff fff3 	bl	8007e7a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	db25      	blt.n	8007eec <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	60fa      	str	r2, [r7, #12]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	78fa      	ldrb	r2, [r7, #3]
 8007eac:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b3c      	cmp	r3, #60	@ 0x3c
 8007eb2:	dd12      	ble.n	8007eda <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f103 010c 	add.w	r1, r3, #12
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	f107 0308 	add.w	r3, r7, #8
 8007ec4:	f7ff fa19 	bl	80072fa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d101      	bne.n	8007ed4 <putc_bfd+0x5a>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	e001      	b.n	8007ed8 <putc_bfd+0x5e>
 8007ed4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ed8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	1c5a      	adds	r2, r3, #1
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	609a      	str	r2, [r3, #8]
 8007eea:	e000      	b.n	8007eee <putc_bfd+0x74>
	if (i < 0) return;
 8007eec:	bf00      	nop
}
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	db16      	blt.n	8007f32 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6818      	ldr	r0, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f103 010c 	add.w	r1, r3, #12
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	461a      	mov	r2, r3
 8007f14:	f107 030c 	add.w	r3, r7, #12
 8007f18:	f7ff f9ef 	bl	80072fa <f_write>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d107      	bne.n	8007f32 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d102      	bne.n	8007f32 <putc_flush+0x3e>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	e001      	b.n	8007f36 <putc_flush+0x42>
	return EOF;
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	605a      	str	r2, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	609a      	str	r2, [r3, #8]
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b096      	sub	sp, #88	@ 0x58
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007f72:	f107 030c 	add.w	r3, r7, #12
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff ffe0 	bl	8007f3e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007f7e:	e009      	b.n	8007f94 <f_puts+0x2c>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	607a      	str	r2, [r7, #4]
 8007f86:	781a      	ldrb	r2, [r3, #0]
 8007f88:	f107 030c 	add.w	r3, r7, #12
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff ff73 	bl	8007e7a <putc_bfd>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1f1      	bne.n	8007f80 <f_puts+0x18>
	return putc_flush(&pb);
 8007f9c:	f107 030c 	add.w	r3, r7, #12
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff ffa7 	bl	8007ef4 <putc_flush>
 8007fa6:	4603      	mov	r3, r0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3758      	adds	r7, #88	@ 0x58
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8008044 <FATFS_LinkDriverEx+0x94>)
 8007fc8:	7a5b      	ldrb	r3, [r3, #9]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d131      	bne.n	8008034 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8008044 <FATFS_LinkDriverEx+0x94>)
 8007fd2:	7a5b      	ldrb	r3, [r3, #9]
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8008044 <FATFS_LinkDriverEx+0x94>)
 8007fda:	2100      	movs	r1, #0
 8007fdc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007fde:	4b19      	ldr	r3, [pc, #100]	@ (8008044 <FATFS_LinkDriverEx+0x94>)
 8007fe0:	7a5b      	ldrb	r3, [r3, #9]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	4a17      	ldr	r2, [pc, #92]	@ (8008044 <FATFS_LinkDriverEx+0x94>)
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007fee:	4b15      	ldr	r3, [pc, #84]	@ (8008044 <FATFS_LinkDriverEx+0x94>)
 8007ff0:	7a5b      	ldrb	r3, [r3, #9]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	4b13      	ldr	r3, [pc, #76]	@ (8008044 <FATFS_LinkDriverEx+0x94>)
 8007ff8:	4413      	add	r3, r2
 8007ffa:	79fa      	ldrb	r2, [r7, #7]
 8007ffc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007ffe:	4b11      	ldr	r3, [pc, #68]	@ (8008044 <FATFS_LinkDriverEx+0x94>)
 8008000:	7a5b      	ldrb	r3, [r3, #9]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	b2d1      	uxtb	r1, r2
 8008008:	4a0e      	ldr	r2, [pc, #56]	@ (8008044 <FATFS_LinkDriverEx+0x94>)
 800800a:	7251      	strb	r1, [r2, #9]
 800800c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800800e:	7dbb      	ldrb	r3, [r7, #22]
 8008010:	3330      	adds	r3, #48	@ 0x30
 8008012:	b2da      	uxtb	r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	3301      	adds	r3, #1
 800801c:	223a      	movs	r2, #58	@ 0x3a
 800801e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	3302      	adds	r3, #2
 8008024:	222f      	movs	r2, #47	@ 0x2f
 8008026:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	3303      	adds	r3, #3
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
}
 8008036:	4618      	mov	r0, r3
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	200024fc 	.word	0x200024fc

08008048 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008052:	2200      	movs	r2, #0
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff ffaa 	bl	8007fb0 <FATFS_LinkDriverEx>
 800805c:	4603      	mov	r3, r0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
	...

08008068 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008074:	88fb      	ldrh	r3, [r7, #6]
 8008076:	2b7f      	cmp	r3, #127	@ 0x7f
 8008078:	d802      	bhi.n	8008080 <ff_convert+0x18>
		c = chr;
 800807a:	88fb      	ldrh	r3, [r7, #6]
 800807c:	81fb      	strh	r3, [r7, #14]
 800807e:	e025      	b.n	80080cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00b      	beq.n	800809e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	2bff      	cmp	r3, #255	@ 0xff
 800808a:	d805      	bhi.n	8008098 <ff_convert+0x30>
 800808c:	88fb      	ldrh	r3, [r7, #6]
 800808e:	3b80      	subs	r3, #128	@ 0x80
 8008090:	4a12      	ldr	r2, [pc, #72]	@ (80080dc <ff_convert+0x74>)
 8008092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008096:	e000      	b.n	800809a <ff_convert+0x32>
 8008098:	2300      	movs	r3, #0
 800809a:	81fb      	strh	r3, [r7, #14]
 800809c:	e016      	b.n	80080cc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800809e:	2300      	movs	r3, #0
 80080a0:	81fb      	strh	r3, [r7, #14]
 80080a2:	e009      	b.n	80080b8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80080a4:	89fb      	ldrh	r3, [r7, #14]
 80080a6:	4a0d      	ldr	r2, [pc, #52]	@ (80080dc <ff_convert+0x74>)
 80080a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ac:	88fa      	ldrh	r2, [r7, #6]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d006      	beq.n	80080c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80080b2:	89fb      	ldrh	r3, [r7, #14]
 80080b4:	3301      	adds	r3, #1
 80080b6:	81fb      	strh	r3, [r7, #14]
 80080b8:	89fb      	ldrh	r3, [r7, #14]
 80080ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80080bc:	d9f2      	bls.n	80080a4 <ff_convert+0x3c>
 80080be:	e000      	b.n	80080c2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80080c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80080c2:	89fb      	ldrh	r3, [r7, #14]
 80080c4:	3380      	adds	r3, #128	@ 0x80
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80080cc:	89fb      	ldrh	r3, [r7, #14]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	08008f5c 	.word	0x08008f5c

080080e0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080f0:	d201      	bcs.n	80080f6 <ff_wtoupper+0x16>
 80080f2:	4b3e      	ldr	r3, [pc, #248]	@ (80081ec <ff_wtoupper+0x10c>)
 80080f4:	e000      	b.n	80080f8 <ff_wtoupper+0x18>
 80080f6:	4b3e      	ldr	r3, [pc, #248]	@ (80081f0 <ff_wtoupper+0x110>)
 80080f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	1c9a      	adds	r2, r3, #2
 80080fe:	617a      	str	r2, [r7, #20]
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008104:	8a7b      	ldrh	r3, [r7, #18]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d068      	beq.n	80081dc <ff_wtoupper+0xfc>
 800810a:	88fa      	ldrh	r2, [r7, #6]
 800810c:	8a7b      	ldrh	r3, [r7, #18]
 800810e:	429a      	cmp	r2, r3
 8008110:	d364      	bcc.n	80081dc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	1c9a      	adds	r2, r3, #2
 8008116:	617a      	str	r2, [r7, #20]
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	823b      	strh	r3, [r7, #16]
 800811c:	8a3b      	ldrh	r3, [r7, #16]
 800811e:	0a1b      	lsrs	r3, r3, #8
 8008120:	81fb      	strh	r3, [r7, #14]
 8008122:	8a3b      	ldrh	r3, [r7, #16]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008128:	88fa      	ldrh	r2, [r7, #6]
 800812a:	8a79      	ldrh	r1, [r7, #18]
 800812c:	8a3b      	ldrh	r3, [r7, #16]
 800812e:	440b      	add	r3, r1
 8008130:	429a      	cmp	r2, r3
 8008132:	da49      	bge.n	80081c8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008134:	89fb      	ldrh	r3, [r7, #14]
 8008136:	2b08      	cmp	r3, #8
 8008138:	d84f      	bhi.n	80081da <ff_wtoupper+0xfa>
 800813a:	a201      	add	r2, pc, #4	@ (adr r2, 8008140 <ff_wtoupper+0x60>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008165 	.word	0x08008165
 8008144:	08008177 	.word	0x08008177
 8008148:	0800818d 	.word	0x0800818d
 800814c:	08008195 	.word	0x08008195
 8008150:	0800819d 	.word	0x0800819d
 8008154:	080081a5 	.word	0x080081a5
 8008158:	080081ad 	.word	0x080081ad
 800815c:	080081b5 	.word	0x080081b5
 8008160:	080081bd 	.word	0x080081bd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008164:	88fa      	ldrh	r2, [r7, #6]
 8008166:	8a7b      	ldrh	r3, [r7, #18]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	4413      	add	r3, r2
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	80fb      	strh	r3, [r7, #6]
 8008174:	e027      	b.n	80081c6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008176:	88fa      	ldrh	r2, [r7, #6]
 8008178:	8a7b      	ldrh	r3, [r7, #18]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	b29b      	uxth	r3, r3
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	b29b      	uxth	r3, r3
 8008184:	88fa      	ldrh	r2, [r7, #6]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	80fb      	strh	r3, [r7, #6]
 800818a:	e01c      	b.n	80081c6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	3b10      	subs	r3, #16
 8008190:	80fb      	strh	r3, [r7, #6]
 8008192:	e018      	b.n	80081c6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008194:	88fb      	ldrh	r3, [r7, #6]
 8008196:	3b20      	subs	r3, #32
 8008198:	80fb      	strh	r3, [r7, #6]
 800819a:	e014      	b.n	80081c6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800819c:	88fb      	ldrh	r3, [r7, #6]
 800819e:	3b30      	subs	r3, #48	@ 0x30
 80081a0:	80fb      	strh	r3, [r7, #6]
 80081a2:	e010      	b.n	80081c6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80081a4:	88fb      	ldrh	r3, [r7, #6]
 80081a6:	3b1a      	subs	r3, #26
 80081a8:	80fb      	strh	r3, [r7, #6]
 80081aa:	e00c      	b.n	80081c6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80081ac:	88fb      	ldrh	r3, [r7, #6]
 80081ae:	3308      	adds	r3, #8
 80081b0:	80fb      	strh	r3, [r7, #6]
 80081b2:	e008      	b.n	80081c6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80081b4:	88fb      	ldrh	r3, [r7, #6]
 80081b6:	3b50      	subs	r3, #80	@ 0x50
 80081b8:	80fb      	strh	r3, [r7, #6]
 80081ba:	e004      	b.n	80081c6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80081c2:	80fb      	strh	r3, [r7, #6]
 80081c4:	bf00      	nop
			}
			break;
 80081c6:	e008      	b.n	80081da <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80081c8:	89fb      	ldrh	r3, [r7, #14]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d195      	bne.n	80080fa <ff_wtoupper+0x1a>
 80081ce:	8a3b      	ldrh	r3, [r7, #16]
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	4413      	add	r3, r2
 80081d6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80081d8:	e78f      	b.n	80080fa <ff_wtoupper+0x1a>
			break;
 80081da:	bf00      	nop
	}

	return chr;
 80081dc:	88fb      	ldrh	r3, [r7, #6]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	0800905c 	.word	0x0800905c
 80081f0:	08009250 	.word	0x08009250

080081f4 <siprintf>:
 80081f4:	b40e      	push	{r1, r2, r3}
 80081f6:	b500      	push	{lr}
 80081f8:	b09c      	sub	sp, #112	@ 0x70
 80081fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80081fc:	9002      	str	r0, [sp, #8]
 80081fe:	9006      	str	r0, [sp, #24]
 8008200:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008204:	4809      	ldr	r0, [pc, #36]	@ (800822c <siprintf+0x38>)
 8008206:	9107      	str	r1, [sp, #28]
 8008208:	9104      	str	r1, [sp, #16]
 800820a:	4909      	ldr	r1, [pc, #36]	@ (8008230 <siprintf+0x3c>)
 800820c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008210:	9105      	str	r1, [sp, #20]
 8008212:	6800      	ldr	r0, [r0, #0]
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	a902      	add	r1, sp, #8
 8008218:	f000 f9b4 	bl	8008584 <_svfiprintf_r>
 800821c:	9b02      	ldr	r3, [sp, #8]
 800821e:	2200      	movs	r2, #0
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	b01c      	add	sp, #112	@ 0x70
 8008224:	f85d eb04 	ldr.w	lr, [sp], #4
 8008228:	b003      	add	sp, #12
 800822a:	4770      	bx	lr
 800822c:	2000002c 	.word	0x2000002c
 8008230:	ffff0208 	.word	0xffff0208

08008234 <_vsiprintf_r>:
 8008234:	b500      	push	{lr}
 8008236:	b09b      	sub	sp, #108	@ 0x6c
 8008238:	9100      	str	r1, [sp, #0]
 800823a:	9104      	str	r1, [sp, #16]
 800823c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008240:	9105      	str	r1, [sp, #20]
 8008242:	9102      	str	r1, [sp, #8]
 8008244:	4905      	ldr	r1, [pc, #20]	@ (800825c <_vsiprintf_r+0x28>)
 8008246:	9103      	str	r1, [sp, #12]
 8008248:	4669      	mov	r1, sp
 800824a:	f000 f99b 	bl	8008584 <_svfiprintf_r>
 800824e:	9b00      	ldr	r3, [sp, #0]
 8008250:	2200      	movs	r2, #0
 8008252:	701a      	strb	r2, [r3, #0]
 8008254:	b01b      	add	sp, #108	@ 0x6c
 8008256:	f85d fb04 	ldr.w	pc, [sp], #4
 800825a:	bf00      	nop
 800825c:	ffff0208 	.word	0xffff0208

08008260 <vsiprintf>:
 8008260:	4613      	mov	r3, r2
 8008262:	460a      	mov	r2, r1
 8008264:	4601      	mov	r1, r0
 8008266:	4802      	ldr	r0, [pc, #8]	@ (8008270 <vsiprintf+0x10>)
 8008268:	6800      	ldr	r0, [r0, #0]
 800826a:	f7ff bfe3 	b.w	8008234 <_vsiprintf_r>
 800826e:	bf00      	nop
 8008270:	2000002c 	.word	0x2000002c

08008274 <memset>:
 8008274:	4402      	add	r2, r0
 8008276:	4603      	mov	r3, r0
 8008278:	4293      	cmp	r3, r2
 800827a:	d100      	bne.n	800827e <memset+0xa>
 800827c:	4770      	bx	lr
 800827e:	f803 1b01 	strb.w	r1, [r3], #1
 8008282:	e7f9      	b.n	8008278 <memset+0x4>

08008284 <__errno>:
 8008284:	4b01      	ldr	r3, [pc, #4]	@ (800828c <__errno+0x8>)
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	2000002c 	.word	0x2000002c

08008290 <__libc_init_array>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	4d0d      	ldr	r5, [pc, #52]	@ (80082c8 <__libc_init_array+0x38>)
 8008294:	4c0d      	ldr	r4, [pc, #52]	@ (80082cc <__libc_init_array+0x3c>)
 8008296:	1b64      	subs	r4, r4, r5
 8008298:	10a4      	asrs	r4, r4, #2
 800829a:	2600      	movs	r6, #0
 800829c:	42a6      	cmp	r6, r4
 800829e:	d109      	bne.n	80082b4 <__libc_init_array+0x24>
 80082a0:	4d0b      	ldr	r5, [pc, #44]	@ (80082d0 <__libc_init_array+0x40>)
 80082a2:	4c0c      	ldr	r4, [pc, #48]	@ (80082d4 <__libc_init_array+0x44>)
 80082a4:	f000 fc66 	bl	8008b74 <_init>
 80082a8:	1b64      	subs	r4, r4, r5
 80082aa:	10a4      	asrs	r4, r4, #2
 80082ac:	2600      	movs	r6, #0
 80082ae:	42a6      	cmp	r6, r4
 80082b0:	d105      	bne.n	80082be <__libc_init_array+0x2e>
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b8:	4798      	blx	r3
 80082ba:	3601      	adds	r6, #1
 80082bc:	e7ee      	b.n	800829c <__libc_init_array+0xc>
 80082be:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c2:	4798      	blx	r3
 80082c4:	3601      	adds	r6, #1
 80082c6:	e7f2      	b.n	80082ae <__libc_init_array+0x1e>
 80082c8:	08009348 	.word	0x08009348
 80082cc:	08009348 	.word	0x08009348
 80082d0:	08009348 	.word	0x08009348
 80082d4:	0800934c 	.word	0x0800934c

080082d8 <__retarget_lock_acquire_recursive>:
 80082d8:	4770      	bx	lr

080082da <__retarget_lock_release_recursive>:
 80082da:	4770      	bx	lr

080082dc <_free_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4605      	mov	r5, r0
 80082e0:	2900      	cmp	r1, #0
 80082e2:	d041      	beq.n	8008368 <_free_r+0x8c>
 80082e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e8:	1f0c      	subs	r4, r1, #4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bfb8      	it	lt
 80082ee:	18e4      	addlt	r4, r4, r3
 80082f0:	f000 f8e0 	bl	80084b4 <__malloc_lock>
 80082f4:	4a1d      	ldr	r2, [pc, #116]	@ (800836c <_free_r+0x90>)
 80082f6:	6813      	ldr	r3, [r2, #0]
 80082f8:	b933      	cbnz	r3, 8008308 <_free_r+0x2c>
 80082fa:	6063      	str	r3, [r4, #4]
 80082fc:	6014      	str	r4, [r2, #0]
 80082fe:	4628      	mov	r0, r5
 8008300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008304:	f000 b8dc 	b.w	80084c0 <__malloc_unlock>
 8008308:	42a3      	cmp	r3, r4
 800830a:	d908      	bls.n	800831e <_free_r+0x42>
 800830c:	6820      	ldr	r0, [r4, #0]
 800830e:	1821      	adds	r1, r4, r0
 8008310:	428b      	cmp	r3, r1
 8008312:	bf01      	itttt	eq
 8008314:	6819      	ldreq	r1, [r3, #0]
 8008316:	685b      	ldreq	r3, [r3, #4]
 8008318:	1809      	addeq	r1, r1, r0
 800831a:	6021      	streq	r1, [r4, #0]
 800831c:	e7ed      	b.n	80082fa <_free_r+0x1e>
 800831e:	461a      	mov	r2, r3
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	b10b      	cbz	r3, 8008328 <_free_r+0x4c>
 8008324:	42a3      	cmp	r3, r4
 8008326:	d9fa      	bls.n	800831e <_free_r+0x42>
 8008328:	6811      	ldr	r1, [r2, #0]
 800832a:	1850      	adds	r0, r2, r1
 800832c:	42a0      	cmp	r0, r4
 800832e:	d10b      	bne.n	8008348 <_free_r+0x6c>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	4401      	add	r1, r0
 8008334:	1850      	adds	r0, r2, r1
 8008336:	4283      	cmp	r3, r0
 8008338:	6011      	str	r1, [r2, #0]
 800833a:	d1e0      	bne.n	80082fe <_free_r+0x22>
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	6053      	str	r3, [r2, #4]
 8008342:	4408      	add	r0, r1
 8008344:	6010      	str	r0, [r2, #0]
 8008346:	e7da      	b.n	80082fe <_free_r+0x22>
 8008348:	d902      	bls.n	8008350 <_free_r+0x74>
 800834a:	230c      	movs	r3, #12
 800834c:	602b      	str	r3, [r5, #0]
 800834e:	e7d6      	b.n	80082fe <_free_r+0x22>
 8008350:	6820      	ldr	r0, [r4, #0]
 8008352:	1821      	adds	r1, r4, r0
 8008354:	428b      	cmp	r3, r1
 8008356:	bf04      	itt	eq
 8008358:	6819      	ldreq	r1, [r3, #0]
 800835a:	685b      	ldreq	r3, [r3, #4]
 800835c:	6063      	str	r3, [r4, #4]
 800835e:	bf04      	itt	eq
 8008360:	1809      	addeq	r1, r1, r0
 8008362:	6021      	streq	r1, [r4, #0]
 8008364:	6054      	str	r4, [r2, #4]
 8008366:	e7ca      	b.n	80082fe <_free_r+0x22>
 8008368:	bd38      	pop	{r3, r4, r5, pc}
 800836a:	bf00      	nop
 800836c:	2000264c 	.word	0x2000264c

08008370 <sbrk_aligned>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	4e0f      	ldr	r6, [pc, #60]	@ (80083b0 <sbrk_aligned+0x40>)
 8008374:	460c      	mov	r4, r1
 8008376:	6831      	ldr	r1, [r6, #0]
 8008378:	4605      	mov	r5, r0
 800837a:	b911      	cbnz	r1, 8008382 <sbrk_aligned+0x12>
 800837c:	f000 fba6 	bl	8008acc <_sbrk_r>
 8008380:	6030      	str	r0, [r6, #0]
 8008382:	4621      	mov	r1, r4
 8008384:	4628      	mov	r0, r5
 8008386:	f000 fba1 	bl	8008acc <_sbrk_r>
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	d103      	bne.n	8008396 <sbrk_aligned+0x26>
 800838e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008392:	4620      	mov	r0, r4
 8008394:	bd70      	pop	{r4, r5, r6, pc}
 8008396:	1cc4      	adds	r4, r0, #3
 8008398:	f024 0403 	bic.w	r4, r4, #3
 800839c:	42a0      	cmp	r0, r4
 800839e:	d0f8      	beq.n	8008392 <sbrk_aligned+0x22>
 80083a0:	1a21      	subs	r1, r4, r0
 80083a2:	4628      	mov	r0, r5
 80083a4:	f000 fb92 	bl	8008acc <_sbrk_r>
 80083a8:	3001      	adds	r0, #1
 80083aa:	d1f2      	bne.n	8008392 <sbrk_aligned+0x22>
 80083ac:	e7ef      	b.n	800838e <sbrk_aligned+0x1e>
 80083ae:	bf00      	nop
 80083b0:	20002648 	.word	0x20002648

080083b4 <_malloc_r>:
 80083b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b8:	1ccd      	adds	r5, r1, #3
 80083ba:	f025 0503 	bic.w	r5, r5, #3
 80083be:	3508      	adds	r5, #8
 80083c0:	2d0c      	cmp	r5, #12
 80083c2:	bf38      	it	cc
 80083c4:	250c      	movcc	r5, #12
 80083c6:	2d00      	cmp	r5, #0
 80083c8:	4606      	mov	r6, r0
 80083ca:	db01      	blt.n	80083d0 <_malloc_r+0x1c>
 80083cc:	42a9      	cmp	r1, r5
 80083ce:	d904      	bls.n	80083da <_malloc_r+0x26>
 80083d0:	230c      	movs	r3, #12
 80083d2:	6033      	str	r3, [r6, #0]
 80083d4:	2000      	movs	r0, #0
 80083d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084b0 <_malloc_r+0xfc>
 80083de:	f000 f869 	bl	80084b4 <__malloc_lock>
 80083e2:	f8d8 3000 	ldr.w	r3, [r8]
 80083e6:	461c      	mov	r4, r3
 80083e8:	bb44      	cbnz	r4, 800843c <_malloc_r+0x88>
 80083ea:	4629      	mov	r1, r5
 80083ec:	4630      	mov	r0, r6
 80083ee:	f7ff ffbf 	bl	8008370 <sbrk_aligned>
 80083f2:	1c43      	adds	r3, r0, #1
 80083f4:	4604      	mov	r4, r0
 80083f6:	d158      	bne.n	80084aa <_malloc_r+0xf6>
 80083f8:	f8d8 4000 	ldr.w	r4, [r8]
 80083fc:	4627      	mov	r7, r4
 80083fe:	2f00      	cmp	r7, #0
 8008400:	d143      	bne.n	800848a <_malloc_r+0xd6>
 8008402:	2c00      	cmp	r4, #0
 8008404:	d04b      	beq.n	800849e <_malloc_r+0xea>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	4639      	mov	r1, r7
 800840a:	4630      	mov	r0, r6
 800840c:	eb04 0903 	add.w	r9, r4, r3
 8008410:	f000 fb5c 	bl	8008acc <_sbrk_r>
 8008414:	4581      	cmp	r9, r0
 8008416:	d142      	bne.n	800849e <_malloc_r+0xea>
 8008418:	6821      	ldr	r1, [r4, #0]
 800841a:	1a6d      	subs	r5, r5, r1
 800841c:	4629      	mov	r1, r5
 800841e:	4630      	mov	r0, r6
 8008420:	f7ff ffa6 	bl	8008370 <sbrk_aligned>
 8008424:	3001      	adds	r0, #1
 8008426:	d03a      	beq.n	800849e <_malloc_r+0xea>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	442b      	add	r3, r5
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	f8d8 3000 	ldr.w	r3, [r8]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	bb62      	cbnz	r2, 8008490 <_malloc_r+0xdc>
 8008436:	f8c8 7000 	str.w	r7, [r8]
 800843a:	e00f      	b.n	800845c <_malloc_r+0xa8>
 800843c:	6822      	ldr	r2, [r4, #0]
 800843e:	1b52      	subs	r2, r2, r5
 8008440:	d420      	bmi.n	8008484 <_malloc_r+0xd0>
 8008442:	2a0b      	cmp	r2, #11
 8008444:	d917      	bls.n	8008476 <_malloc_r+0xc2>
 8008446:	1961      	adds	r1, r4, r5
 8008448:	42a3      	cmp	r3, r4
 800844a:	6025      	str	r5, [r4, #0]
 800844c:	bf18      	it	ne
 800844e:	6059      	strne	r1, [r3, #4]
 8008450:	6863      	ldr	r3, [r4, #4]
 8008452:	bf08      	it	eq
 8008454:	f8c8 1000 	streq.w	r1, [r8]
 8008458:	5162      	str	r2, [r4, r5]
 800845a:	604b      	str	r3, [r1, #4]
 800845c:	4630      	mov	r0, r6
 800845e:	f000 f82f 	bl	80084c0 <__malloc_unlock>
 8008462:	f104 000b 	add.w	r0, r4, #11
 8008466:	1d23      	adds	r3, r4, #4
 8008468:	f020 0007 	bic.w	r0, r0, #7
 800846c:	1ac2      	subs	r2, r0, r3
 800846e:	bf1c      	itt	ne
 8008470:	1a1b      	subne	r3, r3, r0
 8008472:	50a3      	strne	r3, [r4, r2]
 8008474:	e7af      	b.n	80083d6 <_malloc_r+0x22>
 8008476:	6862      	ldr	r2, [r4, #4]
 8008478:	42a3      	cmp	r3, r4
 800847a:	bf0c      	ite	eq
 800847c:	f8c8 2000 	streq.w	r2, [r8]
 8008480:	605a      	strne	r2, [r3, #4]
 8008482:	e7eb      	b.n	800845c <_malloc_r+0xa8>
 8008484:	4623      	mov	r3, r4
 8008486:	6864      	ldr	r4, [r4, #4]
 8008488:	e7ae      	b.n	80083e8 <_malloc_r+0x34>
 800848a:	463c      	mov	r4, r7
 800848c:	687f      	ldr	r7, [r7, #4]
 800848e:	e7b6      	b.n	80083fe <_malloc_r+0x4a>
 8008490:	461a      	mov	r2, r3
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	42a3      	cmp	r3, r4
 8008496:	d1fb      	bne.n	8008490 <_malloc_r+0xdc>
 8008498:	2300      	movs	r3, #0
 800849a:	6053      	str	r3, [r2, #4]
 800849c:	e7de      	b.n	800845c <_malloc_r+0xa8>
 800849e:	230c      	movs	r3, #12
 80084a0:	6033      	str	r3, [r6, #0]
 80084a2:	4630      	mov	r0, r6
 80084a4:	f000 f80c 	bl	80084c0 <__malloc_unlock>
 80084a8:	e794      	b.n	80083d4 <_malloc_r+0x20>
 80084aa:	6005      	str	r5, [r0, #0]
 80084ac:	e7d6      	b.n	800845c <_malloc_r+0xa8>
 80084ae:	bf00      	nop
 80084b0:	2000264c 	.word	0x2000264c

080084b4 <__malloc_lock>:
 80084b4:	4801      	ldr	r0, [pc, #4]	@ (80084bc <__malloc_lock+0x8>)
 80084b6:	f7ff bf0f 	b.w	80082d8 <__retarget_lock_acquire_recursive>
 80084ba:	bf00      	nop
 80084bc:	20002644 	.word	0x20002644

080084c0 <__malloc_unlock>:
 80084c0:	4801      	ldr	r0, [pc, #4]	@ (80084c8 <__malloc_unlock+0x8>)
 80084c2:	f7ff bf0a 	b.w	80082da <__retarget_lock_release_recursive>
 80084c6:	bf00      	nop
 80084c8:	20002644 	.word	0x20002644

080084cc <__ssputs_r>:
 80084cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d0:	688e      	ldr	r6, [r1, #8]
 80084d2:	461f      	mov	r7, r3
 80084d4:	42be      	cmp	r6, r7
 80084d6:	680b      	ldr	r3, [r1, #0]
 80084d8:	4682      	mov	sl, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	4690      	mov	r8, r2
 80084de:	d82d      	bhi.n	800853c <__ssputs_r+0x70>
 80084e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084e8:	d026      	beq.n	8008538 <__ssputs_r+0x6c>
 80084ea:	6965      	ldr	r5, [r4, #20]
 80084ec:	6909      	ldr	r1, [r1, #16]
 80084ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084f2:	eba3 0901 	sub.w	r9, r3, r1
 80084f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084fa:	1c7b      	adds	r3, r7, #1
 80084fc:	444b      	add	r3, r9
 80084fe:	106d      	asrs	r5, r5, #1
 8008500:	429d      	cmp	r5, r3
 8008502:	bf38      	it	cc
 8008504:	461d      	movcc	r5, r3
 8008506:	0553      	lsls	r3, r2, #21
 8008508:	d527      	bpl.n	800855a <__ssputs_r+0x8e>
 800850a:	4629      	mov	r1, r5
 800850c:	f7ff ff52 	bl	80083b4 <_malloc_r>
 8008510:	4606      	mov	r6, r0
 8008512:	b360      	cbz	r0, 800856e <__ssputs_r+0xa2>
 8008514:	6921      	ldr	r1, [r4, #16]
 8008516:	464a      	mov	r2, r9
 8008518:	f000 fae8 	bl	8008aec <memcpy>
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	6126      	str	r6, [r4, #16]
 800852a:	6165      	str	r5, [r4, #20]
 800852c:	444e      	add	r6, r9
 800852e:	eba5 0509 	sub.w	r5, r5, r9
 8008532:	6026      	str	r6, [r4, #0]
 8008534:	60a5      	str	r5, [r4, #8]
 8008536:	463e      	mov	r6, r7
 8008538:	42be      	cmp	r6, r7
 800853a:	d900      	bls.n	800853e <__ssputs_r+0x72>
 800853c:	463e      	mov	r6, r7
 800853e:	6820      	ldr	r0, [r4, #0]
 8008540:	4632      	mov	r2, r6
 8008542:	4641      	mov	r1, r8
 8008544:	f000 faa8 	bl	8008a98 <memmove>
 8008548:	68a3      	ldr	r3, [r4, #8]
 800854a:	1b9b      	subs	r3, r3, r6
 800854c:	60a3      	str	r3, [r4, #8]
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	4433      	add	r3, r6
 8008552:	6023      	str	r3, [r4, #0]
 8008554:	2000      	movs	r0, #0
 8008556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855a:	462a      	mov	r2, r5
 800855c:	f000 fad4 	bl	8008b08 <_realloc_r>
 8008560:	4606      	mov	r6, r0
 8008562:	2800      	cmp	r0, #0
 8008564:	d1e0      	bne.n	8008528 <__ssputs_r+0x5c>
 8008566:	6921      	ldr	r1, [r4, #16]
 8008568:	4650      	mov	r0, sl
 800856a:	f7ff feb7 	bl	80082dc <_free_r>
 800856e:	230c      	movs	r3, #12
 8008570:	f8ca 3000 	str.w	r3, [sl]
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008580:	e7e9      	b.n	8008556 <__ssputs_r+0x8a>
	...

08008584 <_svfiprintf_r>:
 8008584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	4698      	mov	r8, r3
 800858a:	898b      	ldrh	r3, [r1, #12]
 800858c:	061b      	lsls	r3, r3, #24
 800858e:	b09d      	sub	sp, #116	@ 0x74
 8008590:	4607      	mov	r7, r0
 8008592:	460d      	mov	r5, r1
 8008594:	4614      	mov	r4, r2
 8008596:	d510      	bpl.n	80085ba <_svfiprintf_r+0x36>
 8008598:	690b      	ldr	r3, [r1, #16]
 800859a:	b973      	cbnz	r3, 80085ba <_svfiprintf_r+0x36>
 800859c:	2140      	movs	r1, #64	@ 0x40
 800859e:	f7ff ff09 	bl	80083b4 <_malloc_r>
 80085a2:	6028      	str	r0, [r5, #0]
 80085a4:	6128      	str	r0, [r5, #16]
 80085a6:	b930      	cbnz	r0, 80085b6 <_svfiprintf_r+0x32>
 80085a8:	230c      	movs	r3, #12
 80085aa:	603b      	str	r3, [r7, #0]
 80085ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085b0:	b01d      	add	sp, #116	@ 0x74
 80085b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b6:	2340      	movs	r3, #64	@ 0x40
 80085b8:	616b      	str	r3, [r5, #20]
 80085ba:	2300      	movs	r3, #0
 80085bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085be:	2320      	movs	r3, #32
 80085c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085c8:	2330      	movs	r3, #48	@ 0x30
 80085ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008768 <_svfiprintf_r+0x1e4>
 80085ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085d2:	f04f 0901 	mov.w	r9, #1
 80085d6:	4623      	mov	r3, r4
 80085d8:	469a      	mov	sl, r3
 80085da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085de:	b10a      	cbz	r2, 80085e4 <_svfiprintf_r+0x60>
 80085e0:	2a25      	cmp	r2, #37	@ 0x25
 80085e2:	d1f9      	bne.n	80085d8 <_svfiprintf_r+0x54>
 80085e4:	ebba 0b04 	subs.w	fp, sl, r4
 80085e8:	d00b      	beq.n	8008602 <_svfiprintf_r+0x7e>
 80085ea:	465b      	mov	r3, fp
 80085ec:	4622      	mov	r2, r4
 80085ee:	4629      	mov	r1, r5
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7ff ff6b 	bl	80084cc <__ssputs_r>
 80085f6:	3001      	adds	r0, #1
 80085f8:	f000 80a7 	beq.w	800874a <_svfiprintf_r+0x1c6>
 80085fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085fe:	445a      	add	r2, fp
 8008600:	9209      	str	r2, [sp, #36]	@ 0x24
 8008602:	f89a 3000 	ldrb.w	r3, [sl]
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 809f 	beq.w	800874a <_svfiprintf_r+0x1c6>
 800860c:	2300      	movs	r3, #0
 800860e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008616:	f10a 0a01 	add.w	sl, sl, #1
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	9307      	str	r3, [sp, #28]
 800861e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008622:	931a      	str	r3, [sp, #104]	@ 0x68
 8008624:	4654      	mov	r4, sl
 8008626:	2205      	movs	r2, #5
 8008628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862c:	484e      	ldr	r0, [pc, #312]	@ (8008768 <_svfiprintf_r+0x1e4>)
 800862e:	f7f7 fdf7 	bl	8000220 <memchr>
 8008632:	9a04      	ldr	r2, [sp, #16]
 8008634:	b9d8      	cbnz	r0, 800866e <_svfiprintf_r+0xea>
 8008636:	06d0      	lsls	r0, r2, #27
 8008638:	bf44      	itt	mi
 800863a:	2320      	movmi	r3, #32
 800863c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008640:	0711      	lsls	r1, r2, #28
 8008642:	bf44      	itt	mi
 8008644:	232b      	movmi	r3, #43	@ 0x2b
 8008646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800864a:	f89a 3000 	ldrb.w	r3, [sl]
 800864e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008650:	d015      	beq.n	800867e <_svfiprintf_r+0xfa>
 8008652:	9a07      	ldr	r2, [sp, #28]
 8008654:	4654      	mov	r4, sl
 8008656:	2000      	movs	r0, #0
 8008658:	f04f 0c0a 	mov.w	ip, #10
 800865c:	4621      	mov	r1, r4
 800865e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008662:	3b30      	subs	r3, #48	@ 0x30
 8008664:	2b09      	cmp	r3, #9
 8008666:	d94b      	bls.n	8008700 <_svfiprintf_r+0x17c>
 8008668:	b1b0      	cbz	r0, 8008698 <_svfiprintf_r+0x114>
 800866a:	9207      	str	r2, [sp, #28]
 800866c:	e014      	b.n	8008698 <_svfiprintf_r+0x114>
 800866e:	eba0 0308 	sub.w	r3, r0, r8
 8008672:	fa09 f303 	lsl.w	r3, r9, r3
 8008676:	4313      	orrs	r3, r2
 8008678:	9304      	str	r3, [sp, #16]
 800867a:	46a2      	mov	sl, r4
 800867c:	e7d2      	b.n	8008624 <_svfiprintf_r+0xa0>
 800867e:	9b03      	ldr	r3, [sp, #12]
 8008680:	1d19      	adds	r1, r3, #4
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	9103      	str	r1, [sp, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	bfbb      	ittet	lt
 800868a:	425b      	neglt	r3, r3
 800868c:	f042 0202 	orrlt.w	r2, r2, #2
 8008690:	9307      	strge	r3, [sp, #28]
 8008692:	9307      	strlt	r3, [sp, #28]
 8008694:	bfb8      	it	lt
 8008696:	9204      	strlt	r2, [sp, #16]
 8008698:	7823      	ldrb	r3, [r4, #0]
 800869a:	2b2e      	cmp	r3, #46	@ 0x2e
 800869c:	d10a      	bne.n	80086b4 <_svfiprintf_r+0x130>
 800869e:	7863      	ldrb	r3, [r4, #1]
 80086a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086a2:	d132      	bne.n	800870a <_svfiprintf_r+0x186>
 80086a4:	9b03      	ldr	r3, [sp, #12]
 80086a6:	1d1a      	adds	r2, r3, #4
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	9203      	str	r2, [sp, #12]
 80086ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086b0:	3402      	adds	r4, #2
 80086b2:	9305      	str	r3, [sp, #20]
 80086b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008778 <_svfiprintf_r+0x1f4>
 80086b8:	7821      	ldrb	r1, [r4, #0]
 80086ba:	2203      	movs	r2, #3
 80086bc:	4650      	mov	r0, sl
 80086be:	f7f7 fdaf 	bl	8000220 <memchr>
 80086c2:	b138      	cbz	r0, 80086d4 <_svfiprintf_r+0x150>
 80086c4:	9b04      	ldr	r3, [sp, #16]
 80086c6:	eba0 000a 	sub.w	r0, r0, sl
 80086ca:	2240      	movs	r2, #64	@ 0x40
 80086cc:	4082      	lsls	r2, r0
 80086ce:	4313      	orrs	r3, r2
 80086d0:	3401      	adds	r4, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d8:	4824      	ldr	r0, [pc, #144]	@ (800876c <_svfiprintf_r+0x1e8>)
 80086da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086de:	2206      	movs	r2, #6
 80086e0:	f7f7 fd9e 	bl	8000220 <memchr>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d036      	beq.n	8008756 <_svfiprintf_r+0x1d2>
 80086e8:	4b21      	ldr	r3, [pc, #132]	@ (8008770 <_svfiprintf_r+0x1ec>)
 80086ea:	bb1b      	cbnz	r3, 8008734 <_svfiprintf_r+0x1b0>
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	3307      	adds	r3, #7
 80086f0:	f023 0307 	bic.w	r3, r3, #7
 80086f4:	3308      	adds	r3, #8
 80086f6:	9303      	str	r3, [sp, #12]
 80086f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086fa:	4433      	add	r3, r6
 80086fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086fe:	e76a      	b.n	80085d6 <_svfiprintf_r+0x52>
 8008700:	fb0c 3202 	mla	r2, ip, r2, r3
 8008704:	460c      	mov	r4, r1
 8008706:	2001      	movs	r0, #1
 8008708:	e7a8      	b.n	800865c <_svfiprintf_r+0xd8>
 800870a:	2300      	movs	r3, #0
 800870c:	3401      	adds	r4, #1
 800870e:	9305      	str	r3, [sp, #20]
 8008710:	4619      	mov	r1, r3
 8008712:	f04f 0c0a 	mov.w	ip, #10
 8008716:	4620      	mov	r0, r4
 8008718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800871c:	3a30      	subs	r2, #48	@ 0x30
 800871e:	2a09      	cmp	r2, #9
 8008720:	d903      	bls.n	800872a <_svfiprintf_r+0x1a6>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0c6      	beq.n	80086b4 <_svfiprintf_r+0x130>
 8008726:	9105      	str	r1, [sp, #20]
 8008728:	e7c4      	b.n	80086b4 <_svfiprintf_r+0x130>
 800872a:	fb0c 2101 	mla	r1, ip, r1, r2
 800872e:	4604      	mov	r4, r0
 8008730:	2301      	movs	r3, #1
 8008732:	e7f0      	b.n	8008716 <_svfiprintf_r+0x192>
 8008734:	ab03      	add	r3, sp, #12
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	462a      	mov	r2, r5
 800873a:	4b0e      	ldr	r3, [pc, #56]	@ (8008774 <_svfiprintf_r+0x1f0>)
 800873c:	a904      	add	r1, sp, #16
 800873e:	4638      	mov	r0, r7
 8008740:	f3af 8000 	nop.w
 8008744:	1c42      	adds	r2, r0, #1
 8008746:	4606      	mov	r6, r0
 8008748:	d1d6      	bne.n	80086f8 <_svfiprintf_r+0x174>
 800874a:	89ab      	ldrh	r3, [r5, #12]
 800874c:	065b      	lsls	r3, r3, #25
 800874e:	f53f af2d 	bmi.w	80085ac <_svfiprintf_r+0x28>
 8008752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008754:	e72c      	b.n	80085b0 <_svfiprintf_r+0x2c>
 8008756:	ab03      	add	r3, sp, #12
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	462a      	mov	r2, r5
 800875c:	4b05      	ldr	r3, [pc, #20]	@ (8008774 <_svfiprintf_r+0x1f0>)
 800875e:	a904      	add	r1, sp, #16
 8008760:	4638      	mov	r0, r7
 8008762:	f000 f879 	bl	8008858 <_printf_i>
 8008766:	e7ed      	b.n	8008744 <_svfiprintf_r+0x1c0>
 8008768:	0800930c 	.word	0x0800930c
 800876c:	08009316 	.word	0x08009316
 8008770:	00000000 	.word	0x00000000
 8008774:	080084cd 	.word	0x080084cd
 8008778:	08009312 	.word	0x08009312

0800877c <_printf_common>:
 800877c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008780:	4616      	mov	r6, r2
 8008782:	4698      	mov	r8, r3
 8008784:	688a      	ldr	r2, [r1, #8]
 8008786:	690b      	ldr	r3, [r1, #16]
 8008788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800878c:	4293      	cmp	r3, r2
 800878e:	bfb8      	it	lt
 8008790:	4613      	movlt	r3, r2
 8008792:	6033      	str	r3, [r6, #0]
 8008794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008798:	4607      	mov	r7, r0
 800879a:	460c      	mov	r4, r1
 800879c:	b10a      	cbz	r2, 80087a2 <_printf_common+0x26>
 800879e:	3301      	adds	r3, #1
 80087a0:	6033      	str	r3, [r6, #0]
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	0699      	lsls	r1, r3, #26
 80087a6:	bf42      	ittt	mi
 80087a8:	6833      	ldrmi	r3, [r6, #0]
 80087aa:	3302      	addmi	r3, #2
 80087ac:	6033      	strmi	r3, [r6, #0]
 80087ae:	6825      	ldr	r5, [r4, #0]
 80087b0:	f015 0506 	ands.w	r5, r5, #6
 80087b4:	d106      	bne.n	80087c4 <_printf_common+0x48>
 80087b6:	f104 0a19 	add.w	sl, r4, #25
 80087ba:	68e3      	ldr	r3, [r4, #12]
 80087bc:	6832      	ldr	r2, [r6, #0]
 80087be:	1a9b      	subs	r3, r3, r2
 80087c0:	42ab      	cmp	r3, r5
 80087c2:	dc26      	bgt.n	8008812 <_printf_common+0x96>
 80087c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	3b00      	subs	r3, #0
 80087cc:	bf18      	it	ne
 80087ce:	2301      	movne	r3, #1
 80087d0:	0692      	lsls	r2, r2, #26
 80087d2:	d42b      	bmi.n	800882c <_printf_common+0xb0>
 80087d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087d8:	4641      	mov	r1, r8
 80087da:	4638      	mov	r0, r7
 80087dc:	47c8      	blx	r9
 80087de:	3001      	adds	r0, #1
 80087e0:	d01e      	beq.n	8008820 <_printf_common+0xa4>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	6922      	ldr	r2, [r4, #16]
 80087e6:	f003 0306 	and.w	r3, r3, #6
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	bf02      	ittt	eq
 80087ee:	68e5      	ldreq	r5, [r4, #12]
 80087f0:	6833      	ldreq	r3, [r6, #0]
 80087f2:	1aed      	subeq	r5, r5, r3
 80087f4:	68a3      	ldr	r3, [r4, #8]
 80087f6:	bf0c      	ite	eq
 80087f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087fc:	2500      	movne	r5, #0
 80087fe:	4293      	cmp	r3, r2
 8008800:	bfc4      	itt	gt
 8008802:	1a9b      	subgt	r3, r3, r2
 8008804:	18ed      	addgt	r5, r5, r3
 8008806:	2600      	movs	r6, #0
 8008808:	341a      	adds	r4, #26
 800880a:	42b5      	cmp	r5, r6
 800880c:	d11a      	bne.n	8008844 <_printf_common+0xc8>
 800880e:	2000      	movs	r0, #0
 8008810:	e008      	b.n	8008824 <_printf_common+0xa8>
 8008812:	2301      	movs	r3, #1
 8008814:	4652      	mov	r2, sl
 8008816:	4641      	mov	r1, r8
 8008818:	4638      	mov	r0, r7
 800881a:	47c8      	blx	r9
 800881c:	3001      	adds	r0, #1
 800881e:	d103      	bne.n	8008828 <_printf_common+0xac>
 8008820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008828:	3501      	adds	r5, #1
 800882a:	e7c6      	b.n	80087ba <_printf_common+0x3e>
 800882c:	18e1      	adds	r1, r4, r3
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	2030      	movs	r0, #48	@ 0x30
 8008832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008836:	4422      	add	r2, r4
 8008838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800883c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008840:	3302      	adds	r3, #2
 8008842:	e7c7      	b.n	80087d4 <_printf_common+0x58>
 8008844:	2301      	movs	r3, #1
 8008846:	4622      	mov	r2, r4
 8008848:	4641      	mov	r1, r8
 800884a:	4638      	mov	r0, r7
 800884c:	47c8      	blx	r9
 800884e:	3001      	adds	r0, #1
 8008850:	d0e6      	beq.n	8008820 <_printf_common+0xa4>
 8008852:	3601      	adds	r6, #1
 8008854:	e7d9      	b.n	800880a <_printf_common+0x8e>
	...

08008858 <_printf_i>:
 8008858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800885c:	7e0f      	ldrb	r7, [r1, #24]
 800885e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008860:	2f78      	cmp	r7, #120	@ 0x78
 8008862:	4691      	mov	r9, r2
 8008864:	4680      	mov	r8, r0
 8008866:	460c      	mov	r4, r1
 8008868:	469a      	mov	sl, r3
 800886a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800886e:	d807      	bhi.n	8008880 <_printf_i+0x28>
 8008870:	2f62      	cmp	r7, #98	@ 0x62
 8008872:	d80a      	bhi.n	800888a <_printf_i+0x32>
 8008874:	2f00      	cmp	r7, #0
 8008876:	f000 80d2 	beq.w	8008a1e <_printf_i+0x1c6>
 800887a:	2f58      	cmp	r7, #88	@ 0x58
 800887c:	f000 80b9 	beq.w	80089f2 <_printf_i+0x19a>
 8008880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008888:	e03a      	b.n	8008900 <_printf_i+0xa8>
 800888a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800888e:	2b15      	cmp	r3, #21
 8008890:	d8f6      	bhi.n	8008880 <_printf_i+0x28>
 8008892:	a101      	add	r1, pc, #4	@ (adr r1, 8008898 <_printf_i+0x40>)
 8008894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008898:	080088f1 	.word	0x080088f1
 800889c:	08008905 	.word	0x08008905
 80088a0:	08008881 	.word	0x08008881
 80088a4:	08008881 	.word	0x08008881
 80088a8:	08008881 	.word	0x08008881
 80088ac:	08008881 	.word	0x08008881
 80088b0:	08008905 	.word	0x08008905
 80088b4:	08008881 	.word	0x08008881
 80088b8:	08008881 	.word	0x08008881
 80088bc:	08008881 	.word	0x08008881
 80088c0:	08008881 	.word	0x08008881
 80088c4:	08008a05 	.word	0x08008a05
 80088c8:	0800892f 	.word	0x0800892f
 80088cc:	080089bf 	.word	0x080089bf
 80088d0:	08008881 	.word	0x08008881
 80088d4:	08008881 	.word	0x08008881
 80088d8:	08008a27 	.word	0x08008a27
 80088dc:	08008881 	.word	0x08008881
 80088e0:	0800892f 	.word	0x0800892f
 80088e4:	08008881 	.word	0x08008881
 80088e8:	08008881 	.word	0x08008881
 80088ec:	080089c7 	.word	0x080089c7
 80088f0:	6833      	ldr	r3, [r6, #0]
 80088f2:	1d1a      	adds	r2, r3, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6032      	str	r2, [r6, #0]
 80088f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008900:	2301      	movs	r3, #1
 8008902:	e09d      	b.n	8008a40 <_printf_i+0x1e8>
 8008904:	6833      	ldr	r3, [r6, #0]
 8008906:	6820      	ldr	r0, [r4, #0]
 8008908:	1d19      	adds	r1, r3, #4
 800890a:	6031      	str	r1, [r6, #0]
 800890c:	0606      	lsls	r6, r0, #24
 800890e:	d501      	bpl.n	8008914 <_printf_i+0xbc>
 8008910:	681d      	ldr	r5, [r3, #0]
 8008912:	e003      	b.n	800891c <_printf_i+0xc4>
 8008914:	0645      	lsls	r5, r0, #25
 8008916:	d5fb      	bpl.n	8008910 <_printf_i+0xb8>
 8008918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800891c:	2d00      	cmp	r5, #0
 800891e:	da03      	bge.n	8008928 <_printf_i+0xd0>
 8008920:	232d      	movs	r3, #45	@ 0x2d
 8008922:	426d      	negs	r5, r5
 8008924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008928:	4859      	ldr	r0, [pc, #356]	@ (8008a90 <_printf_i+0x238>)
 800892a:	230a      	movs	r3, #10
 800892c:	e011      	b.n	8008952 <_printf_i+0xfa>
 800892e:	6821      	ldr	r1, [r4, #0]
 8008930:	6833      	ldr	r3, [r6, #0]
 8008932:	0608      	lsls	r0, r1, #24
 8008934:	f853 5b04 	ldr.w	r5, [r3], #4
 8008938:	d402      	bmi.n	8008940 <_printf_i+0xe8>
 800893a:	0649      	lsls	r1, r1, #25
 800893c:	bf48      	it	mi
 800893e:	b2ad      	uxthmi	r5, r5
 8008940:	2f6f      	cmp	r7, #111	@ 0x6f
 8008942:	4853      	ldr	r0, [pc, #332]	@ (8008a90 <_printf_i+0x238>)
 8008944:	6033      	str	r3, [r6, #0]
 8008946:	bf14      	ite	ne
 8008948:	230a      	movne	r3, #10
 800894a:	2308      	moveq	r3, #8
 800894c:	2100      	movs	r1, #0
 800894e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008952:	6866      	ldr	r6, [r4, #4]
 8008954:	60a6      	str	r6, [r4, #8]
 8008956:	2e00      	cmp	r6, #0
 8008958:	bfa2      	ittt	ge
 800895a:	6821      	ldrge	r1, [r4, #0]
 800895c:	f021 0104 	bicge.w	r1, r1, #4
 8008960:	6021      	strge	r1, [r4, #0]
 8008962:	b90d      	cbnz	r5, 8008968 <_printf_i+0x110>
 8008964:	2e00      	cmp	r6, #0
 8008966:	d04b      	beq.n	8008a00 <_printf_i+0x1a8>
 8008968:	4616      	mov	r6, r2
 800896a:	fbb5 f1f3 	udiv	r1, r5, r3
 800896e:	fb03 5711 	mls	r7, r3, r1, r5
 8008972:	5dc7      	ldrb	r7, [r0, r7]
 8008974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008978:	462f      	mov	r7, r5
 800897a:	42bb      	cmp	r3, r7
 800897c:	460d      	mov	r5, r1
 800897e:	d9f4      	bls.n	800896a <_printf_i+0x112>
 8008980:	2b08      	cmp	r3, #8
 8008982:	d10b      	bne.n	800899c <_printf_i+0x144>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	07df      	lsls	r7, r3, #31
 8008988:	d508      	bpl.n	800899c <_printf_i+0x144>
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	6861      	ldr	r1, [r4, #4]
 800898e:	4299      	cmp	r1, r3
 8008990:	bfde      	ittt	le
 8008992:	2330      	movle	r3, #48	@ 0x30
 8008994:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008998:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800899c:	1b92      	subs	r2, r2, r6
 800899e:	6122      	str	r2, [r4, #16]
 80089a0:	f8cd a000 	str.w	sl, [sp]
 80089a4:	464b      	mov	r3, r9
 80089a6:	aa03      	add	r2, sp, #12
 80089a8:	4621      	mov	r1, r4
 80089aa:	4640      	mov	r0, r8
 80089ac:	f7ff fee6 	bl	800877c <_printf_common>
 80089b0:	3001      	adds	r0, #1
 80089b2:	d14a      	bne.n	8008a4a <_printf_i+0x1f2>
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089b8:	b004      	add	sp, #16
 80089ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	f043 0320 	orr.w	r3, r3, #32
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	4833      	ldr	r0, [pc, #204]	@ (8008a94 <_printf_i+0x23c>)
 80089c8:	2778      	movs	r7, #120	@ 0x78
 80089ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	6831      	ldr	r1, [r6, #0]
 80089d2:	061f      	lsls	r7, r3, #24
 80089d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80089d8:	d402      	bmi.n	80089e0 <_printf_i+0x188>
 80089da:	065f      	lsls	r7, r3, #25
 80089dc:	bf48      	it	mi
 80089de:	b2ad      	uxthmi	r5, r5
 80089e0:	6031      	str	r1, [r6, #0]
 80089e2:	07d9      	lsls	r1, r3, #31
 80089e4:	bf44      	itt	mi
 80089e6:	f043 0320 	orrmi.w	r3, r3, #32
 80089ea:	6023      	strmi	r3, [r4, #0]
 80089ec:	b11d      	cbz	r5, 80089f6 <_printf_i+0x19e>
 80089ee:	2310      	movs	r3, #16
 80089f0:	e7ac      	b.n	800894c <_printf_i+0xf4>
 80089f2:	4827      	ldr	r0, [pc, #156]	@ (8008a90 <_printf_i+0x238>)
 80089f4:	e7e9      	b.n	80089ca <_printf_i+0x172>
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	f023 0320 	bic.w	r3, r3, #32
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	e7f6      	b.n	80089ee <_printf_i+0x196>
 8008a00:	4616      	mov	r6, r2
 8008a02:	e7bd      	b.n	8008980 <_printf_i+0x128>
 8008a04:	6833      	ldr	r3, [r6, #0]
 8008a06:	6825      	ldr	r5, [r4, #0]
 8008a08:	6961      	ldr	r1, [r4, #20]
 8008a0a:	1d18      	adds	r0, r3, #4
 8008a0c:	6030      	str	r0, [r6, #0]
 8008a0e:	062e      	lsls	r6, r5, #24
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	d501      	bpl.n	8008a18 <_printf_i+0x1c0>
 8008a14:	6019      	str	r1, [r3, #0]
 8008a16:	e002      	b.n	8008a1e <_printf_i+0x1c6>
 8008a18:	0668      	lsls	r0, r5, #25
 8008a1a:	d5fb      	bpl.n	8008a14 <_printf_i+0x1bc>
 8008a1c:	8019      	strh	r1, [r3, #0]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	6123      	str	r3, [r4, #16]
 8008a22:	4616      	mov	r6, r2
 8008a24:	e7bc      	b.n	80089a0 <_printf_i+0x148>
 8008a26:	6833      	ldr	r3, [r6, #0]
 8008a28:	1d1a      	adds	r2, r3, #4
 8008a2a:	6032      	str	r2, [r6, #0]
 8008a2c:	681e      	ldr	r6, [r3, #0]
 8008a2e:	6862      	ldr	r2, [r4, #4]
 8008a30:	2100      	movs	r1, #0
 8008a32:	4630      	mov	r0, r6
 8008a34:	f7f7 fbf4 	bl	8000220 <memchr>
 8008a38:	b108      	cbz	r0, 8008a3e <_printf_i+0x1e6>
 8008a3a:	1b80      	subs	r0, r0, r6
 8008a3c:	6060      	str	r0, [r4, #4]
 8008a3e:	6863      	ldr	r3, [r4, #4]
 8008a40:	6123      	str	r3, [r4, #16]
 8008a42:	2300      	movs	r3, #0
 8008a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a48:	e7aa      	b.n	80089a0 <_printf_i+0x148>
 8008a4a:	6923      	ldr	r3, [r4, #16]
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	4649      	mov	r1, r9
 8008a50:	4640      	mov	r0, r8
 8008a52:	47d0      	blx	sl
 8008a54:	3001      	adds	r0, #1
 8008a56:	d0ad      	beq.n	80089b4 <_printf_i+0x15c>
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	079b      	lsls	r3, r3, #30
 8008a5c:	d413      	bmi.n	8008a86 <_printf_i+0x22e>
 8008a5e:	68e0      	ldr	r0, [r4, #12]
 8008a60:	9b03      	ldr	r3, [sp, #12]
 8008a62:	4298      	cmp	r0, r3
 8008a64:	bfb8      	it	lt
 8008a66:	4618      	movlt	r0, r3
 8008a68:	e7a6      	b.n	80089b8 <_printf_i+0x160>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4632      	mov	r2, r6
 8008a6e:	4649      	mov	r1, r9
 8008a70:	4640      	mov	r0, r8
 8008a72:	47d0      	blx	sl
 8008a74:	3001      	adds	r0, #1
 8008a76:	d09d      	beq.n	80089b4 <_printf_i+0x15c>
 8008a78:	3501      	adds	r5, #1
 8008a7a:	68e3      	ldr	r3, [r4, #12]
 8008a7c:	9903      	ldr	r1, [sp, #12]
 8008a7e:	1a5b      	subs	r3, r3, r1
 8008a80:	42ab      	cmp	r3, r5
 8008a82:	dcf2      	bgt.n	8008a6a <_printf_i+0x212>
 8008a84:	e7eb      	b.n	8008a5e <_printf_i+0x206>
 8008a86:	2500      	movs	r5, #0
 8008a88:	f104 0619 	add.w	r6, r4, #25
 8008a8c:	e7f5      	b.n	8008a7a <_printf_i+0x222>
 8008a8e:	bf00      	nop
 8008a90:	0800931d 	.word	0x0800931d
 8008a94:	0800932e 	.word	0x0800932e

08008a98 <memmove>:
 8008a98:	4288      	cmp	r0, r1
 8008a9a:	b510      	push	{r4, lr}
 8008a9c:	eb01 0402 	add.w	r4, r1, r2
 8008aa0:	d902      	bls.n	8008aa8 <memmove+0x10>
 8008aa2:	4284      	cmp	r4, r0
 8008aa4:	4623      	mov	r3, r4
 8008aa6:	d807      	bhi.n	8008ab8 <memmove+0x20>
 8008aa8:	1e43      	subs	r3, r0, #1
 8008aaa:	42a1      	cmp	r1, r4
 8008aac:	d008      	beq.n	8008ac0 <memmove+0x28>
 8008aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ab6:	e7f8      	b.n	8008aaa <memmove+0x12>
 8008ab8:	4402      	add	r2, r0
 8008aba:	4601      	mov	r1, r0
 8008abc:	428a      	cmp	r2, r1
 8008abe:	d100      	bne.n	8008ac2 <memmove+0x2a>
 8008ac0:	bd10      	pop	{r4, pc}
 8008ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008aca:	e7f7      	b.n	8008abc <memmove+0x24>

08008acc <_sbrk_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d06      	ldr	r5, [pc, #24]	@ (8008ae8 <_sbrk_r+0x1c>)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	602b      	str	r3, [r5, #0]
 8008ad8:	f7f9 fad0 	bl	800207c <_sbrk>
 8008adc:	1c43      	adds	r3, r0, #1
 8008ade:	d102      	bne.n	8008ae6 <_sbrk_r+0x1a>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	b103      	cbz	r3, 8008ae6 <_sbrk_r+0x1a>
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	20002640 	.word	0x20002640

08008aec <memcpy>:
 8008aec:	440a      	add	r2, r1
 8008aee:	4291      	cmp	r1, r2
 8008af0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008af4:	d100      	bne.n	8008af8 <memcpy+0xc>
 8008af6:	4770      	bx	lr
 8008af8:	b510      	push	{r4, lr}
 8008afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b02:	4291      	cmp	r1, r2
 8008b04:	d1f9      	bne.n	8008afa <memcpy+0xe>
 8008b06:	bd10      	pop	{r4, pc}

08008b08 <_realloc_r>:
 8008b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	4615      	mov	r5, r2
 8008b10:	460c      	mov	r4, r1
 8008b12:	b921      	cbnz	r1, 8008b1e <_realloc_r+0x16>
 8008b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b18:	4611      	mov	r1, r2
 8008b1a:	f7ff bc4b 	b.w	80083b4 <_malloc_r>
 8008b1e:	b92a      	cbnz	r2, 8008b2c <_realloc_r+0x24>
 8008b20:	f7ff fbdc 	bl	80082dc <_free_r>
 8008b24:	2400      	movs	r4, #0
 8008b26:	4620      	mov	r0, r4
 8008b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2c:	f000 f81a 	bl	8008b64 <_malloc_usable_size_r>
 8008b30:	4285      	cmp	r5, r0
 8008b32:	4606      	mov	r6, r0
 8008b34:	d802      	bhi.n	8008b3c <_realloc_r+0x34>
 8008b36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b3a:	d8f4      	bhi.n	8008b26 <_realloc_r+0x1e>
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	4640      	mov	r0, r8
 8008b40:	f7ff fc38 	bl	80083b4 <_malloc_r>
 8008b44:	4607      	mov	r7, r0
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d0ec      	beq.n	8008b24 <_realloc_r+0x1c>
 8008b4a:	42b5      	cmp	r5, r6
 8008b4c:	462a      	mov	r2, r5
 8008b4e:	4621      	mov	r1, r4
 8008b50:	bf28      	it	cs
 8008b52:	4632      	movcs	r2, r6
 8008b54:	f7ff ffca 	bl	8008aec <memcpy>
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	f7ff fbbe 	bl	80082dc <_free_r>
 8008b60:	463c      	mov	r4, r7
 8008b62:	e7e0      	b.n	8008b26 <_realloc_r+0x1e>

08008b64 <_malloc_usable_size_r>:
 8008b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b68:	1f18      	subs	r0, r3, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	bfbc      	itt	lt
 8008b6e:	580b      	ldrlt	r3, [r1, r0]
 8008b70:	18c0      	addlt	r0, r0, r3
 8008b72:	4770      	bx	lr

08008b74 <_init>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	bf00      	nop
 8008b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7a:	bc08      	pop	{r3}
 8008b7c:	469e      	mov	lr, r3
 8008b7e:	4770      	bx	lr

08008b80 <_fini>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	bf00      	nop
 8008b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b86:	bc08      	pop	{r3}
 8008b88:	469e      	mov	lr, r3
 8008b8a:	4770      	bx	lr
